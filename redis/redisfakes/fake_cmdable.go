// Code generated by counterfeiter. DO NOT EDIT.
package redisfakes

import (
	"context"
	"sync"
	"time"

	"github.com/dora-network/dora-service-utils/redis"
	redisa "github.com/redis/go-redis/v9"
)

type FakeCmdable struct {
	ACLDryRunStub        func(context.Context, string, ...interface{}) *redisa.StringCmd
	aCLDryRunMutex       sync.RWMutex
	aCLDryRunArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	aCLDryRunReturns struct {
		result1 *redisa.StringCmd
	}
	aCLDryRunReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	ACLLogStub        func(context.Context, int64) *redisa.ACLLogCmd
	aCLLogMutex       sync.RWMutex
	aCLLogArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	aCLLogReturns struct {
		result1 *redisa.ACLLogCmd
	}
	aCLLogReturnsOnCall map[int]struct {
		result1 *redisa.ACLLogCmd
	}
	ACLLogResetStub        func(context.Context) *redisa.StatusCmd
	aCLLogResetMutex       sync.RWMutex
	aCLLogResetArgsForCall []struct {
		arg1 context.Context
	}
	aCLLogResetReturns struct {
		result1 *redisa.StatusCmd
	}
	aCLLogResetReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	AppendStub        func(context.Context, string, string) *redisa.IntCmd
	appendMutex       sync.RWMutex
	appendArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	appendReturns struct {
		result1 *redisa.IntCmd
	}
	appendReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	BFAddStub        func(context.Context, string, interface{}) *redisa.BoolCmd
	bFAddMutex       sync.RWMutex
	bFAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	bFAddReturns struct {
		result1 *redisa.BoolCmd
	}
	bFAddReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	BFCardStub        func(context.Context, string) *redisa.IntCmd
	bFCardMutex       sync.RWMutex
	bFCardArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	bFCardReturns struct {
		result1 *redisa.IntCmd
	}
	bFCardReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	BFExistsStub        func(context.Context, string, interface{}) *redisa.BoolCmd
	bFExistsMutex       sync.RWMutex
	bFExistsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	bFExistsReturns struct {
		result1 *redisa.BoolCmd
	}
	bFExistsReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	BFInfoStub        func(context.Context, string) *redisa.BFInfoCmd
	bFInfoMutex       sync.RWMutex
	bFInfoArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	bFInfoReturns struct {
		result1 *redisa.BFInfoCmd
	}
	bFInfoReturnsOnCall map[int]struct {
		result1 *redisa.BFInfoCmd
	}
	BFInfoArgStub        func(context.Context, string, string) *redisa.BFInfoCmd
	bFInfoArgMutex       sync.RWMutex
	bFInfoArgArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	bFInfoArgReturns struct {
		result1 *redisa.BFInfoCmd
	}
	bFInfoArgReturnsOnCall map[int]struct {
		result1 *redisa.BFInfoCmd
	}
	BFInfoCapacityStub        func(context.Context, string) *redisa.BFInfoCmd
	bFInfoCapacityMutex       sync.RWMutex
	bFInfoCapacityArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	bFInfoCapacityReturns struct {
		result1 *redisa.BFInfoCmd
	}
	bFInfoCapacityReturnsOnCall map[int]struct {
		result1 *redisa.BFInfoCmd
	}
	BFInfoExpansionStub        func(context.Context, string) *redisa.BFInfoCmd
	bFInfoExpansionMutex       sync.RWMutex
	bFInfoExpansionArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	bFInfoExpansionReturns struct {
		result1 *redisa.BFInfoCmd
	}
	bFInfoExpansionReturnsOnCall map[int]struct {
		result1 *redisa.BFInfoCmd
	}
	BFInfoFiltersStub        func(context.Context, string) *redisa.BFInfoCmd
	bFInfoFiltersMutex       sync.RWMutex
	bFInfoFiltersArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	bFInfoFiltersReturns struct {
		result1 *redisa.BFInfoCmd
	}
	bFInfoFiltersReturnsOnCall map[int]struct {
		result1 *redisa.BFInfoCmd
	}
	BFInfoItemsStub        func(context.Context, string) *redisa.BFInfoCmd
	bFInfoItemsMutex       sync.RWMutex
	bFInfoItemsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	bFInfoItemsReturns struct {
		result1 *redisa.BFInfoCmd
	}
	bFInfoItemsReturnsOnCall map[int]struct {
		result1 *redisa.BFInfoCmd
	}
	BFInfoSizeStub        func(context.Context, string) *redisa.BFInfoCmd
	bFInfoSizeMutex       sync.RWMutex
	bFInfoSizeArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	bFInfoSizeReturns struct {
		result1 *redisa.BFInfoCmd
	}
	bFInfoSizeReturnsOnCall map[int]struct {
		result1 *redisa.BFInfoCmd
	}
	BFInsertStub        func(context.Context, string, *redisa.BFInsertOptions, ...interface{}) *redisa.BoolSliceCmd
	bFInsertMutex       sync.RWMutex
	bFInsertArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.BFInsertOptions
		arg4 []interface{}
	}
	bFInsertReturns struct {
		result1 *redisa.BoolSliceCmd
	}
	bFInsertReturnsOnCall map[int]struct {
		result1 *redisa.BoolSliceCmd
	}
	BFLoadChunkStub        func(context.Context, string, int64, interface{}) *redisa.StatusCmd
	bFLoadChunkMutex       sync.RWMutex
	bFLoadChunkArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 interface{}
	}
	bFLoadChunkReturns struct {
		result1 *redisa.StatusCmd
	}
	bFLoadChunkReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	BFMAddStub        func(context.Context, string, ...interface{}) *redisa.BoolSliceCmd
	bFMAddMutex       sync.RWMutex
	bFMAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	bFMAddReturns struct {
		result1 *redisa.BoolSliceCmd
	}
	bFMAddReturnsOnCall map[int]struct {
		result1 *redisa.BoolSliceCmd
	}
	BFMExistsStub        func(context.Context, string, ...interface{}) *redisa.BoolSliceCmd
	bFMExistsMutex       sync.RWMutex
	bFMExistsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	bFMExistsReturns struct {
		result1 *redisa.BoolSliceCmd
	}
	bFMExistsReturnsOnCall map[int]struct {
		result1 *redisa.BoolSliceCmd
	}
	BFReserveStub        func(context.Context, string, float64, int64) *redisa.StatusCmd
	bFReserveMutex       sync.RWMutex
	bFReserveArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 int64
	}
	bFReserveReturns struct {
		result1 *redisa.StatusCmd
	}
	bFReserveReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	BFReserveExpansionStub        func(context.Context, string, float64, int64, int64) *redisa.StatusCmd
	bFReserveExpansionMutex       sync.RWMutex
	bFReserveExpansionArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 int64
		arg5 int64
	}
	bFReserveExpansionReturns struct {
		result1 *redisa.StatusCmd
	}
	bFReserveExpansionReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	BFReserveNonScalingStub        func(context.Context, string, float64, int64) *redisa.StatusCmd
	bFReserveNonScalingMutex       sync.RWMutex
	bFReserveNonScalingArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 int64
	}
	bFReserveNonScalingReturns struct {
		result1 *redisa.StatusCmd
	}
	bFReserveNonScalingReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	BFReserveWithArgsStub        func(context.Context, string, *redisa.BFReserveOptions) *redisa.StatusCmd
	bFReserveWithArgsMutex       sync.RWMutex
	bFReserveWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.BFReserveOptions
	}
	bFReserveWithArgsReturns struct {
		result1 *redisa.StatusCmd
	}
	bFReserveWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	BFScanDumpStub        func(context.Context, string, int64) *redisa.ScanDumpCmd
	bFScanDumpMutex       sync.RWMutex
	bFScanDumpArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}
	bFScanDumpReturns struct {
		result1 *redisa.ScanDumpCmd
	}
	bFScanDumpReturnsOnCall map[int]struct {
		result1 *redisa.ScanDumpCmd
	}
	BLMPopStub        func(context.Context, time.Duration, string, int64, ...string) *redisa.KeyValuesCmd
	bLMPopMutex       sync.RWMutex
	bLMPopArgsForCall []struct {
		arg1 context.Context
		arg2 time.Duration
		arg3 string
		arg4 int64
		arg5 []string
	}
	bLMPopReturns struct {
		result1 *redisa.KeyValuesCmd
	}
	bLMPopReturnsOnCall map[int]struct {
		result1 *redisa.KeyValuesCmd
	}
	BLMoveStub        func(context.Context, string, string, string, string, time.Duration) *redisa.StringCmd
	bLMoveMutex       sync.RWMutex
	bLMoveArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 time.Duration
	}
	bLMoveReturns struct {
		result1 *redisa.StringCmd
	}
	bLMoveReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	BLPopStub        func(context.Context, time.Duration, ...string) *redisa.StringSliceCmd
	bLPopMutex       sync.RWMutex
	bLPopArgsForCall []struct {
		arg1 context.Context
		arg2 time.Duration
		arg3 []string
	}
	bLPopReturns struct {
		result1 *redisa.StringSliceCmd
	}
	bLPopReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	BRPopStub        func(context.Context, time.Duration, ...string) *redisa.StringSliceCmd
	bRPopMutex       sync.RWMutex
	bRPopArgsForCall []struct {
		arg1 context.Context
		arg2 time.Duration
		arg3 []string
	}
	bRPopReturns struct {
		result1 *redisa.StringSliceCmd
	}
	bRPopReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	BRPopLPushStub        func(context.Context, string, string, time.Duration) *redisa.StringCmd
	bRPopLPushMutex       sync.RWMutex
	bRPopLPushArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 time.Duration
	}
	bRPopLPushReturns struct {
		result1 *redisa.StringCmd
	}
	bRPopLPushReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	BZMPopStub        func(context.Context, time.Duration, string, int64, ...string) *redisa.ZSliceWithKeyCmd
	bZMPopMutex       sync.RWMutex
	bZMPopArgsForCall []struct {
		arg1 context.Context
		arg2 time.Duration
		arg3 string
		arg4 int64
		arg5 []string
	}
	bZMPopReturns struct {
		result1 *redisa.ZSliceWithKeyCmd
	}
	bZMPopReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceWithKeyCmd
	}
	BZPopMaxStub        func(context.Context, time.Duration, ...string) *redisa.ZWithKeyCmd
	bZPopMaxMutex       sync.RWMutex
	bZPopMaxArgsForCall []struct {
		arg1 context.Context
		arg2 time.Duration
		arg3 []string
	}
	bZPopMaxReturns struct {
		result1 *redisa.ZWithKeyCmd
	}
	bZPopMaxReturnsOnCall map[int]struct {
		result1 *redisa.ZWithKeyCmd
	}
	BZPopMinStub        func(context.Context, time.Duration, ...string) *redisa.ZWithKeyCmd
	bZPopMinMutex       sync.RWMutex
	bZPopMinArgsForCall []struct {
		arg1 context.Context
		arg2 time.Duration
		arg3 []string
	}
	bZPopMinReturns struct {
		result1 *redisa.ZWithKeyCmd
	}
	bZPopMinReturnsOnCall map[int]struct {
		result1 *redisa.ZWithKeyCmd
	}
	BgRewriteAOFStub        func(context.Context) *redisa.StatusCmd
	bgRewriteAOFMutex       sync.RWMutex
	bgRewriteAOFArgsForCall []struct {
		arg1 context.Context
	}
	bgRewriteAOFReturns struct {
		result1 *redisa.StatusCmd
	}
	bgRewriteAOFReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	BgSaveStub        func(context.Context) *redisa.StatusCmd
	bgSaveMutex       sync.RWMutex
	bgSaveArgsForCall []struct {
		arg1 context.Context
	}
	bgSaveReturns struct {
		result1 *redisa.StatusCmd
	}
	bgSaveReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	BitCountStub        func(context.Context, string, *redisa.BitCount) *redisa.IntCmd
	bitCountMutex       sync.RWMutex
	bitCountArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.BitCount
	}
	bitCountReturns struct {
		result1 *redisa.IntCmd
	}
	bitCountReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	BitFieldStub        func(context.Context, string, ...interface{}) *redisa.IntSliceCmd
	bitFieldMutex       sync.RWMutex
	bitFieldArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	bitFieldReturns struct {
		result1 *redisa.IntSliceCmd
	}
	bitFieldReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	BitFieldROStub        func(context.Context, string, ...interface{}) *redisa.IntSliceCmd
	bitFieldROMutex       sync.RWMutex
	bitFieldROArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	bitFieldROReturns struct {
		result1 *redisa.IntSliceCmd
	}
	bitFieldROReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	BitOpAndStub        func(context.Context, string, ...string) *redisa.IntCmd
	bitOpAndMutex       sync.RWMutex
	bitOpAndArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	bitOpAndReturns struct {
		result1 *redisa.IntCmd
	}
	bitOpAndReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	BitOpNotStub        func(context.Context, string, string) *redisa.IntCmd
	bitOpNotMutex       sync.RWMutex
	bitOpNotArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	bitOpNotReturns struct {
		result1 *redisa.IntCmd
	}
	bitOpNotReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	BitOpOrStub        func(context.Context, string, ...string) *redisa.IntCmd
	bitOpOrMutex       sync.RWMutex
	bitOpOrArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	bitOpOrReturns struct {
		result1 *redisa.IntCmd
	}
	bitOpOrReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	BitOpXorStub        func(context.Context, string, ...string) *redisa.IntCmd
	bitOpXorMutex       sync.RWMutex
	bitOpXorArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	bitOpXorReturns struct {
		result1 *redisa.IntCmd
	}
	bitOpXorReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	BitPosStub        func(context.Context, string, int64, ...int64) *redisa.IntCmd
	bitPosMutex       sync.RWMutex
	bitPosArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 []int64
	}
	bitPosReturns struct {
		result1 *redisa.IntCmd
	}
	bitPosReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	BitPosSpanStub        func(context.Context, string, int8, int64, int64, string) *redisa.IntCmd
	bitPosSpanMutex       sync.RWMutex
	bitPosSpanArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int8
		arg4 int64
		arg5 int64
		arg6 string
	}
	bitPosSpanReturns struct {
		result1 *redisa.IntCmd
	}
	bitPosSpanReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	CFAddStub        func(context.Context, string, interface{}) *redisa.BoolCmd
	cFAddMutex       sync.RWMutex
	cFAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	cFAddReturns struct {
		result1 *redisa.BoolCmd
	}
	cFAddReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	CFAddNXStub        func(context.Context, string, interface{}) *redisa.BoolCmd
	cFAddNXMutex       sync.RWMutex
	cFAddNXArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	cFAddNXReturns struct {
		result1 *redisa.BoolCmd
	}
	cFAddNXReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	CFCountStub        func(context.Context, string, interface{}) *redisa.IntCmd
	cFCountMutex       sync.RWMutex
	cFCountArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	cFCountReturns struct {
		result1 *redisa.IntCmd
	}
	cFCountReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	CFDelStub        func(context.Context, string, interface{}) *redisa.BoolCmd
	cFDelMutex       sync.RWMutex
	cFDelArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	cFDelReturns struct {
		result1 *redisa.BoolCmd
	}
	cFDelReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	CFExistsStub        func(context.Context, string, interface{}) *redisa.BoolCmd
	cFExistsMutex       sync.RWMutex
	cFExistsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	cFExistsReturns struct {
		result1 *redisa.BoolCmd
	}
	cFExistsReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	CFInfoStub        func(context.Context, string) *redisa.CFInfoCmd
	cFInfoMutex       sync.RWMutex
	cFInfoArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	cFInfoReturns struct {
		result1 *redisa.CFInfoCmd
	}
	cFInfoReturnsOnCall map[int]struct {
		result1 *redisa.CFInfoCmd
	}
	CFInsertStub        func(context.Context, string, *redisa.CFInsertOptions, ...interface{}) *redisa.BoolSliceCmd
	cFInsertMutex       sync.RWMutex
	cFInsertArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.CFInsertOptions
		arg4 []interface{}
	}
	cFInsertReturns struct {
		result1 *redisa.BoolSliceCmd
	}
	cFInsertReturnsOnCall map[int]struct {
		result1 *redisa.BoolSliceCmd
	}
	CFInsertNXStub        func(context.Context, string, *redisa.CFInsertOptions, ...interface{}) *redisa.IntSliceCmd
	cFInsertNXMutex       sync.RWMutex
	cFInsertNXArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.CFInsertOptions
		arg4 []interface{}
	}
	cFInsertNXReturns struct {
		result1 *redisa.IntSliceCmd
	}
	cFInsertNXReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	CFLoadChunkStub        func(context.Context, string, int64, interface{}) *redisa.StatusCmd
	cFLoadChunkMutex       sync.RWMutex
	cFLoadChunkArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 interface{}
	}
	cFLoadChunkReturns struct {
		result1 *redisa.StatusCmd
	}
	cFLoadChunkReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	CFMExistsStub        func(context.Context, string, ...interface{}) *redisa.BoolSliceCmd
	cFMExistsMutex       sync.RWMutex
	cFMExistsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	cFMExistsReturns struct {
		result1 *redisa.BoolSliceCmd
	}
	cFMExistsReturnsOnCall map[int]struct {
		result1 *redisa.BoolSliceCmd
	}
	CFReserveStub        func(context.Context, string, int64) *redisa.StatusCmd
	cFReserveMutex       sync.RWMutex
	cFReserveArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}
	cFReserveReturns struct {
		result1 *redisa.StatusCmd
	}
	cFReserveReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	CFReserveBucketSizeStub        func(context.Context, string, int64, int64) *redisa.StatusCmd
	cFReserveBucketSizeMutex       sync.RWMutex
	cFReserveBucketSizeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	cFReserveBucketSizeReturns struct {
		result1 *redisa.StatusCmd
	}
	cFReserveBucketSizeReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	CFReserveExpansionStub        func(context.Context, string, int64, int64) *redisa.StatusCmd
	cFReserveExpansionMutex       sync.RWMutex
	cFReserveExpansionArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	cFReserveExpansionReturns struct {
		result1 *redisa.StatusCmd
	}
	cFReserveExpansionReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	CFReserveMaxIterationsStub        func(context.Context, string, int64, int64) *redisa.StatusCmd
	cFReserveMaxIterationsMutex       sync.RWMutex
	cFReserveMaxIterationsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	cFReserveMaxIterationsReturns struct {
		result1 *redisa.StatusCmd
	}
	cFReserveMaxIterationsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	CFReserveWithArgsStub        func(context.Context, string, *redisa.CFReserveOptions) *redisa.StatusCmd
	cFReserveWithArgsMutex       sync.RWMutex
	cFReserveWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.CFReserveOptions
	}
	cFReserveWithArgsReturns struct {
		result1 *redisa.StatusCmd
	}
	cFReserveWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	CFScanDumpStub        func(context.Context, string, int64) *redisa.ScanDumpCmd
	cFScanDumpMutex       sync.RWMutex
	cFScanDumpArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}
	cFScanDumpReturns struct {
		result1 *redisa.ScanDumpCmd
	}
	cFScanDumpReturnsOnCall map[int]struct {
		result1 *redisa.ScanDumpCmd
	}
	CMSIncrByStub        func(context.Context, string, ...interface{}) *redisa.IntSliceCmd
	cMSIncrByMutex       sync.RWMutex
	cMSIncrByArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	cMSIncrByReturns struct {
		result1 *redisa.IntSliceCmd
	}
	cMSIncrByReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	CMSInfoStub        func(context.Context, string) *redisa.CMSInfoCmd
	cMSInfoMutex       sync.RWMutex
	cMSInfoArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	cMSInfoReturns struct {
		result1 *redisa.CMSInfoCmd
	}
	cMSInfoReturnsOnCall map[int]struct {
		result1 *redisa.CMSInfoCmd
	}
	CMSInitByDimStub        func(context.Context, string, int64, int64) *redisa.StatusCmd
	cMSInitByDimMutex       sync.RWMutex
	cMSInitByDimArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	cMSInitByDimReturns struct {
		result1 *redisa.StatusCmd
	}
	cMSInitByDimReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	CMSInitByProbStub        func(context.Context, string, float64, float64) *redisa.StatusCmd
	cMSInitByProbMutex       sync.RWMutex
	cMSInitByProbArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 float64
	}
	cMSInitByProbReturns struct {
		result1 *redisa.StatusCmd
	}
	cMSInitByProbReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	CMSMergeStub        func(context.Context, string, ...string) *redisa.StatusCmd
	cMSMergeMutex       sync.RWMutex
	cMSMergeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	cMSMergeReturns struct {
		result1 *redisa.StatusCmd
	}
	cMSMergeReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	CMSMergeWithWeightStub        func(context.Context, string, map[string]int64) *redisa.StatusCmd
	cMSMergeWithWeightMutex       sync.RWMutex
	cMSMergeWithWeightArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]int64
	}
	cMSMergeWithWeightReturns struct {
		result1 *redisa.StatusCmd
	}
	cMSMergeWithWeightReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	CMSQueryStub        func(context.Context, string, ...interface{}) *redisa.IntSliceCmd
	cMSQueryMutex       sync.RWMutex
	cMSQueryArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	cMSQueryReturns struct {
		result1 *redisa.IntSliceCmd
	}
	cMSQueryReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	ClientGetNameStub        func(context.Context) *redisa.StringCmd
	clientGetNameMutex       sync.RWMutex
	clientGetNameArgsForCall []struct {
		arg1 context.Context
	}
	clientGetNameReturns struct {
		result1 *redisa.StringCmd
	}
	clientGetNameReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	ClientIDStub        func(context.Context) *redisa.IntCmd
	clientIDMutex       sync.RWMutex
	clientIDArgsForCall []struct {
		arg1 context.Context
	}
	clientIDReturns struct {
		result1 *redisa.IntCmd
	}
	clientIDReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ClientInfoStub        func(context.Context) *redisa.ClientInfoCmd
	clientInfoMutex       sync.RWMutex
	clientInfoArgsForCall []struct {
		arg1 context.Context
	}
	clientInfoReturns struct {
		result1 *redisa.ClientInfoCmd
	}
	clientInfoReturnsOnCall map[int]struct {
		result1 *redisa.ClientInfoCmd
	}
	ClientKillStub        func(context.Context, string) *redisa.StatusCmd
	clientKillMutex       sync.RWMutex
	clientKillArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	clientKillReturns struct {
		result1 *redisa.StatusCmd
	}
	clientKillReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ClientKillByFilterStub        func(context.Context, ...string) *redisa.IntCmd
	clientKillByFilterMutex       sync.RWMutex
	clientKillByFilterArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	clientKillByFilterReturns struct {
		result1 *redisa.IntCmd
	}
	clientKillByFilterReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ClientListStub        func(context.Context) *redisa.StringCmd
	clientListMutex       sync.RWMutex
	clientListArgsForCall []struct {
		arg1 context.Context
	}
	clientListReturns struct {
		result1 *redisa.StringCmd
	}
	clientListReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	ClientPauseStub        func(context.Context, time.Duration) *redisa.BoolCmd
	clientPauseMutex       sync.RWMutex
	clientPauseArgsForCall []struct {
		arg1 context.Context
		arg2 time.Duration
	}
	clientPauseReturns struct {
		result1 *redisa.BoolCmd
	}
	clientPauseReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	ClientUnblockStub        func(context.Context, int64) *redisa.IntCmd
	clientUnblockMutex       sync.RWMutex
	clientUnblockArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	clientUnblockReturns struct {
		result1 *redisa.IntCmd
	}
	clientUnblockReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ClientUnblockWithErrorStub        func(context.Context, int64) *redisa.IntCmd
	clientUnblockWithErrorMutex       sync.RWMutex
	clientUnblockWithErrorArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	clientUnblockWithErrorReturns struct {
		result1 *redisa.IntCmd
	}
	clientUnblockWithErrorReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ClientUnpauseStub        func(context.Context) *redisa.BoolCmd
	clientUnpauseMutex       sync.RWMutex
	clientUnpauseArgsForCall []struct {
		arg1 context.Context
	}
	clientUnpauseReturns struct {
		result1 *redisa.BoolCmd
	}
	clientUnpauseReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	ClusterAddSlotsStub        func(context.Context, ...int) *redisa.StatusCmd
	clusterAddSlotsMutex       sync.RWMutex
	clusterAddSlotsArgsForCall []struct {
		arg1 context.Context
		arg2 []int
	}
	clusterAddSlotsReturns struct {
		result1 *redisa.StatusCmd
	}
	clusterAddSlotsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ClusterAddSlotsRangeStub        func(context.Context, int, int) *redisa.StatusCmd
	clusterAddSlotsRangeMutex       sync.RWMutex
	clusterAddSlotsRangeArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}
	clusterAddSlotsRangeReturns struct {
		result1 *redisa.StatusCmd
	}
	clusterAddSlotsRangeReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ClusterCountFailureReportsStub        func(context.Context, string) *redisa.IntCmd
	clusterCountFailureReportsMutex       sync.RWMutex
	clusterCountFailureReportsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	clusterCountFailureReportsReturns struct {
		result1 *redisa.IntCmd
	}
	clusterCountFailureReportsReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ClusterCountKeysInSlotStub        func(context.Context, int) *redisa.IntCmd
	clusterCountKeysInSlotMutex       sync.RWMutex
	clusterCountKeysInSlotArgsForCall []struct {
		arg1 context.Context
		arg2 int
	}
	clusterCountKeysInSlotReturns struct {
		result1 *redisa.IntCmd
	}
	clusterCountKeysInSlotReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ClusterDelSlotsStub        func(context.Context, ...int) *redisa.StatusCmd
	clusterDelSlotsMutex       sync.RWMutex
	clusterDelSlotsArgsForCall []struct {
		arg1 context.Context
		arg2 []int
	}
	clusterDelSlotsReturns struct {
		result1 *redisa.StatusCmd
	}
	clusterDelSlotsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ClusterDelSlotsRangeStub        func(context.Context, int, int) *redisa.StatusCmd
	clusterDelSlotsRangeMutex       sync.RWMutex
	clusterDelSlotsRangeArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}
	clusterDelSlotsRangeReturns struct {
		result1 *redisa.StatusCmd
	}
	clusterDelSlotsRangeReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ClusterFailoverStub        func(context.Context) *redisa.StatusCmd
	clusterFailoverMutex       sync.RWMutex
	clusterFailoverArgsForCall []struct {
		arg1 context.Context
	}
	clusterFailoverReturns struct {
		result1 *redisa.StatusCmd
	}
	clusterFailoverReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ClusterForgetStub        func(context.Context, string) *redisa.StatusCmd
	clusterForgetMutex       sync.RWMutex
	clusterForgetArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	clusterForgetReturns struct {
		result1 *redisa.StatusCmd
	}
	clusterForgetReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ClusterGetKeysInSlotStub        func(context.Context, int, int) *redisa.StringSliceCmd
	clusterGetKeysInSlotMutex       sync.RWMutex
	clusterGetKeysInSlotArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}
	clusterGetKeysInSlotReturns struct {
		result1 *redisa.StringSliceCmd
	}
	clusterGetKeysInSlotReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ClusterInfoStub        func(context.Context) *redisa.StringCmd
	clusterInfoMutex       sync.RWMutex
	clusterInfoArgsForCall []struct {
		arg1 context.Context
	}
	clusterInfoReturns struct {
		result1 *redisa.StringCmd
	}
	clusterInfoReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	ClusterKeySlotStub        func(context.Context, string) *redisa.IntCmd
	clusterKeySlotMutex       sync.RWMutex
	clusterKeySlotArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	clusterKeySlotReturns struct {
		result1 *redisa.IntCmd
	}
	clusterKeySlotReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ClusterLinksStub        func(context.Context) *redisa.ClusterLinksCmd
	clusterLinksMutex       sync.RWMutex
	clusterLinksArgsForCall []struct {
		arg1 context.Context
	}
	clusterLinksReturns struct {
		result1 *redisa.ClusterLinksCmd
	}
	clusterLinksReturnsOnCall map[int]struct {
		result1 *redisa.ClusterLinksCmd
	}
	ClusterMeetStub        func(context.Context, string, string) *redisa.StatusCmd
	clusterMeetMutex       sync.RWMutex
	clusterMeetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	clusterMeetReturns struct {
		result1 *redisa.StatusCmd
	}
	clusterMeetReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ClusterMyShardIDStub        func(context.Context) *redisa.StringCmd
	clusterMyShardIDMutex       sync.RWMutex
	clusterMyShardIDArgsForCall []struct {
		arg1 context.Context
	}
	clusterMyShardIDReturns struct {
		result1 *redisa.StringCmd
	}
	clusterMyShardIDReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	ClusterNodesStub        func(context.Context) *redisa.StringCmd
	clusterNodesMutex       sync.RWMutex
	clusterNodesArgsForCall []struct {
		arg1 context.Context
	}
	clusterNodesReturns struct {
		result1 *redisa.StringCmd
	}
	clusterNodesReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	ClusterReplicateStub        func(context.Context, string) *redisa.StatusCmd
	clusterReplicateMutex       sync.RWMutex
	clusterReplicateArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	clusterReplicateReturns struct {
		result1 *redisa.StatusCmd
	}
	clusterReplicateReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ClusterResetHardStub        func(context.Context) *redisa.StatusCmd
	clusterResetHardMutex       sync.RWMutex
	clusterResetHardArgsForCall []struct {
		arg1 context.Context
	}
	clusterResetHardReturns struct {
		result1 *redisa.StatusCmd
	}
	clusterResetHardReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ClusterResetSoftStub        func(context.Context) *redisa.StatusCmd
	clusterResetSoftMutex       sync.RWMutex
	clusterResetSoftArgsForCall []struct {
		arg1 context.Context
	}
	clusterResetSoftReturns struct {
		result1 *redisa.StatusCmd
	}
	clusterResetSoftReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ClusterSaveConfigStub        func(context.Context) *redisa.StatusCmd
	clusterSaveConfigMutex       sync.RWMutex
	clusterSaveConfigArgsForCall []struct {
		arg1 context.Context
	}
	clusterSaveConfigReturns struct {
		result1 *redisa.StatusCmd
	}
	clusterSaveConfigReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ClusterShardsStub        func(context.Context) *redisa.ClusterShardsCmd
	clusterShardsMutex       sync.RWMutex
	clusterShardsArgsForCall []struct {
		arg1 context.Context
	}
	clusterShardsReturns struct {
		result1 *redisa.ClusterShardsCmd
	}
	clusterShardsReturnsOnCall map[int]struct {
		result1 *redisa.ClusterShardsCmd
	}
	ClusterSlavesStub        func(context.Context, string) *redisa.StringSliceCmd
	clusterSlavesMutex       sync.RWMutex
	clusterSlavesArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	clusterSlavesReturns struct {
		result1 *redisa.StringSliceCmd
	}
	clusterSlavesReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ClusterSlotsStub        func(context.Context) *redisa.ClusterSlotsCmd
	clusterSlotsMutex       sync.RWMutex
	clusterSlotsArgsForCall []struct {
		arg1 context.Context
	}
	clusterSlotsReturns struct {
		result1 *redisa.ClusterSlotsCmd
	}
	clusterSlotsReturnsOnCall map[int]struct {
		result1 *redisa.ClusterSlotsCmd
	}
	CommandStub        func(context.Context) *redisa.CommandsInfoCmd
	commandMutex       sync.RWMutex
	commandArgsForCall []struct {
		arg1 context.Context
	}
	commandReturns struct {
		result1 *redisa.CommandsInfoCmd
	}
	commandReturnsOnCall map[int]struct {
		result1 *redisa.CommandsInfoCmd
	}
	CommandGetKeysStub        func(context.Context, ...interface{}) *redisa.StringSliceCmd
	commandGetKeysMutex       sync.RWMutex
	commandGetKeysArgsForCall []struct {
		arg1 context.Context
		arg2 []interface{}
	}
	commandGetKeysReturns struct {
		result1 *redisa.StringSliceCmd
	}
	commandGetKeysReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	CommandGetKeysAndFlagsStub        func(context.Context, ...interface{}) *redisa.KeyFlagsCmd
	commandGetKeysAndFlagsMutex       sync.RWMutex
	commandGetKeysAndFlagsArgsForCall []struct {
		arg1 context.Context
		arg2 []interface{}
	}
	commandGetKeysAndFlagsReturns struct {
		result1 *redisa.KeyFlagsCmd
	}
	commandGetKeysAndFlagsReturnsOnCall map[int]struct {
		result1 *redisa.KeyFlagsCmd
	}
	CommandListStub        func(context.Context, *redisa.FilterBy) *redisa.StringSliceCmd
	commandListMutex       sync.RWMutex
	commandListArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.FilterBy
	}
	commandListReturns struct {
		result1 *redisa.StringSliceCmd
	}
	commandListReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ConfigGetStub        func(context.Context, string) *redisa.MapStringStringCmd
	configGetMutex       sync.RWMutex
	configGetArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	configGetReturns struct {
		result1 *redisa.MapStringStringCmd
	}
	configGetReturnsOnCall map[int]struct {
		result1 *redisa.MapStringStringCmd
	}
	ConfigResetStatStub        func(context.Context) *redisa.StatusCmd
	configResetStatMutex       sync.RWMutex
	configResetStatArgsForCall []struct {
		arg1 context.Context
	}
	configResetStatReturns struct {
		result1 *redisa.StatusCmd
	}
	configResetStatReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ConfigRewriteStub        func(context.Context) *redisa.StatusCmd
	configRewriteMutex       sync.RWMutex
	configRewriteArgsForCall []struct {
		arg1 context.Context
	}
	configRewriteReturns struct {
		result1 *redisa.StatusCmd
	}
	configRewriteReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ConfigSetStub        func(context.Context, string, string) *redisa.StatusCmd
	configSetMutex       sync.RWMutex
	configSetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	configSetReturns struct {
		result1 *redisa.StatusCmd
	}
	configSetReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	CopyStub        func(context.Context, string, string, int, bool) *redisa.IntCmd
	copyMutex       sync.RWMutex
	copyArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 bool
	}
	copyReturns struct {
		result1 *redisa.IntCmd
	}
	copyReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	DBSizeStub        func(context.Context) *redisa.IntCmd
	dBSizeMutex       sync.RWMutex
	dBSizeArgsForCall []struct {
		arg1 context.Context
	}
	dBSizeReturns struct {
		result1 *redisa.IntCmd
	}
	dBSizeReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	DebugObjectStub        func(context.Context, string) *redisa.StringCmd
	debugObjectMutex       sync.RWMutex
	debugObjectArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	debugObjectReturns struct {
		result1 *redisa.StringCmd
	}
	debugObjectReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	DecrStub        func(context.Context, string) *redisa.IntCmd
	decrMutex       sync.RWMutex
	decrArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	decrReturns struct {
		result1 *redisa.IntCmd
	}
	decrReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	DecrByStub        func(context.Context, string, int64) *redisa.IntCmd
	decrByMutex       sync.RWMutex
	decrByArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}
	decrByReturns struct {
		result1 *redisa.IntCmd
	}
	decrByReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	DelStub        func(context.Context, ...string) *redisa.IntCmd
	delMutex       sync.RWMutex
	delArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	delReturns struct {
		result1 *redisa.IntCmd
	}
	delReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	DumpStub        func(context.Context, string) *redisa.StringCmd
	dumpMutex       sync.RWMutex
	dumpArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	dumpReturns struct {
		result1 *redisa.StringCmd
	}
	dumpReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	EchoStub        func(context.Context, interface{}) *redisa.StringCmd
	echoMutex       sync.RWMutex
	echoArgsForCall []struct {
		arg1 context.Context
		arg2 interface{}
	}
	echoReturns struct {
		result1 *redisa.StringCmd
	}
	echoReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	EvalStub        func(context.Context, string, []string, ...interface{}) *redisa.Cmd
	evalMutex       sync.RWMutex
	evalArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}
	evalReturns struct {
		result1 *redisa.Cmd
	}
	evalReturnsOnCall map[int]struct {
		result1 *redisa.Cmd
	}
	EvalROStub        func(context.Context, string, []string, ...interface{}) *redisa.Cmd
	evalROMutex       sync.RWMutex
	evalROArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}
	evalROReturns struct {
		result1 *redisa.Cmd
	}
	evalROReturnsOnCall map[int]struct {
		result1 *redisa.Cmd
	}
	EvalShaStub        func(context.Context, string, []string, ...interface{}) *redisa.Cmd
	evalShaMutex       sync.RWMutex
	evalShaArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}
	evalShaReturns struct {
		result1 *redisa.Cmd
	}
	evalShaReturnsOnCall map[int]struct {
		result1 *redisa.Cmd
	}
	EvalShaROStub        func(context.Context, string, []string, ...interface{}) *redisa.Cmd
	evalShaROMutex       sync.RWMutex
	evalShaROArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}
	evalShaROReturns struct {
		result1 *redisa.Cmd
	}
	evalShaROReturnsOnCall map[int]struct {
		result1 *redisa.Cmd
	}
	ExistsStub        func(context.Context, ...string) *redisa.IntCmd
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	existsReturns struct {
		result1 *redisa.IntCmd
	}
	existsReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ExpireStub        func(context.Context, string, time.Duration) *redisa.BoolCmd
	expireMutex       sync.RWMutex
	expireArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}
	expireReturns struct {
		result1 *redisa.BoolCmd
	}
	expireReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	ExpireAtStub        func(context.Context, string, time.Time) *redisa.BoolCmd
	expireAtMutex       sync.RWMutex
	expireAtArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
	}
	expireAtReturns struct {
		result1 *redisa.BoolCmd
	}
	expireAtReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	ExpireGTStub        func(context.Context, string, time.Duration) *redisa.BoolCmd
	expireGTMutex       sync.RWMutex
	expireGTArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}
	expireGTReturns struct {
		result1 *redisa.BoolCmd
	}
	expireGTReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	ExpireLTStub        func(context.Context, string, time.Duration) *redisa.BoolCmd
	expireLTMutex       sync.RWMutex
	expireLTArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}
	expireLTReturns struct {
		result1 *redisa.BoolCmd
	}
	expireLTReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	ExpireNXStub        func(context.Context, string, time.Duration) *redisa.BoolCmd
	expireNXMutex       sync.RWMutex
	expireNXArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}
	expireNXReturns struct {
		result1 *redisa.BoolCmd
	}
	expireNXReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	ExpireTimeStub        func(context.Context, string) *redisa.DurationCmd
	expireTimeMutex       sync.RWMutex
	expireTimeArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	expireTimeReturns struct {
		result1 *redisa.DurationCmd
	}
	expireTimeReturnsOnCall map[int]struct {
		result1 *redisa.DurationCmd
	}
	ExpireXXStub        func(context.Context, string, time.Duration) *redisa.BoolCmd
	expireXXMutex       sync.RWMutex
	expireXXArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}
	expireXXReturns struct {
		result1 *redisa.BoolCmd
	}
	expireXXReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	FCallStub        func(context.Context, string, []string, ...interface{}) *redisa.Cmd
	fCallMutex       sync.RWMutex
	fCallArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}
	fCallReturns struct {
		result1 *redisa.Cmd
	}
	fCallReturnsOnCall map[int]struct {
		result1 *redisa.Cmd
	}
	FCallROStub        func(context.Context, string, []string, ...interface{}) *redisa.Cmd
	fCallROMutex       sync.RWMutex
	fCallROArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}
	fCallROReturns struct {
		result1 *redisa.Cmd
	}
	fCallROReturnsOnCall map[int]struct {
		result1 *redisa.Cmd
	}
	FCallRoStub        func(context.Context, string, []string, ...interface{}) *redisa.Cmd
	fCallRoMutex       sync.RWMutex
	fCallRoArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}
	fCallRoReturns struct {
		result1 *redisa.Cmd
	}
	fCallRoReturnsOnCall map[int]struct {
		result1 *redisa.Cmd
	}
	FTAggregateStub        func(context.Context, string, string) *redisa.MapStringInterfaceCmd
	fTAggregateMutex       sync.RWMutex
	fTAggregateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	fTAggregateReturns struct {
		result1 *redisa.MapStringInterfaceCmd
	}
	fTAggregateReturnsOnCall map[int]struct {
		result1 *redisa.MapStringInterfaceCmd
	}
	FTAggregateWithArgsStub        func(context.Context, string, string, *redisa.FTAggregateOptions) *redisa.AggregateCmd
	fTAggregateWithArgsMutex       sync.RWMutex
	fTAggregateWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.FTAggregateOptions
	}
	fTAggregateWithArgsReturns struct {
		result1 *redisa.AggregateCmd
	}
	fTAggregateWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.AggregateCmd
	}
	FTAliasAddStub        func(context.Context, string, string) *redisa.StatusCmd
	fTAliasAddMutex       sync.RWMutex
	fTAliasAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	fTAliasAddReturns struct {
		result1 *redisa.StatusCmd
	}
	fTAliasAddReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FTAliasDelStub        func(context.Context, string) *redisa.StatusCmd
	fTAliasDelMutex       sync.RWMutex
	fTAliasDelArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	fTAliasDelReturns struct {
		result1 *redisa.StatusCmd
	}
	fTAliasDelReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FTAliasUpdateStub        func(context.Context, string, string) *redisa.StatusCmd
	fTAliasUpdateMutex       sync.RWMutex
	fTAliasUpdateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	fTAliasUpdateReturns struct {
		result1 *redisa.StatusCmd
	}
	fTAliasUpdateReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FTAlterStub        func(context.Context, string, bool, []interface{}) *redisa.StatusCmd
	fTAlterMutex       sync.RWMutex
	fTAlterArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 bool
		arg4 []interface{}
	}
	fTAlterReturns struct {
		result1 *redisa.StatusCmd
	}
	fTAlterReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FTConfigGetStub        func(context.Context, string) *redisa.MapMapStringInterfaceCmd
	fTConfigGetMutex       sync.RWMutex
	fTConfigGetArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	fTConfigGetReturns struct {
		result1 *redisa.MapMapStringInterfaceCmd
	}
	fTConfigGetReturnsOnCall map[int]struct {
		result1 *redisa.MapMapStringInterfaceCmd
	}
	FTConfigSetStub        func(context.Context, string, interface{}) *redisa.StatusCmd
	fTConfigSetMutex       sync.RWMutex
	fTConfigSetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	fTConfigSetReturns struct {
		result1 *redisa.StatusCmd
	}
	fTConfigSetReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FTCreateStub        func(context.Context, string, *redisa.FTCreateOptions, ...*redisa.FieldSchema) *redisa.StatusCmd
	fTCreateMutex       sync.RWMutex
	fTCreateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.FTCreateOptions
		arg4 []*redisa.FieldSchema
	}
	fTCreateReturns struct {
		result1 *redisa.StatusCmd
	}
	fTCreateReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FTCursorDelStub        func(context.Context, string, int) *redisa.StatusCmd
	fTCursorDelMutex       sync.RWMutex
	fTCursorDelArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	fTCursorDelReturns struct {
		result1 *redisa.StatusCmd
	}
	fTCursorDelReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FTCursorReadStub        func(context.Context, string, int, int) *redisa.MapStringInterfaceCmd
	fTCursorReadMutex       sync.RWMutex
	fTCursorReadArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
	}
	fTCursorReadReturns struct {
		result1 *redisa.MapStringInterfaceCmd
	}
	fTCursorReadReturnsOnCall map[int]struct {
		result1 *redisa.MapStringInterfaceCmd
	}
	FTDictAddStub        func(context.Context, string, ...interface{}) *redisa.IntCmd
	fTDictAddMutex       sync.RWMutex
	fTDictAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	fTDictAddReturns struct {
		result1 *redisa.IntCmd
	}
	fTDictAddReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	FTDictDelStub        func(context.Context, string, ...interface{}) *redisa.IntCmd
	fTDictDelMutex       sync.RWMutex
	fTDictDelArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	fTDictDelReturns struct {
		result1 *redisa.IntCmd
	}
	fTDictDelReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	FTDictDumpStub        func(context.Context, string) *redisa.StringSliceCmd
	fTDictDumpMutex       sync.RWMutex
	fTDictDumpArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	fTDictDumpReturns struct {
		result1 *redisa.StringSliceCmd
	}
	fTDictDumpReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	FTDropIndexStub        func(context.Context, string) *redisa.StatusCmd
	fTDropIndexMutex       sync.RWMutex
	fTDropIndexArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	fTDropIndexReturns struct {
		result1 *redisa.StatusCmd
	}
	fTDropIndexReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FTDropIndexWithArgsStub        func(context.Context, string, *redisa.FTDropIndexOptions) *redisa.StatusCmd
	fTDropIndexWithArgsMutex       sync.RWMutex
	fTDropIndexWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.FTDropIndexOptions
	}
	fTDropIndexWithArgsReturns struct {
		result1 *redisa.StatusCmd
	}
	fTDropIndexWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FTExplainStub        func(context.Context, string, string) *redisa.StringCmd
	fTExplainMutex       sync.RWMutex
	fTExplainArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	fTExplainReturns struct {
		result1 *redisa.StringCmd
	}
	fTExplainReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	FTExplainWithArgsStub        func(context.Context, string, string, *redisa.FTExplainOptions) *redisa.StringCmd
	fTExplainWithArgsMutex       sync.RWMutex
	fTExplainWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.FTExplainOptions
	}
	fTExplainWithArgsReturns struct {
		result1 *redisa.StringCmd
	}
	fTExplainWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	FTInfoStub        func(context.Context, string) *redisa.FTInfoCmd
	fTInfoMutex       sync.RWMutex
	fTInfoArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	fTInfoReturns struct {
		result1 *redisa.FTInfoCmd
	}
	fTInfoReturnsOnCall map[int]struct {
		result1 *redisa.FTInfoCmd
	}
	FTSearchStub        func(context.Context, string, string) *redisa.FTSearchCmd
	fTSearchMutex       sync.RWMutex
	fTSearchArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	fTSearchReturns struct {
		result1 *redisa.FTSearchCmd
	}
	fTSearchReturnsOnCall map[int]struct {
		result1 *redisa.FTSearchCmd
	}
	FTSearchWithArgsStub        func(context.Context, string, string, *redisa.FTSearchOptions) *redisa.FTSearchCmd
	fTSearchWithArgsMutex       sync.RWMutex
	fTSearchWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.FTSearchOptions
	}
	fTSearchWithArgsReturns struct {
		result1 *redisa.FTSearchCmd
	}
	fTSearchWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.FTSearchCmd
	}
	FTSpellCheckStub        func(context.Context, string, string) *redisa.FTSpellCheckCmd
	fTSpellCheckMutex       sync.RWMutex
	fTSpellCheckArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	fTSpellCheckReturns struct {
		result1 *redisa.FTSpellCheckCmd
	}
	fTSpellCheckReturnsOnCall map[int]struct {
		result1 *redisa.FTSpellCheckCmd
	}
	FTSpellCheckWithArgsStub        func(context.Context, string, string, *redisa.FTSpellCheckOptions) *redisa.FTSpellCheckCmd
	fTSpellCheckWithArgsMutex       sync.RWMutex
	fTSpellCheckWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.FTSpellCheckOptions
	}
	fTSpellCheckWithArgsReturns struct {
		result1 *redisa.FTSpellCheckCmd
	}
	fTSpellCheckWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.FTSpellCheckCmd
	}
	FTSynDumpStub        func(context.Context, string) *redisa.FTSynDumpCmd
	fTSynDumpMutex       sync.RWMutex
	fTSynDumpArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	fTSynDumpReturns struct {
		result1 *redisa.FTSynDumpCmd
	}
	fTSynDumpReturnsOnCall map[int]struct {
		result1 *redisa.FTSynDumpCmd
	}
	FTSynUpdateStub        func(context.Context, string, interface{}, []interface{}) *redisa.StatusCmd
	fTSynUpdateMutex       sync.RWMutex
	fTSynUpdateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 []interface{}
	}
	fTSynUpdateReturns struct {
		result1 *redisa.StatusCmd
	}
	fTSynUpdateReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FTSynUpdateWithArgsStub        func(context.Context, string, interface{}, *redisa.FTSynUpdateOptions, []interface{}) *redisa.StatusCmd
	fTSynUpdateWithArgsMutex       sync.RWMutex
	fTSynUpdateWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 *redisa.FTSynUpdateOptions
		arg5 []interface{}
	}
	fTSynUpdateWithArgsReturns struct {
		result1 *redisa.StatusCmd
	}
	fTSynUpdateWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FTTagValsStub        func(context.Context, string, string) *redisa.StringSliceCmd
	fTTagValsMutex       sync.RWMutex
	fTTagValsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	fTTagValsReturns struct {
		result1 *redisa.StringSliceCmd
	}
	fTTagValsReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	FT_ListStub        func(context.Context) *redisa.StringSliceCmd
	fT_ListMutex       sync.RWMutex
	fT_ListArgsForCall []struct {
		arg1 context.Context
	}
	fT_ListReturns struct {
		result1 *redisa.StringSliceCmd
	}
	fT_ListReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	FlushAllStub        func(context.Context) *redisa.StatusCmd
	flushAllMutex       sync.RWMutex
	flushAllArgsForCall []struct {
		arg1 context.Context
	}
	flushAllReturns struct {
		result1 *redisa.StatusCmd
	}
	flushAllReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FlushAllAsyncStub        func(context.Context) *redisa.StatusCmd
	flushAllAsyncMutex       sync.RWMutex
	flushAllAsyncArgsForCall []struct {
		arg1 context.Context
	}
	flushAllAsyncReturns struct {
		result1 *redisa.StatusCmd
	}
	flushAllAsyncReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FlushDBStub        func(context.Context) *redisa.StatusCmd
	flushDBMutex       sync.RWMutex
	flushDBArgsForCall []struct {
		arg1 context.Context
	}
	flushDBReturns struct {
		result1 *redisa.StatusCmd
	}
	flushDBReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FlushDBAsyncStub        func(context.Context) *redisa.StatusCmd
	flushDBAsyncMutex       sync.RWMutex
	flushDBAsyncArgsForCall []struct {
		arg1 context.Context
	}
	flushDBAsyncReturns struct {
		result1 *redisa.StatusCmd
	}
	flushDBAsyncReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	FunctionDeleteStub        func(context.Context, string) *redisa.StringCmd
	functionDeleteMutex       sync.RWMutex
	functionDeleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	functionDeleteReturns struct {
		result1 *redisa.StringCmd
	}
	functionDeleteReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	FunctionDumpStub        func(context.Context) *redisa.StringCmd
	functionDumpMutex       sync.RWMutex
	functionDumpArgsForCall []struct {
		arg1 context.Context
	}
	functionDumpReturns struct {
		result1 *redisa.StringCmd
	}
	functionDumpReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	FunctionFlushStub        func(context.Context) *redisa.StringCmd
	functionFlushMutex       sync.RWMutex
	functionFlushArgsForCall []struct {
		arg1 context.Context
	}
	functionFlushReturns struct {
		result1 *redisa.StringCmd
	}
	functionFlushReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	FunctionFlushAsyncStub        func(context.Context) *redisa.StringCmd
	functionFlushAsyncMutex       sync.RWMutex
	functionFlushAsyncArgsForCall []struct {
		arg1 context.Context
	}
	functionFlushAsyncReturns struct {
		result1 *redisa.StringCmd
	}
	functionFlushAsyncReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	FunctionKillStub        func(context.Context) *redisa.StringCmd
	functionKillMutex       sync.RWMutex
	functionKillArgsForCall []struct {
		arg1 context.Context
	}
	functionKillReturns struct {
		result1 *redisa.StringCmd
	}
	functionKillReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	FunctionListStub        func(context.Context, redisa.FunctionListQuery) *redisa.FunctionListCmd
	functionListMutex       sync.RWMutex
	functionListArgsForCall []struct {
		arg1 context.Context
		arg2 redisa.FunctionListQuery
	}
	functionListReturns struct {
		result1 *redisa.FunctionListCmd
	}
	functionListReturnsOnCall map[int]struct {
		result1 *redisa.FunctionListCmd
	}
	FunctionLoadStub        func(context.Context, string) *redisa.StringCmd
	functionLoadMutex       sync.RWMutex
	functionLoadArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	functionLoadReturns struct {
		result1 *redisa.StringCmd
	}
	functionLoadReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	FunctionLoadReplaceStub        func(context.Context, string) *redisa.StringCmd
	functionLoadReplaceMutex       sync.RWMutex
	functionLoadReplaceArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	functionLoadReplaceReturns struct {
		result1 *redisa.StringCmd
	}
	functionLoadReplaceReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	FunctionRestoreStub        func(context.Context, string) *redisa.StringCmd
	functionRestoreMutex       sync.RWMutex
	functionRestoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	functionRestoreReturns struct {
		result1 *redisa.StringCmd
	}
	functionRestoreReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	FunctionStatsStub        func(context.Context) *redisa.FunctionStatsCmd
	functionStatsMutex       sync.RWMutex
	functionStatsArgsForCall []struct {
		arg1 context.Context
	}
	functionStatsReturns struct {
		result1 *redisa.FunctionStatsCmd
	}
	functionStatsReturnsOnCall map[int]struct {
		result1 *redisa.FunctionStatsCmd
	}
	GeoAddStub        func(context.Context, string, ...*redisa.GeoLocation) *redisa.IntCmd
	geoAddMutex       sync.RWMutex
	geoAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []*redisa.GeoLocation
	}
	geoAddReturns struct {
		result1 *redisa.IntCmd
	}
	geoAddReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	GeoDistStub        func(context.Context, string, string, string, string) *redisa.FloatCmd
	geoDistMutex       sync.RWMutex
	geoDistArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}
	geoDistReturns struct {
		result1 *redisa.FloatCmd
	}
	geoDistReturnsOnCall map[int]struct {
		result1 *redisa.FloatCmd
	}
	GeoHashStub        func(context.Context, string, ...string) *redisa.StringSliceCmd
	geoHashMutex       sync.RWMutex
	geoHashArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	geoHashReturns struct {
		result1 *redisa.StringSliceCmd
	}
	geoHashReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	GeoPosStub        func(context.Context, string, ...string) *redisa.GeoPosCmd
	geoPosMutex       sync.RWMutex
	geoPosArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	geoPosReturns struct {
		result1 *redisa.GeoPosCmd
	}
	geoPosReturnsOnCall map[int]struct {
		result1 *redisa.GeoPosCmd
	}
	GeoRadiusStub        func(context.Context, string, float64, float64, *redisa.GeoRadiusQuery) *redisa.GeoLocationCmd
	geoRadiusMutex       sync.RWMutex
	geoRadiusArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 float64
		arg5 *redisa.GeoRadiusQuery
	}
	geoRadiusReturns struct {
		result1 *redisa.GeoLocationCmd
	}
	geoRadiusReturnsOnCall map[int]struct {
		result1 *redisa.GeoLocationCmd
	}
	GeoRadiusByMemberStub        func(context.Context, string, string, *redisa.GeoRadiusQuery) *redisa.GeoLocationCmd
	geoRadiusByMemberMutex       sync.RWMutex
	geoRadiusByMemberArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.GeoRadiusQuery
	}
	geoRadiusByMemberReturns struct {
		result1 *redisa.GeoLocationCmd
	}
	geoRadiusByMemberReturnsOnCall map[int]struct {
		result1 *redisa.GeoLocationCmd
	}
	GeoRadiusByMemberStoreStub        func(context.Context, string, string, *redisa.GeoRadiusQuery) *redisa.IntCmd
	geoRadiusByMemberStoreMutex       sync.RWMutex
	geoRadiusByMemberStoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.GeoRadiusQuery
	}
	geoRadiusByMemberStoreReturns struct {
		result1 *redisa.IntCmd
	}
	geoRadiusByMemberStoreReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	GeoRadiusStoreStub        func(context.Context, string, float64, float64, *redisa.GeoRadiusQuery) *redisa.IntCmd
	geoRadiusStoreMutex       sync.RWMutex
	geoRadiusStoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 float64
		arg5 *redisa.GeoRadiusQuery
	}
	geoRadiusStoreReturns struct {
		result1 *redisa.IntCmd
	}
	geoRadiusStoreReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	GeoSearchStub        func(context.Context, string, *redisa.GeoSearchQuery) *redisa.StringSliceCmd
	geoSearchMutex       sync.RWMutex
	geoSearchArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.GeoSearchQuery
	}
	geoSearchReturns struct {
		result1 *redisa.StringSliceCmd
	}
	geoSearchReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	GeoSearchLocationStub        func(context.Context, string, *redisa.GeoSearchLocationQuery) *redisa.GeoSearchLocationCmd
	geoSearchLocationMutex       sync.RWMutex
	geoSearchLocationArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.GeoSearchLocationQuery
	}
	geoSearchLocationReturns struct {
		result1 *redisa.GeoSearchLocationCmd
	}
	geoSearchLocationReturnsOnCall map[int]struct {
		result1 *redisa.GeoSearchLocationCmd
	}
	GeoSearchStoreStub        func(context.Context, string, string, *redisa.GeoSearchStoreQuery) *redisa.IntCmd
	geoSearchStoreMutex       sync.RWMutex
	geoSearchStoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.GeoSearchStoreQuery
	}
	geoSearchStoreReturns struct {
		result1 *redisa.IntCmd
	}
	geoSearchStoreReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	GetStub        func(context.Context, string) *redisa.StringCmd
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getReturns struct {
		result1 *redisa.StringCmd
	}
	getReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	GetBitStub        func(context.Context, string, int64) *redisa.IntCmd
	getBitMutex       sync.RWMutex
	getBitArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}
	getBitReturns struct {
		result1 *redisa.IntCmd
	}
	getBitReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	GetDelStub        func(context.Context, string) *redisa.StringCmd
	getDelMutex       sync.RWMutex
	getDelArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getDelReturns struct {
		result1 *redisa.StringCmd
	}
	getDelReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	GetExStub        func(context.Context, string, time.Duration) *redisa.StringCmd
	getExMutex       sync.RWMutex
	getExArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}
	getExReturns struct {
		result1 *redisa.StringCmd
	}
	getExReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	GetRangeStub        func(context.Context, string, int64, int64) *redisa.StringCmd
	getRangeMutex       sync.RWMutex
	getRangeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	getRangeReturns struct {
		result1 *redisa.StringCmd
	}
	getRangeReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	GetSetStub        func(context.Context, string, interface{}) *redisa.StringCmd
	getSetMutex       sync.RWMutex
	getSetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	getSetReturns struct {
		result1 *redisa.StringCmd
	}
	getSetReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	HDelStub        func(context.Context, string, ...string) *redisa.IntCmd
	hDelMutex       sync.RWMutex
	hDelArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	hDelReturns struct {
		result1 *redisa.IntCmd
	}
	hDelReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	HExistsStub        func(context.Context, string, string) *redisa.BoolCmd
	hExistsMutex       sync.RWMutex
	hExistsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	hExistsReturns struct {
		result1 *redisa.BoolCmd
	}
	hExistsReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	HExpireStub        func(context.Context, string, time.Duration, ...string) *redisa.IntSliceCmd
	hExpireMutex       sync.RWMutex
	hExpireArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
		arg4 []string
	}
	hExpireReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hExpireReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HExpireAtStub        func(context.Context, string, time.Time, ...string) *redisa.IntSliceCmd
	hExpireAtMutex       sync.RWMutex
	hExpireAtArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
		arg4 []string
	}
	hExpireAtReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hExpireAtReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HExpireAtWithArgsStub        func(context.Context, string, time.Time, redisa.HExpireArgs, ...string) *redisa.IntSliceCmd
	hExpireAtWithArgsMutex       sync.RWMutex
	hExpireAtWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
		arg4 redisa.HExpireArgs
		arg5 []string
	}
	hExpireAtWithArgsReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hExpireAtWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HExpireTimeStub        func(context.Context, string, ...string) *redisa.IntSliceCmd
	hExpireTimeMutex       sync.RWMutex
	hExpireTimeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	hExpireTimeReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hExpireTimeReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HExpireWithArgsStub        func(context.Context, string, time.Duration, redisa.HExpireArgs, ...string) *redisa.IntSliceCmd
	hExpireWithArgsMutex       sync.RWMutex
	hExpireWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
		arg4 redisa.HExpireArgs
		arg5 []string
	}
	hExpireWithArgsReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hExpireWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HGetStub        func(context.Context, string, string) *redisa.StringCmd
	hGetMutex       sync.RWMutex
	hGetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	hGetReturns struct {
		result1 *redisa.StringCmd
	}
	hGetReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	HGetAllStub        func(context.Context, string) *redisa.MapStringStringCmd
	hGetAllMutex       sync.RWMutex
	hGetAllArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	hGetAllReturns struct {
		result1 *redisa.MapStringStringCmd
	}
	hGetAllReturnsOnCall map[int]struct {
		result1 *redisa.MapStringStringCmd
	}
	HIncrByStub        func(context.Context, string, string, int64) *redisa.IntCmd
	hIncrByMutex       sync.RWMutex
	hIncrByArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
	}
	hIncrByReturns struct {
		result1 *redisa.IntCmd
	}
	hIncrByReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	HIncrByFloatStub        func(context.Context, string, string, float64) *redisa.FloatCmd
	hIncrByFloatMutex       sync.RWMutex
	hIncrByFloatArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 float64
	}
	hIncrByFloatReturns struct {
		result1 *redisa.FloatCmd
	}
	hIncrByFloatReturnsOnCall map[int]struct {
		result1 *redisa.FloatCmd
	}
	HKeysStub        func(context.Context, string) *redisa.StringSliceCmd
	hKeysMutex       sync.RWMutex
	hKeysArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	hKeysReturns struct {
		result1 *redisa.StringSliceCmd
	}
	hKeysReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	HLenStub        func(context.Context, string) *redisa.IntCmd
	hLenMutex       sync.RWMutex
	hLenArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	hLenReturns struct {
		result1 *redisa.IntCmd
	}
	hLenReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	HMGetStub        func(context.Context, string, ...string) *redisa.SliceCmd
	hMGetMutex       sync.RWMutex
	hMGetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	hMGetReturns struct {
		result1 *redisa.SliceCmd
	}
	hMGetReturnsOnCall map[int]struct {
		result1 *redisa.SliceCmd
	}
	HMSetStub        func(context.Context, string, ...interface{}) *redisa.BoolCmd
	hMSetMutex       sync.RWMutex
	hMSetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	hMSetReturns struct {
		result1 *redisa.BoolCmd
	}
	hMSetReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	HPExpireStub        func(context.Context, string, time.Duration, ...string) *redisa.IntSliceCmd
	hPExpireMutex       sync.RWMutex
	hPExpireArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
		arg4 []string
	}
	hPExpireReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hPExpireReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HPExpireAtStub        func(context.Context, string, time.Time, ...string) *redisa.IntSliceCmd
	hPExpireAtMutex       sync.RWMutex
	hPExpireAtArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
		arg4 []string
	}
	hPExpireAtReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hPExpireAtReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HPExpireAtWithArgsStub        func(context.Context, string, time.Time, redisa.HExpireArgs, ...string) *redisa.IntSliceCmd
	hPExpireAtWithArgsMutex       sync.RWMutex
	hPExpireAtWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
		arg4 redisa.HExpireArgs
		arg5 []string
	}
	hPExpireAtWithArgsReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hPExpireAtWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HPExpireTimeStub        func(context.Context, string, ...string) *redisa.IntSliceCmd
	hPExpireTimeMutex       sync.RWMutex
	hPExpireTimeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	hPExpireTimeReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hPExpireTimeReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HPExpireWithArgsStub        func(context.Context, string, time.Duration, redisa.HExpireArgs, ...string) *redisa.IntSliceCmd
	hPExpireWithArgsMutex       sync.RWMutex
	hPExpireWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
		arg4 redisa.HExpireArgs
		arg5 []string
	}
	hPExpireWithArgsReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hPExpireWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HPTTLStub        func(context.Context, string, ...string) *redisa.IntSliceCmd
	hPTTLMutex       sync.RWMutex
	hPTTLArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	hPTTLReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hPTTLReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HPersistStub        func(context.Context, string, ...string) *redisa.IntSliceCmd
	hPersistMutex       sync.RWMutex
	hPersistArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	hPersistReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hPersistReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HRandFieldStub        func(context.Context, string, int) *redisa.StringSliceCmd
	hRandFieldMutex       sync.RWMutex
	hRandFieldArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	hRandFieldReturns struct {
		result1 *redisa.StringSliceCmd
	}
	hRandFieldReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	HRandFieldWithValuesStub        func(context.Context, string, int) *redisa.KeyValueSliceCmd
	hRandFieldWithValuesMutex       sync.RWMutex
	hRandFieldWithValuesArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	hRandFieldWithValuesReturns struct {
		result1 *redisa.KeyValueSliceCmd
	}
	hRandFieldWithValuesReturnsOnCall map[int]struct {
		result1 *redisa.KeyValueSliceCmd
	}
	HScanStub        func(context.Context, string, uint64, string, int64) *redisa.ScanCmd
	hScanMutex       sync.RWMutex
	hScanArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 uint64
		arg4 string
		arg5 int64
	}
	hScanReturns struct {
		result1 *redisa.ScanCmd
	}
	hScanReturnsOnCall map[int]struct {
		result1 *redisa.ScanCmd
	}
	HScanNoValuesStub        func(context.Context, string, uint64, string, int64) *redisa.ScanCmd
	hScanNoValuesMutex       sync.RWMutex
	hScanNoValuesArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 uint64
		arg4 string
		arg5 int64
	}
	hScanNoValuesReturns struct {
		result1 *redisa.ScanCmd
	}
	hScanNoValuesReturnsOnCall map[int]struct {
		result1 *redisa.ScanCmd
	}
	HSetStub        func(context.Context, string, ...interface{}) *redisa.IntCmd
	hSetMutex       sync.RWMutex
	hSetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	hSetReturns struct {
		result1 *redisa.IntCmd
	}
	hSetReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	HSetNXStub        func(context.Context, string, string, interface{}) *redisa.BoolCmd
	hSetNXMutex       sync.RWMutex
	hSetNXArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 interface{}
	}
	hSetNXReturns struct {
		result1 *redisa.BoolCmd
	}
	hSetNXReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	HTTLStub        func(context.Context, string, ...string) *redisa.IntSliceCmd
	hTTLMutex       sync.RWMutex
	hTTLArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	hTTLReturns struct {
		result1 *redisa.IntSliceCmd
	}
	hTTLReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	HValsStub        func(context.Context, string) *redisa.StringSliceCmd
	hValsMutex       sync.RWMutex
	hValsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	hValsReturns struct {
		result1 *redisa.StringSliceCmd
	}
	hValsReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	IncrStub        func(context.Context, string) *redisa.IntCmd
	incrMutex       sync.RWMutex
	incrArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	incrReturns struct {
		result1 *redisa.IntCmd
	}
	incrReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	IncrByStub        func(context.Context, string, int64) *redisa.IntCmd
	incrByMutex       sync.RWMutex
	incrByArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}
	incrByReturns struct {
		result1 *redisa.IntCmd
	}
	incrByReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	IncrByFloatStub        func(context.Context, string, float64) *redisa.FloatCmd
	incrByFloatMutex       sync.RWMutex
	incrByFloatArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
	}
	incrByFloatReturns struct {
		result1 *redisa.FloatCmd
	}
	incrByFloatReturnsOnCall map[int]struct {
		result1 *redisa.FloatCmd
	}
	InfoStub        func(context.Context, ...string) *redisa.StringCmd
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	infoReturns struct {
		result1 *redisa.StringCmd
	}
	infoReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	JSONArrAppendStub        func(context.Context, string, string, ...interface{}) *redisa.IntSliceCmd
	jSONArrAppendMutex       sync.RWMutex
	jSONArrAppendArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 []interface{}
	}
	jSONArrAppendReturns struct {
		result1 *redisa.IntSliceCmd
	}
	jSONArrAppendReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	JSONArrIndexStub        func(context.Context, string, string, ...interface{}) *redisa.IntSliceCmd
	jSONArrIndexMutex       sync.RWMutex
	jSONArrIndexArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 []interface{}
	}
	jSONArrIndexReturns struct {
		result1 *redisa.IntSliceCmd
	}
	jSONArrIndexReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	JSONArrIndexWithArgsStub        func(context.Context, string, string, *redisa.JSONArrIndexArgs, ...interface{}) *redisa.IntSliceCmd
	jSONArrIndexWithArgsMutex       sync.RWMutex
	jSONArrIndexWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.JSONArrIndexArgs
		arg5 []interface{}
	}
	jSONArrIndexWithArgsReturns struct {
		result1 *redisa.IntSliceCmd
	}
	jSONArrIndexWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	JSONArrInsertStub        func(context.Context, string, string, int64, ...interface{}) *redisa.IntSliceCmd
	jSONArrInsertMutex       sync.RWMutex
	jSONArrInsertArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
		arg5 []interface{}
	}
	jSONArrInsertReturns struct {
		result1 *redisa.IntSliceCmd
	}
	jSONArrInsertReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	JSONArrLenStub        func(context.Context, string, string) *redisa.IntSliceCmd
	jSONArrLenMutex       sync.RWMutex
	jSONArrLenArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	jSONArrLenReturns struct {
		result1 *redisa.IntSliceCmd
	}
	jSONArrLenReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	JSONArrPopStub        func(context.Context, string, string, int) *redisa.StringSliceCmd
	jSONArrPopMutex       sync.RWMutex
	jSONArrPopArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}
	jSONArrPopReturns struct {
		result1 *redisa.StringSliceCmd
	}
	jSONArrPopReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	JSONArrTrimStub        func(context.Context, string, string) *redisa.IntSliceCmd
	jSONArrTrimMutex       sync.RWMutex
	jSONArrTrimArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	jSONArrTrimReturns struct {
		result1 *redisa.IntSliceCmd
	}
	jSONArrTrimReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	JSONArrTrimWithArgsStub        func(context.Context, string, string, *redisa.JSONArrTrimArgs) *redisa.IntSliceCmd
	jSONArrTrimWithArgsMutex       sync.RWMutex
	jSONArrTrimWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.JSONArrTrimArgs
	}
	jSONArrTrimWithArgsReturns struct {
		result1 *redisa.IntSliceCmd
	}
	jSONArrTrimWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	JSONClearStub        func(context.Context, string, string) *redisa.IntCmd
	jSONClearMutex       sync.RWMutex
	jSONClearArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	jSONClearReturns struct {
		result1 *redisa.IntCmd
	}
	jSONClearReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	JSONDebugMemoryStub        func(context.Context, string, string) *redisa.IntCmd
	jSONDebugMemoryMutex       sync.RWMutex
	jSONDebugMemoryArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	jSONDebugMemoryReturns struct {
		result1 *redisa.IntCmd
	}
	jSONDebugMemoryReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	JSONDelStub        func(context.Context, string, string) *redisa.IntCmd
	jSONDelMutex       sync.RWMutex
	jSONDelArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	jSONDelReturns struct {
		result1 *redisa.IntCmd
	}
	jSONDelReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	JSONForgetStub        func(context.Context, string, string) *redisa.IntCmd
	jSONForgetMutex       sync.RWMutex
	jSONForgetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	jSONForgetReturns struct {
		result1 *redisa.IntCmd
	}
	jSONForgetReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	JSONGetStub        func(context.Context, string, ...string) *redisa.JSONCmd
	jSONGetMutex       sync.RWMutex
	jSONGetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	jSONGetReturns struct {
		result1 *redisa.JSONCmd
	}
	jSONGetReturnsOnCall map[int]struct {
		result1 *redisa.JSONCmd
	}
	JSONGetWithArgsStub        func(context.Context, string, *redisa.JSONGetArgs, ...string) *redisa.JSONCmd
	jSONGetWithArgsMutex       sync.RWMutex
	jSONGetWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.JSONGetArgs
		arg4 []string
	}
	jSONGetWithArgsReturns struct {
		result1 *redisa.JSONCmd
	}
	jSONGetWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.JSONCmd
	}
	JSONMGetStub        func(context.Context, string, ...string) *redisa.JSONSliceCmd
	jSONMGetMutex       sync.RWMutex
	jSONMGetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	jSONMGetReturns struct {
		result1 *redisa.JSONSliceCmd
	}
	jSONMGetReturnsOnCall map[int]struct {
		result1 *redisa.JSONSliceCmd
	}
	JSONMSetStub        func(context.Context, ...interface{}) *redisa.StatusCmd
	jSONMSetMutex       sync.RWMutex
	jSONMSetArgsForCall []struct {
		arg1 context.Context
		arg2 []interface{}
	}
	jSONMSetReturns struct {
		result1 *redisa.StatusCmd
	}
	jSONMSetReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	JSONMSetArgsStub        func(context.Context, []redisa.JSONSetArgs) *redisa.StatusCmd
	jSONMSetArgsMutex       sync.RWMutex
	jSONMSetArgsArgsForCall []struct {
		arg1 context.Context
		arg2 []redisa.JSONSetArgs
	}
	jSONMSetArgsReturns struct {
		result1 *redisa.StatusCmd
	}
	jSONMSetArgsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	JSONMergeStub        func(context.Context, string, string, string) *redisa.StatusCmd
	jSONMergeMutex       sync.RWMutex
	jSONMergeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	jSONMergeReturns struct {
		result1 *redisa.StatusCmd
	}
	jSONMergeReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	JSONNumIncrByStub        func(context.Context, string, string, float64) *redisa.JSONCmd
	jSONNumIncrByMutex       sync.RWMutex
	jSONNumIncrByArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 float64
	}
	jSONNumIncrByReturns struct {
		result1 *redisa.JSONCmd
	}
	jSONNumIncrByReturnsOnCall map[int]struct {
		result1 *redisa.JSONCmd
	}
	JSONObjKeysStub        func(context.Context, string, string) *redisa.SliceCmd
	jSONObjKeysMutex       sync.RWMutex
	jSONObjKeysArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	jSONObjKeysReturns struct {
		result1 *redisa.SliceCmd
	}
	jSONObjKeysReturnsOnCall map[int]struct {
		result1 *redisa.SliceCmd
	}
	JSONObjLenStub        func(context.Context, string, string) *redisa.IntPointerSliceCmd
	jSONObjLenMutex       sync.RWMutex
	jSONObjLenArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	jSONObjLenReturns struct {
		result1 *redisa.IntPointerSliceCmd
	}
	jSONObjLenReturnsOnCall map[int]struct {
		result1 *redisa.IntPointerSliceCmd
	}
	JSONSetStub        func(context.Context, string, string, interface{}) *redisa.StatusCmd
	jSONSetMutex       sync.RWMutex
	jSONSetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 interface{}
	}
	jSONSetReturns struct {
		result1 *redisa.StatusCmd
	}
	jSONSetReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	JSONSetModeStub        func(context.Context, string, string, interface{}, string) *redisa.StatusCmd
	jSONSetModeMutex       sync.RWMutex
	jSONSetModeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 interface{}
		arg5 string
	}
	jSONSetModeReturns struct {
		result1 *redisa.StatusCmd
	}
	jSONSetModeReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	JSONStrAppendStub        func(context.Context, string, string, string) *redisa.IntPointerSliceCmd
	jSONStrAppendMutex       sync.RWMutex
	jSONStrAppendArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	jSONStrAppendReturns struct {
		result1 *redisa.IntPointerSliceCmd
	}
	jSONStrAppendReturnsOnCall map[int]struct {
		result1 *redisa.IntPointerSliceCmd
	}
	JSONStrLenStub        func(context.Context, string, string) *redisa.IntPointerSliceCmd
	jSONStrLenMutex       sync.RWMutex
	jSONStrLenArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	jSONStrLenReturns struct {
		result1 *redisa.IntPointerSliceCmd
	}
	jSONStrLenReturnsOnCall map[int]struct {
		result1 *redisa.IntPointerSliceCmd
	}
	JSONToggleStub        func(context.Context, string, string) *redisa.IntPointerSliceCmd
	jSONToggleMutex       sync.RWMutex
	jSONToggleArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	jSONToggleReturns struct {
		result1 *redisa.IntPointerSliceCmd
	}
	jSONToggleReturnsOnCall map[int]struct {
		result1 *redisa.IntPointerSliceCmd
	}
	JSONTypeStub        func(context.Context, string, string) *redisa.JSONSliceCmd
	jSONTypeMutex       sync.RWMutex
	jSONTypeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	jSONTypeReturns struct {
		result1 *redisa.JSONSliceCmd
	}
	jSONTypeReturnsOnCall map[int]struct {
		result1 *redisa.JSONSliceCmd
	}
	KeysStub        func(context.Context, string) *redisa.StringSliceCmd
	keysMutex       sync.RWMutex
	keysArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	keysReturns struct {
		result1 *redisa.StringSliceCmd
	}
	keysReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	LCSStub        func(context.Context, *redisa.LCSQuery) *redisa.LCSCmd
	lCSMutex       sync.RWMutex
	lCSArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.LCSQuery
	}
	lCSReturns struct {
		result1 *redisa.LCSCmd
	}
	lCSReturnsOnCall map[int]struct {
		result1 *redisa.LCSCmd
	}
	LIndexStub        func(context.Context, string, int64) *redisa.StringCmd
	lIndexMutex       sync.RWMutex
	lIndexArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}
	lIndexReturns struct {
		result1 *redisa.StringCmd
	}
	lIndexReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	LInsertStub        func(context.Context, string, string, interface{}, interface{}) *redisa.IntCmd
	lInsertMutex       sync.RWMutex
	lInsertArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 interface{}
		arg5 interface{}
	}
	lInsertReturns struct {
		result1 *redisa.IntCmd
	}
	lInsertReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	LInsertAfterStub        func(context.Context, string, interface{}, interface{}) *redisa.IntCmd
	lInsertAfterMutex       sync.RWMutex
	lInsertAfterArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 interface{}
	}
	lInsertAfterReturns struct {
		result1 *redisa.IntCmd
	}
	lInsertAfterReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	LInsertBeforeStub        func(context.Context, string, interface{}, interface{}) *redisa.IntCmd
	lInsertBeforeMutex       sync.RWMutex
	lInsertBeforeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 interface{}
	}
	lInsertBeforeReturns struct {
		result1 *redisa.IntCmd
	}
	lInsertBeforeReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	LLenStub        func(context.Context, string) *redisa.IntCmd
	lLenMutex       sync.RWMutex
	lLenArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	lLenReturns struct {
		result1 *redisa.IntCmd
	}
	lLenReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	LMPopStub        func(context.Context, string, int64, ...string) *redisa.KeyValuesCmd
	lMPopMutex       sync.RWMutex
	lMPopArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 []string
	}
	lMPopReturns struct {
		result1 *redisa.KeyValuesCmd
	}
	lMPopReturnsOnCall map[int]struct {
		result1 *redisa.KeyValuesCmd
	}
	LMoveStub        func(context.Context, string, string, string, string) *redisa.StringCmd
	lMoveMutex       sync.RWMutex
	lMoveArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}
	lMoveReturns struct {
		result1 *redisa.StringCmd
	}
	lMoveReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	LPopStub        func(context.Context, string) *redisa.StringCmd
	lPopMutex       sync.RWMutex
	lPopArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	lPopReturns struct {
		result1 *redisa.StringCmd
	}
	lPopReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	LPopCountStub        func(context.Context, string, int) *redisa.StringSliceCmd
	lPopCountMutex       sync.RWMutex
	lPopCountArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	lPopCountReturns struct {
		result1 *redisa.StringSliceCmd
	}
	lPopCountReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	LPosStub        func(context.Context, string, string, redisa.LPosArgs) *redisa.IntCmd
	lPosMutex       sync.RWMutex
	lPosArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 redisa.LPosArgs
	}
	lPosReturns struct {
		result1 *redisa.IntCmd
	}
	lPosReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	LPosCountStub        func(context.Context, string, string, int64, redisa.LPosArgs) *redisa.IntSliceCmd
	lPosCountMutex       sync.RWMutex
	lPosCountArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
		arg5 redisa.LPosArgs
	}
	lPosCountReturns struct {
		result1 *redisa.IntSliceCmd
	}
	lPosCountReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	LPushStub        func(context.Context, string, ...interface{}) *redisa.IntCmd
	lPushMutex       sync.RWMutex
	lPushArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	lPushReturns struct {
		result1 *redisa.IntCmd
	}
	lPushReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	LPushXStub        func(context.Context, string, ...interface{}) *redisa.IntCmd
	lPushXMutex       sync.RWMutex
	lPushXArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	lPushXReturns struct {
		result1 *redisa.IntCmd
	}
	lPushXReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	LRangeStub        func(context.Context, string, int64, int64) *redisa.StringSliceCmd
	lRangeMutex       sync.RWMutex
	lRangeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	lRangeReturns struct {
		result1 *redisa.StringSliceCmd
	}
	lRangeReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	LRemStub        func(context.Context, string, int64, interface{}) *redisa.IntCmd
	lRemMutex       sync.RWMutex
	lRemArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 interface{}
	}
	lRemReturns struct {
		result1 *redisa.IntCmd
	}
	lRemReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	LSetStub        func(context.Context, string, int64, interface{}) *redisa.StatusCmd
	lSetMutex       sync.RWMutex
	lSetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 interface{}
	}
	lSetReturns struct {
		result1 *redisa.StatusCmd
	}
	lSetReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	LTrimStub        func(context.Context, string, int64, int64) *redisa.StatusCmd
	lTrimMutex       sync.RWMutex
	lTrimArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	lTrimReturns struct {
		result1 *redisa.StatusCmd
	}
	lTrimReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	LastSaveStub        func(context.Context) *redisa.IntCmd
	lastSaveMutex       sync.RWMutex
	lastSaveArgsForCall []struct {
		arg1 context.Context
	}
	lastSaveReturns struct {
		result1 *redisa.IntCmd
	}
	lastSaveReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	MGetStub        func(context.Context, ...string) *redisa.SliceCmd
	mGetMutex       sync.RWMutex
	mGetArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	mGetReturns struct {
		result1 *redisa.SliceCmd
	}
	mGetReturnsOnCall map[int]struct {
		result1 *redisa.SliceCmd
	}
	MSetStub        func(context.Context, ...interface{}) *redisa.StatusCmd
	mSetMutex       sync.RWMutex
	mSetArgsForCall []struct {
		arg1 context.Context
		arg2 []interface{}
	}
	mSetReturns struct {
		result1 *redisa.StatusCmd
	}
	mSetReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	MSetNXStub        func(context.Context, ...interface{}) *redisa.BoolCmd
	mSetNXMutex       sync.RWMutex
	mSetNXArgsForCall []struct {
		arg1 context.Context
		arg2 []interface{}
	}
	mSetNXReturns struct {
		result1 *redisa.BoolCmd
	}
	mSetNXReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	MemoryUsageStub        func(context.Context, string, ...int) *redisa.IntCmd
	memoryUsageMutex       sync.RWMutex
	memoryUsageArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []int
	}
	memoryUsageReturns struct {
		result1 *redisa.IntCmd
	}
	memoryUsageReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	MigrateStub        func(context.Context, string, string, string, int, time.Duration) *redisa.StatusCmd
	migrateMutex       sync.RWMutex
	migrateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 int
		arg6 time.Duration
	}
	migrateReturns struct {
		result1 *redisa.StatusCmd
	}
	migrateReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ModuleLoadexStub        func(context.Context, *redisa.ModuleLoadexConfig) *redisa.StringCmd
	moduleLoadexMutex       sync.RWMutex
	moduleLoadexArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.ModuleLoadexConfig
	}
	moduleLoadexReturns struct {
		result1 *redisa.StringCmd
	}
	moduleLoadexReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	MoveStub        func(context.Context, string, int) *redisa.BoolCmd
	moveMutex       sync.RWMutex
	moveArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	moveReturns struct {
		result1 *redisa.BoolCmd
	}
	moveReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	ObjectEncodingStub        func(context.Context, string) *redisa.StringCmd
	objectEncodingMutex       sync.RWMutex
	objectEncodingArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	objectEncodingReturns struct {
		result1 *redisa.StringCmd
	}
	objectEncodingReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	ObjectFreqStub        func(context.Context, string) *redisa.IntCmd
	objectFreqMutex       sync.RWMutex
	objectFreqArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	objectFreqReturns struct {
		result1 *redisa.IntCmd
	}
	objectFreqReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ObjectIdleTimeStub        func(context.Context, string) *redisa.DurationCmd
	objectIdleTimeMutex       sync.RWMutex
	objectIdleTimeArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	objectIdleTimeReturns struct {
		result1 *redisa.DurationCmd
	}
	objectIdleTimeReturnsOnCall map[int]struct {
		result1 *redisa.DurationCmd
	}
	ObjectRefCountStub        func(context.Context, string) *redisa.IntCmd
	objectRefCountMutex       sync.RWMutex
	objectRefCountArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	objectRefCountReturns struct {
		result1 *redisa.IntCmd
	}
	objectRefCountReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	PExpireStub        func(context.Context, string, time.Duration) *redisa.BoolCmd
	pExpireMutex       sync.RWMutex
	pExpireArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}
	pExpireReturns struct {
		result1 *redisa.BoolCmd
	}
	pExpireReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	PExpireAtStub        func(context.Context, string, time.Time) *redisa.BoolCmd
	pExpireAtMutex       sync.RWMutex
	pExpireAtArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
	}
	pExpireAtReturns struct {
		result1 *redisa.BoolCmd
	}
	pExpireAtReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	PExpireTimeStub        func(context.Context, string) *redisa.DurationCmd
	pExpireTimeMutex       sync.RWMutex
	pExpireTimeArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	pExpireTimeReturns struct {
		result1 *redisa.DurationCmd
	}
	pExpireTimeReturnsOnCall map[int]struct {
		result1 *redisa.DurationCmd
	}
	PFAddStub        func(context.Context, string, ...interface{}) *redisa.IntCmd
	pFAddMutex       sync.RWMutex
	pFAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	pFAddReturns struct {
		result1 *redisa.IntCmd
	}
	pFAddReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	PFCountStub        func(context.Context, ...string) *redisa.IntCmd
	pFCountMutex       sync.RWMutex
	pFCountArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	pFCountReturns struct {
		result1 *redisa.IntCmd
	}
	pFCountReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	PFMergeStub        func(context.Context, string, ...string) *redisa.StatusCmd
	pFMergeMutex       sync.RWMutex
	pFMergeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	pFMergeReturns struct {
		result1 *redisa.StatusCmd
	}
	pFMergeReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	PTTLStub        func(context.Context, string) *redisa.DurationCmd
	pTTLMutex       sync.RWMutex
	pTTLArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	pTTLReturns struct {
		result1 *redisa.DurationCmd
	}
	pTTLReturnsOnCall map[int]struct {
		result1 *redisa.DurationCmd
	}
	PersistStub        func(context.Context, string) *redisa.BoolCmd
	persistMutex       sync.RWMutex
	persistArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	persistReturns struct {
		result1 *redisa.BoolCmd
	}
	persistReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	PingStub        func(context.Context) *redisa.StatusCmd
	pingMutex       sync.RWMutex
	pingArgsForCall []struct {
		arg1 context.Context
	}
	pingReturns struct {
		result1 *redisa.StatusCmd
	}
	pingReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	PipelineStub        func() redisa.Pipeliner
	pipelineMutex       sync.RWMutex
	pipelineArgsForCall []struct {
	}
	pipelineReturns struct {
		result1 redisa.Pipeliner
	}
	pipelineReturnsOnCall map[int]struct {
		result1 redisa.Pipeliner
	}
	PipelinedStub        func(context.Context, func(redisa.Pipeliner) error) ([]redisa.Cmder, error)
	pipelinedMutex       sync.RWMutex
	pipelinedArgsForCall []struct {
		arg1 context.Context
		arg2 func(redisa.Pipeliner) error
	}
	pipelinedReturns struct {
		result1 []redisa.Cmder
		result2 error
	}
	pipelinedReturnsOnCall map[int]struct {
		result1 []redisa.Cmder
		result2 error
	}
	PubSubChannelsStub        func(context.Context, string) *redisa.StringSliceCmd
	pubSubChannelsMutex       sync.RWMutex
	pubSubChannelsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	pubSubChannelsReturns struct {
		result1 *redisa.StringSliceCmd
	}
	pubSubChannelsReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	PubSubNumPatStub        func(context.Context) *redisa.IntCmd
	pubSubNumPatMutex       sync.RWMutex
	pubSubNumPatArgsForCall []struct {
		arg1 context.Context
	}
	pubSubNumPatReturns struct {
		result1 *redisa.IntCmd
	}
	pubSubNumPatReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	PubSubNumSubStub        func(context.Context, ...string) *redisa.MapStringIntCmd
	pubSubNumSubMutex       sync.RWMutex
	pubSubNumSubArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	pubSubNumSubReturns struct {
		result1 *redisa.MapStringIntCmd
	}
	pubSubNumSubReturnsOnCall map[int]struct {
		result1 *redisa.MapStringIntCmd
	}
	PubSubShardChannelsStub        func(context.Context, string) *redisa.StringSliceCmd
	pubSubShardChannelsMutex       sync.RWMutex
	pubSubShardChannelsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	pubSubShardChannelsReturns struct {
		result1 *redisa.StringSliceCmd
	}
	pubSubShardChannelsReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	PubSubShardNumSubStub        func(context.Context, ...string) *redisa.MapStringIntCmd
	pubSubShardNumSubMutex       sync.RWMutex
	pubSubShardNumSubArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	pubSubShardNumSubReturns struct {
		result1 *redisa.MapStringIntCmd
	}
	pubSubShardNumSubReturnsOnCall map[int]struct {
		result1 *redisa.MapStringIntCmd
	}
	PublishStub        func(context.Context, string, interface{}) *redisa.IntCmd
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	publishReturns struct {
		result1 *redisa.IntCmd
	}
	publishReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	QuitStub        func(context.Context) *redisa.StatusCmd
	quitMutex       sync.RWMutex
	quitArgsForCall []struct {
		arg1 context.Context
	}
	quitReturns struct {
		result1 *redisa.StatusCmd
	}
	quitReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	RPopStub        func(context.Context, string) *redisa.StringCmd
	rPopMutex       sync.RWMutex
	rPopArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	rPopReturns struct {
		result1 *redisa.StringCmd
	}
	rPopReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	RPopCountStub        func(context.Context, string, int) *redisa.StringSliceCmd
	rPopCountMutex       sync.RWMutex
	rPopCountArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	rPopCountReturns struct {
		result1 *redisa.StringSliceCmd
	}
	rPopCountReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	RPopLPushStub        func(context.Context, string, string) *redisa.StringCmd
	rPopLPushMutex       sync.RWMutex
	rPopLPushArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	rPopLPushReturns struct {
		result1 *redisa.StringCmd
	}
	rPopLPushReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	RPushStub        func(context.Context, string, ...interface{}) *redisa.IntCmd
	rPushMutex       sync.RWMutex
	rPushArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	rPushReturns struct {
		result1 *redisa.IntCmd
	}
	rPushReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	RPushXStub        func(context.Context, string, ...interface{}) *redisa.IntCmd
	rPushXMutex       sync.RWMutex
	rPushXArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	rPushXReturns struct {
		result1 *redisa.IntCmd
	}
	rPushXReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	RandomKeyStub        func(context.Context) *redisa.StringCmd
	randomKeyMutex       sync.RWMutex
	randomKeyArgsForCall []struct {
		arg1 context.Context
	}
	randomKeyReturns struct {
		result1 *redisa.StringCmd
	}
	randomKeyReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	ReadOnlyStub        func(context.Context) *redisa.StatusCmd
	readOnlyMutex       sync.RWMutex
	readOnlyArgsForCall []struct {
		arg1 context.Context
	}
	readOnlyReturns struct {
		result1 *redisa.StatusCmd
	}
	readOnlyReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ReadWriteStub        func(context.Context) *redisa.StatusCmd
	readWriteMutex       sync.RWMutex
	readWriteArgsForCall []struct {
		arg1 context.Context
	}
	readWriteReturns struct {
		result1 *redisa.StatusCmd
	}
	readWriteReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	RenameStub        func(context.Context, string, string) *redisa.StatusCmd
	renameMutex       sync.RWMutex
	renameArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	renameReturns struct {
		result1 *redisa.StatusCmd
	}
	renameReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	RenameNXStub        func(context.Context, string, string) *redisa.BoolCmd
	renameNXMutex       sync.RWMutex
	renameNXArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	renameNXReturns struct {
		result1 *redisa.BoolCmd
	}
	renameNXReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	RestoreStub        func(context.Context, string, time.Duration, string) *redisa.StatusCmd
	restoreMutex       sync.RWMutex
	restoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
		arg4 string
	}
	restoreReturns struct {
		result1 *redisa.StatusCmd
	}
	restoreReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	RestoreReplaceStub        func(context.Context, string, time.Duration, string) *redisa.StatusCmd
	restoreReplaceMutex       sync.RWMutex
	restoreReplaceArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
		arg4 string
	}
	restoreReplaceReturns struct {
		result1 *redisa.StatusCmd
	}
	restoreReplaceReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	SAddStub        func(context.Context, string, ...interface{}) *redisa.IntCmd
	sAddMutex       sync.RWMutex
	sAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	sAddReturns struct {
		result1 *redisa.IntCmd
	}
	sAddReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	SCardStub        func(context.Context, string) *redisa.IntCmd
	sCardMutex       sync.RWMutex
	sCardArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	sCardReturns struct {
		result1 *redisa.IntCmd
	}
	sCardReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	SDiffStub        func(context.Context, ...string) *redisa.StringSliceCmd
	sDiffMutex       sync.RWMutex
	sDiffArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	sDiffReturns struct {
		result1 *redisa.StringSliceCmd
	}
	sDiffReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	SDiffStoreStub        func(context.Context, string, ...string) *redisa.IntCmd
	sDiffStoreMutex       sync.RWMutex
	sDiffStoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	sDiffStoreReturns struct {
		result1 *redisa.IntCmd
	}
	sDiffStoreReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	SInterStub        func(context.Context, ...string) *redisa.StringSliceCmd
	sInterMutex       sync.RWMutex
	sInterArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	sInterReturns struct {
		result1 *redisa.StringSliceCmd
	}
	sInterReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	SInterCardStub        func(context.Context, int64, ...string) *redisa.IntCmd
	sInterCardMutex       sync.RWMutex
	sInterCardArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 []string
	}
	sInterCardReturns struct {
		result1 *redisa.IntCmd
	}
	sInterCardReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	SInterStoreStub        func(context.Context, string, ...string) *redisa.IntCmd
	sInterStoreMutex       sync.RWMutex
	sInterStoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	sInterStoreReturns struct {
		result1 *redisa.IntCmd
	}
	sInterStoreReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	SIsMemberStub        func(context.Context, string, interface{}) *redisa.BoolCmd
	sIsMemberMutex       sync.RWMutex
	sIsMemberArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	sIsMemberReturns struct {
		result1 *redisa.BoolCmd
	}
	sIsMemberReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	SMIsMemberStub        func(context.Context, string, ...interface{}) *redisa.BoolSliceCmd
	sMIsMemberMutex       sync.RWMutex
	sMIsMemberArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	sMIsMemberReturns struct {
		result1 *redisa.BoolSliceCmd
	}
	sMIsMemberReturnsOnCall map[int]struct {
		result1 *redisa.BoolSliceCmd
	}
	SMembersStub        func(context.Context, string) *redisa.StringSliceCmd
	sMembersMutex       sync.RWMutex
	sMembersArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	sMembersReturns struct {
		result1 *redisa.StringSliceCmd
	}
	sMembersReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	SMembersMapStub        func(context.Context, string) *redisa.StringStructMapCmd
	sMembersMapMutex       sync.RWMutex
	sMembersMapArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	sMembersMapReturns struct {
		result1 *redisa.StringStructMapCmd
	}
	sMembersMapReturnsOnCall map[int]struct {
		result1 *redisa.StringStructMapCmd
	}
	SMoveStub        func(context.Context, string, string, interface{}) *redisa.BoolCmd
	sMoveMutex       sync.RWMutex
	sMoveArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 interface{}
	}
	sMoveReturns struct {
		result1 *redisa.BoolCmd
	}
	sMoveReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	SPopStub        func(context.Context, string) *redisa.StringCmd
	sPopMutex       sync.RWMutex
	sPopArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	sPopReturns struct {
		result1 *redisa.StringCmd
	}
	sPopReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	SPopNStub        func(context.Context, string, int64) *redisa.StringSliceCmd
	sPopNMutex       sync.RWMutex
	sPopNArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}
	sPopNReturns struct {
		result1 *redisa.StringSliceCmd
	}
	sPopNReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	SPublishStub        func(context.Context, string, interface{}) *redisa.IntCmd
	sPublishMutex       sync.RWMutex
	sPublishArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	sPublishReturns struct {
		result1 *redisa.IntCmd
	}
	sPublishReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	SRandMemberStub        func(context.Context, string) *redisa.StringCmd
	sRandMemberMutex       sync.RWMutex
	sRandMemberArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	sRandMemberReturns struct {
		result1 *redisa.StringCmd
	}
	sRandMemberReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	SRandMemberNStub        func(context.Context, string, int64) *redisa.StringSliceCmd
	sRandMemberNMutex       sync.RWMutex
	sRandMemberNArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}
	sRandMemberNReturns struct {
		result1 *redisa.StringSliceCmd
	}
	sRandMemberNReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	SRemStub        func(context.Context, string, ...interface{}) *redisa.IntCmd
	sRemMutex       sync.RWMutex
	sRemArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	sRemReturns struct {
		result1 *redisa.IntCmd
	}
	sRemReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	SScanStub        func(context.Context, string, uint64, string, int64) *redisa.ScanCmd
	sScanMutex       sync.RWMutex
	sScanArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 uint64
		arg4 string
		arg5 int64
	}
	sScanReturns struct {
		result1 *redisa.ScanCmd
	}
	sScanReturnsOnCall map[int]struct {
		result1 *redisa.ScanCmd
	}
	SUnionStub        func(context.Context, ...string) *redisa.StringSliceCmd
	sUnionMutex       sync.RWMutex
	sUnionArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	sUnionReturns struct {
		result1 *redisa.StringSliceCmd
	}
	sUnionReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	SUnionStoreStub        func(context.Context, string, ...string) *redisa.IntCmd
	sUnionStoreMutex       sync.RWMutex
	sUnionStoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	sUnionStoreReturns struct {
		result1 *redisa.IntCmd
	}
	sUnionStoreReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	SaveStub        func(context.Context) *redisa.StatusCmd
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		arg1 context.Context
	}
	saveReturns struct {
		result1 *redisa.StatusCmd
	}
	saveReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ScanStub        func(context.Context, uint64, string, int64) *redisa.ScanCmd
	scanMutex       sync.RWMutex
	scanArgsForCall []struct {
		arg1 context.Context
		arg2 uint64
		arg3 string
		arg4 int64
	}
	scanReturns struct {
		result1 *redisa.ScanCmd
	}
	scanReturnsOnCall map[int]struct {
		result1 *redisa.ScanCmd
	}
	ScanTypeStub        func(context.Context, uint64, string, int64, string) *redisa.ScanCmd
	scanTypeMutex       sync.RWMutex
	scanTypeArgsForCall []struct {
		arg1 context.Context
		arg2 uint64
		arg3 string
		arg4 int64
		arg5 string
	}
	scanTypeReturns struct {
		result1 *redisa.ScanCmd
	}
	scanTypeReturnsOnCall map[int]struct {
		result1 *redisa.ScanCmd
	}
	ScriptExistsStub        func(context.Context, ...string) *redisa.BoolSliceCmd
	scriptExistsMutex       sync.RWMutex
	scriptExistsArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	scriptExistsReturns struct {
		result1 *redisa.BoolSliceCmd
	}
	scriptExistsReturnsOnCall map[int]struct {
		result1 *redisa.BoolSliceCmd
	}
	ScriptFlushStub        func(context.Context) *redisa.StatusCmd
	scriptFlushMutex       sync.RWMutex
	scriptFlushArgsForCall []struct {
		arg1 context.Context
	}
	scriptFlushReturns struct {
		result1 *redisa.StatusCmd
	}
	scriptFlushReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ScriptKillStub        func(context.Context) *redisa.StatusCmd
	scriptKillMutex       sync.RWMutex
	scriptKillArgsForCall []struct {
		arg1 context.Context
	}
	scriptKillReturns struct {
		result1 *redisa.StatusCmd
	}
	scriptKillReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ScriptLoadStub        func(context.Context, string) *redisa.StringCmd
	scriptLoadMutex       sync.RWMutex
	scriptLoadArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	scriptLoadReturns struct {
		result1 *redisa.StringCmd
	}
	scriptLoadReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	SetStub        func(context.Context, string, interface{}, time.Duration) *redisa.StatusCmd
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 time.Duration
	}
	setReturns struct {
		result1 *redisa.StatusCmd
	}
	setReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	SetArgsStub        func(context.Context, string, interface{}, redisa.SetArgs) *redisa.StatusCmd
	setArgsMutex       sync.RWMutex
	setArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 redisa.SetArgs
	}
	setArgsReturns struct {
		result1 *redisa.StatusCmd
	}
	setArgsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	SetBitStub        func(context.Context, string, int64, int) *redisa.IntCmd
	setBitMutex       sync.RWMutex
	setBitArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int
	}
	setBitReturns struct {
		result1 *redisa.IntCmd
	}
	setBitReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	SetExStub        func(context.Context, string, interface{}, time.Duration) *redisa.StatusCmd
	setExMutex       sync.RWMutex
	setExArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 time.Duration
	}
	setExReturns struct {
		result1 *redisa.StatusCmd
	}
	setExReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	SetNXStub        func(context.Context, string, interface{}, time.Duration) *redisa.BoolCmd
	setNXMutex       sync.RWMutex
	setNXArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 time.Duration
	}
	setNXReturns struct {
		result1 *redisa.BoolCmd
	}
	setNXReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	SetRangeStub        func(context.Context, string, int64, string) *redisa.IntCmd
	setRangeMutex       sync.RWMutex
	setRangeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 string
	}
	setRangeReturns struct {
		result1 *redisa.IntCmd
	}
	setRangeReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	SetXXStub        func(context.Context, string, interface{}, time.Duration) *redisa.BoolCmd
	setXXMutex       sync.RWMutex
	setXXArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 time.Duration
	}
	setXXReturns struct {
		result1 *redisa.BoolCmd
	}
	setXXReturnsOnCall map[int]struct {
		result1 *redisa.BoolCmd
	}
	ShutdownStub        func(context.Context) *redisa.StatusCmd
	shutdownMutex       sync.RWMutex
	shutdownArgsForCall []struct {
		arg1 context.Context
	}
	shutdownReturns struct {
		result1 *redisa.StatusCmd
	}
	shutdownReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ShutdownNoSaveStub        func(context.Context) *redisa.StatusCmd
	shutdownNoSaveMutex       sync.RWMutex
	shutdownNoSaveArgsForCall []struct {
		arg1 context.Context
	}
	shutdownNoSaveReturns struct {
		result1 *redisa.StatusCmd
	}
	shutdownNoSaveReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	ShutdownSaveStub        func(context.Context) *redisa.StatusCmd
	shutdownSaveMutex       sync.RWMutex
	shutdownSaveArgsForCall []struct {
		arg1 context.Context
	}
	shutdownSaveReturns struct {
		result1 *redisa.StatusCmd
	}
	shutdownSaveReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	SlaveOfStub        func(context.Context, string, string) *redisa.StatusCmd
	slaveOfMutex       sync.RWMutex
	slaveOfArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	slaveOfReturns struct {
		result1 *redisa.StatusCmd
	}
	slaveOfReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	SlowLogGetStub        func(context.Context, int64) *redisa.SlowLogCmd
	slowLogGetMutex       sync.RWMutex
	slowLogGetArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	slowLogGetReturns struct {
		result1 *redisa.SlowLogCmd
	}
	slowLogGetReturnsOnCall map[int]struct {
		result1 *redisa.SlowLogCmd
	}
	SortStub        func(context.Context, string, *redisa.Sort) *redisa.StringSliceCmd
	sortMutex       sync.RWMutex
	sortArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.Sort
	}
	sortReturns struct {
		result1 *redisa.StringSliceCmd
	}
	sortReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	SortInterfacesStub        func(context.Context, string, *redisa.Sort) *redisa.SliceCmd
	sortInterfacesMutex       sync.RWMutex
	sortInterfacesArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.Sort
	}
	sortInterfacesReturns struct {
		result1 *redisa.SliceCmd
	}
	sortInterfacesReturnsOnCall map[int]struct {
		result1 *redisa.SliceCmd
	}
	SortROStub        func(context.Context, string, *redisa.Sort) *redisa.StringSliceCmd
	sortROMutex       sync.RWMutex
	sortROArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.Sort
	}
	sortROReturns struct {
		result1 *redisa.StringSliceCmd
	}
	sortROReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	SortStoreStub        func(context.Context, string, string, *redisa.Sort) *redisa.IntCmd
	sortStoreMutex       sync.RWMutex
	sortStoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.Sort
	}
	sortStoreReturns struct {
		result1 *redisa.IntCmd
	}
	sortStoreReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	StrLenStub        func(context.Context, string) *redisa.IntCmd
	strLenMutex       sync.RWMutex
	strLenArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	strLenReturns struct {
		result1 *redisa.IntCmd
	}
	strLenReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	TDigestAddStub        func(context.Context, string, ...float64) *redisa.StatusCmd
	tDigestAddMutex       sync.RWMutex
	tDigestAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []float64
	}
	tDigestAddReturns struct {
		result1 *redisa.StatusCmd
	}
	tDigestAddReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TDigestByRankStub        func(context.Context, string, ...uint64) *redisa.FloatSliceCmd
	tDigestByRankMutex       sync.RWMutex
	tDigestByRankArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []uint64
	}
	tDigestByRankReturns struct {
		result1 *redisa.FloatSliceCmd
	}
	tDigestByRankReturnsOnCall map[int]struct {
		result1 *redisa.FloatSliceCmd
	}
	TDigestByRevRankStub        func(context.Context, string, ...uint64) *redisa.FloatSliceCmd
	tDigestByRevRankMutex       sync.RWMutex
	tDigestByRevRankArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []uint64
	}
	tDigestByRevRankReturns struct {
		result1 *redisa.FloatSliceCmd
	}
	tDigestByRevRankReturnsOnCall map[int]struct {
		result1 *redisa.FloatSliceCmd
	}
	TDigestCDFStub        func(context.Context, string, ...float64) *redisa.FloatSliceCmd
	tDigestCDFMutex       sync.RWMutex
	tDigestCDFArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []float64
	}
	tDigestCDFReturns struct {
		result1 *redisa.FloatSliceCmd
	}
	tDigestCDFReturnsOnCall map[int]struct {
		result1 *redisa.FloatSliceCmd
	}
	TDigestCreateStub        func(context.Context, string) *redisa.StatusCmd
	tDigestCreateMutex       sync.RWMutex
	tDigestCreateArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	tDigestCreateReturns struct {
		result1 *redisa.StatusCmd
	}
	tDigestCreateReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TDigestCreateWithCompressionStub        func(context.Context, string, int64) *redisa.StatusCmd
	tDigestCreateWithCompressionMutex       sync.RWMutex
	tDigestCreateWithCompressionArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}
	tDigestCreateWithCompressionReturns struct {
		result1 *redisa.StatusCmd
	}
	tDigestCreateWithCompressionReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TDigestInfoStub        func(context.Context, string) *redisa.TDigestInfoCmd
	tDigestInfoMutex       sync.RWMutex
	tDigestInfoArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	tDigestInfoReturns struct {
		result1 *redisa.TDigestInfoCmd
	}
	tDigestInfoReturnsOnCall map[int]struct {
		result1 *redisa.TDigestInfoCmd
	}
	TDigestMaxStub        func(context.Context, string) *redisa.FloatCmd
	tDigestMaxMutex       sync.RWMutex
	tDigestMaxArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	tDigestMaxReturns struct {
		result1 *redisa.FloatCmd
	}
	tDigestMaxReturnsOnCall map[int]struct {
		result1 *redisa.FloatCmd
	}
	TDigestMergeStub        func(context.Context, string, *redisa.TDigestMergeOptions, ...string) *redisa.StatusCmd
	tDigestMergeMutex       sync.RWMutex
	tDigestMergeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.TDigestMergeOptions
		arg4 []string
	}
	tDigestMergeReturns struct {
		result1 *redisa.StatusCmd
	}
	tDigestMergeReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TDigestMinStub        func(context.Context, string) *redisa.FloatCmd
	tDigestMinMutex       sync.RWMutex
	tDigestMinArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	tDigestMinReturns struct {
		result1 *redisa.FloatCmd
	}
	tDigestMinReturnsOnCall map[int]struct {
		result1 *redisa.FloatCmd
	}
	TDigestQuantileStub        func(context.Context, string, ...float64) *redisa.FloatSliceCmd
	tDigestQuantileMutex       sync.RWMutex
	tDigestQuantileArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []float64
	}
	tDigestQuantileReturns struct {
		result1 *redisa.FloatSliceCmd
	}
	tDigestQuantileReturnsOnCall map[int]struct {
		result1 *redisa.FloatSliceCmd
	}
	TDigestRankStub        func(context.Context, string, ...float64) *redisa.IntSliceCmd
	tDigestRankMutex       sync.RWMutex
	tDigestRankArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []float64
	}
	tDigestRankReturns struct {
		result1 *redisa.IntSliceCmd
	}
	tDigestRankReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	TDigestResetStub        func(context.Context, string) *redisa.StatusCmd
	tDigestResetMutex       sync.RWMutex
	tDigestResetArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	tDigestResetReturns struct {
		result1 *redisa.StatusCmd
	}
	tDigestResetReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TDigestRevRankStub        func(context.Context, string, ...float64) *redisa.IntSliceCmd
	tDigestRevRankMutex       sync.RWMutex
	tDigestRevRankArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []float64
	}
	tDigestRevRankReturns struct {
		result1 *redisa.IntSliceCmd
	}
	tDigestRevRankReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	TDigestTrimmedMeanStub        func(context.Context, string, float64, float64) *redisa.FloatCmd
	tDigestTrimmedMeanMutex       sync.RWMutex
	tDigestTrimmedMeanArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 float64
	}
	tDigestTrimmedMeanReturns struct {
		result1 *redisa.FloatCmd
	}
	tDigestTrimmedMeanReturnsOnCall map[int]struct {
		result1 *redisa.FloatCmd
	}
	TFCallStub        func(context.Context, string, string, int) *redisa.Cmd
	tFCallMutex       sync.RWMutex
	tFCallArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}
	tFCallReturns struct {
		result1 *redisa.Cmd
	}
	tFCallReturnsOnCall map[int]struct {
		result1 *redisa.Cmd
	}
	TFCallASYNCStub        func(context.Context, string, string, int) *redisa.Cmd
	tFCallASYNCMutex       sync.RWMutex
	tFCallASYNCArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}
	tFCallASYNCReturns struct {
		result1 *redisa.Cmd
	}
	tFCallASYNCReturnsOnCall map[int]struct {
		result1 *redisa.Cmd
	}
	TFCallASYNCArgsStub        func(context.Context, string, string, int, *redisa.TFCallOptions) *redisa.Cmd
	tFCallASYNCArgsMutex       sync.RWMutex
	tFCallASYNCArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 *redisa.TFCallOptions
	}
	tFCallASYNCArgsReturns struct {
		result1 *redisa.Cmd
	}
	tFCallASYNCArgsReturnsOnCall map[int]struct {
		result1 *redisa.Cmd
	}
	TFCallArgsStub        func(context.Context, string, string, int, *redisa.TFCallOptions) *redisa.Cmd
	tFCallArgsMutex       sync.RWMutex
	tFCallArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 *redisa.TFCallOptions
	}
	tFCallArgsReturns struct {
		result1 *redisa.Cmd
	}
	tFCallArgsReturnsOnCall map[int]struct {
		result1 *redisa.Cmd
	}
	TFunctionDeleteStub        func(context.Context, string) *redisa.StatusCmd
	tFunctionDeleteMutex       sync.RWMutex
	tFunctionDeleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	tFunctionDeleteReturns struct {
		result1 *redisa.StatusCmd
	}
	tFunctionDeleteReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TFunctionListStub        func(context.Context) *redisa.MapStringInterfaceSliceCmd
	tFunctionListMutex       sync.RWMutex
	tFunctionListArgsForCall []struct {
		arg1 context.Context
	}
	tFunctionListReturns struct {
		result1 *redisa.MapStringInterfaceSliceCmd
	}
	tFunctionListReturnsOnCall map[int]struct {
		result1 *redisa.MapStringInterfaceSliceCmd
	}
	TFunctionListArgsStub        func(context.Context, *redisa.TFunctionListOptions) *redisa.MapStringInterfaceSliceCmd
	tFunctionListArgsMutex       sync.RWMutex
	tFunctionListArgsArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.TFunctionListOptions
	}
	tFunctionListArgsReturns struct {
		result1 *redisa.MapStringInterfaceSliceCmd
	}
	tFunctionListArgsReturnsOnCall map[int]struct {
		result1 *redisa.MapStringInterfaceSliceCmd
	}
	TFunctionLoadStub        func(context.Context, string) *redisa.StatusCmd
	tFunctionLoadMutex       sync.RWMutex
	tFunctionLoadArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	tFunctionLoadReturns struct {
		result1 *redisa.StatusCmd
	}
	tFunctionLoadReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TFunctionLoadArgsStub        func(context.Context, string, *redisa.TFunctionLoadOptions) *redisa.StatusCmd
	tFunctionLoadArgsMutex       sync.RWMutex
	tFunctionLoadArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.TFunctionLoadOptions
	}
	tFunctionLoadArgsReturns struct {
		result1 *redisa.StatusCmd
	}
	tFunctionLoadArgsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TSAddStub        func(context.Context, string, interface{}, float64) *redisa.IntCmd
	tSAddMutex       sync.RWMutex
	tSAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 float64
	}
	tSAddReturns struct {
		result1 *redisa.IntCmd
	}
	tSAddReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	TSAddWithArgsStub        func(context.Context, string, interface{}, float64, *redisa.TSOptions) *redisa.IntCmd
	tSAddWithArgsMutex       sync.RWMutex
	tSAddWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 float64
		arg5 *redisa.TSOptions
	}
	tSAddWithArgsReturns struct {
		result1 *redisa.IntCmd
	}
	tSAddWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	TSAlterStub        func(context.Context, string, *redisa.TSAlterOptions) *redisa.StatusCmd
	tSAlterMutex       sync.RWMutex
	tSAlterArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.TSAlterOptions
	}
	tSAlterReturns struct {
		result1 *redisa.StatusCmd
	}
	tSAlterReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TSCreateStub        func(context.Context, string) *redisa.StatusCmd
	tSCreateMutex       sync.RWMutex
	tSCreateArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	tSCreateReturns struct {
		result1 *redisa.StatusCmd
	}
	tSCreateReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TSCreateRuleStub        func(context.Context, string, string, redisa.Aggregator, int) *redisa.StatusCmd
	tSCreateRuleMutex       sync.RWMutex
	tSCreateRuleArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 redisa.Aggregator
		arg5 int
	}
	tSCreateRuleReturns struct {
		result1 *redisa.StatusCmd
	}
	tSCreateRuleReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TSCreateRuleWithArgsStub        func(context.Context, string, string, redisa.Aggregator, int, *redisa.TSCreateRuleOptions) *redisa.StatusCmd
	tSCreateRuleWithArgsMutex       sync.RWMutex
	tSCreateRuleWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 redisa.Aggregator
		arg5 int
		arg6 *redisa.TSCreateRuleOptions
	}
	tSCreateRuleWithArgsReturns struct {
		result1 *redisa.StatusCmd
	}
	tSCreateRuleWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TSCreateWithArgsStub        func(context.Context, string, *redisa.TSOptions) *redisa.StatusCmd
	tSCreateWithArgsMutex       sync.RWMutex
	tSCreateWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.TSOptions
	}
	tSCreateWithArgsReturns struct {
		result1 *redisa.StatusCmd
	}
	tSCreateWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TSDecrByStub        func(context.Context, string, float64) *redisa.IntCmd
	tSDecrByMutex       sync.RWMutex
	tSDecrByArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
	}
	tSDecrByReturns struct {
		result1 *redisa.IntCmd
	}
	tSDecrByReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	TSDecrByWithArgsStub        func(context.Context, string, float64, *redisa.TSIncrDecrOptions) *redisa.IntCmd
	tSDecrByWithArgsMutex       sync.RWMutex
	tSDecrByWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 *redisa.TSIncrDecrOptions
	}
	tSDecrByWithArgsReturns struct {
		result1 *redisa.IntCmd
	}
	tSDecrByWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	TSDelStub        func(context.Context, string, int, int) *redisa.IntCmd
	tSDelMutex       sync.RWMutex
	tSDelArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
	}
	tSDelReturns struct {
		result1 *redisa.IntCmd
	}
	tSDelReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	TSDeleteRuleStub        func(context.Context, string, string) *redisa.StatusCmd
	tSDeleteRuleMutex       sync.RWMutex
	tSDeleteRuleArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	tSDeleteRuleReturns struct {
		result1 *redisa.StatusCmd
	}
	tSDeleteRuleReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TSGetStub        func(context.Context, string) *redisa.TSTimestampValueCmd
	tSGetMutex       sync.RWMutex
	tSGetArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	tSGetReturns struct {
		result1 *redisa.TSTimestampValueCmd
	}
	tSGetReturnsOnCall map[int]struct {
		result1 *redisa.TSTimestampValueCmd
	}
	TSGetWithArgsStub        func(context.Context, string, *redisa.TSGetOptions) *redisa.TSTimestampValueCmd
	tSGetWithArgsMutex       sync.RWMutex
	tSGetWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.TSGetOptions
	}
	tSGetWithArgsReturns struct {
		result1 *redisa.TSTimestampValueCmd
	}
	tSGetWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.TSTimestampValueCmd
	}
	TSIncrByStub        func(context.Context, string, float64) *redisa.IntCmd
	tSIncrByMutex       sync.RWMutex
	tSIncrByArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
	}
	tSIncrByReturns struct {
		result1 *redisa.IntCmd
	}
	tSIncrByReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	TSIncrByWithArgsStub        func(context.Context, string, float64, *redisa.TSIncrDecrOptions) *redisa.IntCmd
	tSIncrByWithArgsMutex       sync.RWMutex
	tSIncrByWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 *redisa.TSIncrDecrOptions
	}
	tSIncrByWithArgsReturns struct {
		result1 *redisa.IntCmd
	}
	tSIncrByWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	TSInfoStub        func(context.Context, string) *redisa.MapStringInterfaceCmd
	tSInfoMutex       sync.RWMutex
	tSInfoArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	tSInfoReturns struct {
		result1 *redisa.MapStringInterfaceCmd
	}
	tSInfoReturnsOnCall map[int]struct {
		result1 *redisa.MapStringInterfaceCmd
	}
	TSInfoWithArgsStub        func(context.Context, string, *redisa.TSInfoOptions) *redisa.MapStringInterfaceCmd
	tSInfoWithArgsMutex       sync.RWMutex
	tSInfoWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.TSInfoOptions
	}
	tSInfoWithArgsReturns struct {
		result1 *redisa.MapStringInterfaceCmd
	}
	tSInfoWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.MapStringInterfaceCmd
	}
	TSMAddStub        func(context.Context, [][]interface{}) *redisa.IntSliceCmd
	tSMAddMutex       sync.RWMutex
	tSMAddArgsForCall []struct {
		arg1 context.Context
		arg2 [][]interface{}
	}
	tSMAddReturns struct {
		result1 *redisa.IntSliceCmd
	}
	tSMAddReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	TSMGetStub        func(context.Context, []string) *redisa.MapStringSliceInterfaceCmd
	tSMGetMutex       sync.RWMutex
	tSMGetArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	tSMGetReturns struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}
	tSMGetReturnsOnCall map[int]struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}
	TSMGetWithArgsStub        func(context.Context, []string, *redisa.TSMGetOptions) *redisa.MapStringSliceInterfaceCmd
	tSMGetWithArgsMutex       sync.RWMutex
	tSMGetWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 []string
		arg3 *redisa.TSMGetOptions
	}
	tSMGetWithArgsReturns struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}
	tSMGetWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}
	TSMRangeStub        func(context.Context, int, int, []string) *redisa.MapStringSliceInterfaceCmd
	tSMRangeMutex       sync.RWMutex
	tSMRangeArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 []string
	}
	tSMRangeReturns struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}
	tSMRangeReturnsOnCall map[int]struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}
	TSMRangeWithArgsStub        func(context.Context, int, int, []string, *redisa.TSMRangeOptions) *redisa.MapStringSliceInterfaceCmd
	tSMRangeWithArgsMutex       sync.RWMutex
	tSMRangeWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 []string
		arg5 *redisa.TSMRangeOptions
	}
	tSMRangeWithArgsReturns struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}
	tSMRangeWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}
	TSMRevRangeStub        func(context.Context, int, int, []string) *redisa.MapStringSliceInterfaceCmd
	tSMRevRangeMutex       sync.RWMutex
	tSMRevRangeArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 []string
	}
	tSMRevRangeReturns struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}
	tSMRevRangeReturnsOnCall map[int]struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}
	TSMRevRangeWithArgsStub        func(context.Context, int, int, []string, *redisa.TSMRevRangeOptions) *redisa.MapStringSliceInterfaceCmd
	tSMRevRangeWithArgsMutex       sync.RWMutex
	tSMRevRangeWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 []string
		arg5 *redisa.TSMRevRangeOptions
	}
	tSMRevRangeWithArgsReturns struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}
	tSMRevRangeWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}
	TSQueryIndexStub        func(context.Context, []string) *redisa.StringSliceCmd
	tSQueryIndexMutex       sync.RWMutex
	tSQueryIndexArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	tSQueryIndexReturns struct {
		result1 *redisa.StringSliceCmd
	}
	tSQueryIndexReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	TSRangeStub        func(context.Context, string, int, int) *redisa.TSTimestampValueSliceCmd
	tSRangeMutex       sync.RWMutex
	tSRangeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
	}
	tSRangeReturns struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}
	tSRangeReturnsOnCall map[int]struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}
	TSRangeWithArgsStub        func(context.Context, string, int, int, *redisa.TSRangeOptions) *redisa.TSTimestampValueSliceCmd
	tSRangeWithArgsMutex       sync.RWMutex
	tSRangeWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
		arg5 *redisa.TSRangeOptions
	}
	tSRangeWithArgsReturns struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}
	tSRangeWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}
	TSRevRangeStub        func(context.Context, string, int, int) *redisa.TSTimestampValueSliceCmd
	tSRevRangeMutex       sync.RWMutex
	tSRevRangeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
	}
	tSRevRangeReturns struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}
	tSRevRangeReturnsOnCall map[int]struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}
	TSRevRangeWithArgsStub        func(context.Context, string, int, int, *redisa.TSRevRangeOptions) *redisa.TSTimestampValueSliceCmd
	tSRevRangeWithArgsMutex       sync.RWMutex
	tSRevRangeWithArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
		arg5 *redisa.TSRevRangeOptions
	}
	tSRevRangeWithArgsReturns struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}
	tSRevRangeWithArgsReturnsOnCall map[int]struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}
	TTLStub        func(context.Context, string) *redisa.DurationCmd
	tTLMutex       sync.RWMutex
	tTLArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	tTLReturns struct {
		result1 *redisa.DurationCmd
	}
	tTLReturnsOnCall map[int]struct {
		result1 *redisa.DurationCmd
	}
	TimeStub        func(context.Context) *redisa.TimeCmd
	timeMutex       sync.RWMutex
	timeArgsForCall []struct {
		arg1 context.Context
	}
	timeReturns struct {
		result1 *redisa.TimeCmd
	}
	timeReturnsOnCall map[int]struct {
		result1 *redisa.TimeCmd
	}
	TopKAddStub        func(context.Context, string, ...interface{}) *redisa.StringSliceCmd
	topKAddMutex       sync.RWMutex
	topKAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	topKAddReturns struct {
		result1 *redisa.StringSliceCmd
	}
	topKAddReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	TopKCountStub        func(context.Context, string, ...interface{}) *redisa.IntSliceCmd
	topKCountMutex       sync.RWMutex
	topKCountArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	topKCountReturns struct {
		result1 *redisa.IntSliceCmd
	}
	topKCountReturnsOnCall map[int]struct {
		result1 *redisa.IntSliceCmd
	}
	TopKIncrByStub        func(context.Context, string, ...interface{}) *redisa.StringSliceCmd
	topKIncrByMutex       sync.RWMutex
	topKIncrByArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	topKIncrByReturns struct {
		result1 *redisa.StringSliceCmd
	}
	topKIncrByReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	TopKInfoStub        func(context.Context, string) *redisa.TopKInfoCmd
	topKInfoMutex       sync.RWMutex
	topKInfoArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	topKInfoReturns struct {
		result1 *redisa.TopKInfoCmd
	}
	topKInfoReturnsOnCall map[int]struct {
		result1 *redisa.TopKInfoCmd
	}
	TopKListStub        func(context.Context, string) *redisa.StringSliceCmd
	topKListMutex       sync.RWMutex
	topKListArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	topKListReturns struct {
		result1 *redisa.StringSliceCmd
	}
	topKListReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	TopKListWithCountStub        func(context.Context, string) *redisa.MapStringIntCmd
	topKListWithCountMutex       sync.RWMutex
	topKListWithCountArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	topKListWithCountReturns struct {
		result1 *redisa.MapStringIntCmd
	}
	topKListWithCountReturnsOnCall map[int]struct {
		result1 *redisa.MapStringIntCmd
	}
	TopKQueryStub        func(context.Context, string, ...interface{}) *redisa.BoolSliceCmd
	topKQueryMutex       sync.RWMutex
	topKQueryArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	topKQueryReturns struct {
		result1 *redisa.BoolSliceCmd
	}
	topKQueryReturnsOnCall map[int]struct {
		result1 *redisa.BoolSliceCmd
	}
	TopKReserveStub        func(context.Context, string, int64) *redisa.StatusCmd
	topKReserveMutex       sync.RWMutex
	topKReserveArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}
	topKReserveReturns struct {
		result1 *redisa.StatusCmd
	}
	topKReserveReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TopKReserveWithOptionsStub        func(context.Context, string, int64, int64, int64, float64) *redisa.StatusCmd
	topKReserveWithOptionsMutex       sync.RWMutex
	topKReserveWithOptionsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
		arg5 int64
		arg6 float64
	}
	topKReserveWithOptionsReturns struct {
		result1 *redisa.StatusCmd
	}
	topKReserveWithOptionsReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	TouchStub        func(context.Context, ...string) *redisa.IntCmd
	touchMutex       sync.RWMutex
	touchArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	touchReturns struct {
		result1 *redisa.IntCmd
	}
	touchReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	TxPipelineStub        func() redisa.Pipeliner
	txPipelineMutex       sync.RWMutex
	txPipelineArgsForCall []struct {
	}
	txPipelineReturns struct {
		result1 redisa.Pipeliner
	}
	txPipelineReturnsOnCall map[int]struct {
		result1 redisa.Pipeliner
	}
	TxPipelinedStub        func(context.Context, func(redisa.Pipeliner) error) ([]redisa.Cmder, error)
	txPipelinedMutex       sync.RWMutex
	txPipelinedArgsForCall []struct {
		arg1 context.Context
		arg2 func(redisa.Pipeliner) error
	}
	txPipelinedReturns struct {
		result1 []redisa.Cmder
		result2 error
	}
	txPipelinedReturnsOnCall map[int]struct {
		result1 []redisa.Cmder
		result2 error
	}
	TypeStub        func(context.Context, string) *redisa.StatusCmd
	typeMutex       sync.RWMutex
	typeArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	typeReturns struct {
		result1 *redisa.StatusCmd
	}
	typeReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	UnlinkStub        func(context.Context, ...string) *redisa.IntCmd
	unlinkMutex       sync.RWMutex
	unlinkArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	unlinkReturns struct {
		result1 *redisa.IntCmd
	}
	unlinkReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	XAckStub        func(context.Context, string, string, ...string) *redisa.IntCmd
	xAckMutex       sync.RWMutex
	xAckArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 []string
	}
	xAckReturns struct {
		result1 *redisa.IntCmd
	}
	xAckReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	XAddStub        func(context.Context, *redisa.XAddArgs) *redisa.StringCmd
	xAddMutex       sync.RWMutex
	xAddArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.XAddArgs
	}
	xAddReturns struct {
		result1 *redisa.StringCmd
	}
	xAddReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	XAutoClaimStub        func(context.Context, *redisa.XAutoClaimArgs) *redisa.XAutoClaimCmd
	xAutoClaimMutex       sync.RWMutex
	xAutoClaimArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.XAutoClaimArgs
	}
	xAutoClaimReturns struct {
		result1 *redisa.XAutoClaimCmd
	}
	xAutoClaimReturnsOnCall map[int]struct {
		result1 *redisa.XAutoClaimCmd
	}
	XAutoClaimJustIDStub        func(context.Context, *redisa.XAutoClaimArgs) *redisa.XAutoClaimJustIDCmd
	xAutoClaimJustIDMutex       sync.RWMutex
	xAutoClaimJustIDArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.XAutoClaimArgs
	}
	xAutoClaimJustIDReturns struct {
		result1 *redisa.XAutoClaimJustIDCmd
	}
	xAutoClaimJustIDReturnsOnCall map[int]struct {
		result1 *redisa.XAutoClaimJustIDCmd
	}
	XClaimStub        func(context.Context, *redisa.XClaimArgs) *redisa.XMessageSliceCmd
	xClaimMutex       sync.RWMutex
	xClaimArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.XClaimArgs
	}
	xClaimReturns struct {
		result1 *redisa.XMessageSliceCmd
	}
	xClaimReturnsOnCall map[int]struct {
		result1 *redisa.XMessageSliceCmd
	}
	XClaimJustIDStub        func(context.Context, *redisa.XClaimArgs) *redisa.StringSliceCmd
	xClaimJustIDMutex       sync.RWMutex
	xClaimJustIDArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.XClaimArgs
	}
	xClaimJustIDReturns struct {
		result1 *redisa.StringSliceCmd
	}
	xClaimJustIDReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	XDelStub        func(context.Context, string, ...string) *redisa.IntCmd
	xDelMutex       sync.RWMutex
	xDelArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	xDelReturns struct {
		result1 *redisa.IntCmd
	}
	xDelReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	XGroupCreateStub        func(context.Context, string, string, string) *redisa.StatusCmd
	xGroupCreateMutex       sync.RWMutex
	xGroupCreateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	xGroupCreateReturns struct {
		result1 *redisa.StatusCmd
	}
	xGroupCreateReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	XGroupCreateConsumerStub        func(context.Context, string, string, string) *redisa.IntCmd
	xGroupCreateConsumerMutex       sync.RWMutex
	xGroupCreateConsumerArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	xGroupCreateConsumerReturns struct {
		result1 *redisa.IntCmd
	}
	xGroupCreateConsumerReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	XGroupCreateMkStreamStub        func(context.Context, string, string, string) *redisa.StatusCmd
	xGroupCreateMkStreamMutex       sync.RWMutex
	xGroupCreateMkStreamArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	xGroupCreateMkStreamReturns struct {
		result1 *redisa.StatusCmd
	}
	xGroupCreateMkStreamReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	XGroupDelConsumerStub        func(context.Context, string, string, string) *redisa.IntCmd
	xGroupDelConsumerMutex       sync.RWMutex
	xGroupDelConsumerArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	xGroupDelConsumerReturns struct {
		result1 *redisa.IntCmd
	}
	xGroupDelConsumerReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	XGroupDestroyStub        func(context.Context, string, string) *redisa.IntCmd
	xGroupDestroyMutex       sync.RWMutex
	xGroupDestroyArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	xGroupDestroyReturns struct {
		result1 *redisa.IntCmd
	}
	xGroupDestroyReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	XGroupSetIDStub        func(context.Context, string, string, string) *redisa.StatusCmd
	xGroupSetIDMutex       sync.RWMutex
	xGroupSetIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	xGroupSetIDReturns struct {
		result1 *redisa.StatusCmd
	}
	xGroupSetIDReturnsOnCall map[int]struct {
		result1 *redisa.StatusCmd
	}
	XInfoConsumersStub        func(context.Context, string, string) *redisa.XInfoConsumersCmd
	xInfoConsumersMutex       sync.RWMutex
	xInfoConsumersArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	xInfoConsumersReturns struct {
		result1 *redisa.XInfoConsumersCmd
	}
	xInfoConsumersReturnsOnCall map[int]struct {
		result1 *redisa.XInfoConsumersCmd
	}
	XInfoGroupsStub        func(context.Context, string) *redisa.XInfoGroupsCmd
	xInfoGroupsMutex       sync.RWMutex
	xInfoGroupsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	xInfoGroupsReturns struct {
		result1 *redisa.XInfoGroupsCmd
	}
	xInfoGroupsReturnsOnCall map[int]struct {
		result1 *redisa.XInfoGroupsCmd
	}
	XInfoStreamStub        func(context.Context, string) *redisa.XInfoStreamCmd
	xInfoStreamMutex       sync.RWMutex
	xInfoStreamArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	xInfoStreamReturns struct {
		result1 *redisa.XInfoStreamCmd
	}
	xInfoStreamReturnsOnCall map[int]struct {
		result1 *redisa.XInfoStreamCmd
	}
	XInfoStreamFullStub        func(context.Context, string, int) *redisa.XInfoStreamFullCmd
	xInfoStreamFullMutex       sync.RWMutex
	xInfoStreamFullArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	xInfoStreamFullReturns struct {
		result1 *redisa.XInfoStreamFullCmd
	}
	xInfoStreamFullReturnsOnCall map[int]struct {
		result1 *redisa.XInfoStreamFullCmd
	}
	XLenStub        func(context.Context, string) *redisa.IntCmd
	xLenMutex       sync.RWMutex
	xLenArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	xLenReturns struct {
		result1 *redisa.IntCmd
	}
	xLenReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	XPendingStub        func(context.Context, string, string) *redisa.XPendingCmd
	xPendingMutex       sync.RWMutex
	xPendingArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	xPendingReturns struct {
		result1 *redisa.XPendingCmd
	}
	xPendingReturnsOnCall map[int]struct {
		result1 *redisa.XPendingCmd
	}
	XPendingExtStub        func(context.Context, *redisa.XPendingExtArgs) *redisa.XPendingExtCmd
	xPendingExtMutex       sync.RWMutex
	xPendingExtArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.XPendingExtArgs
	}
	xPendingExtReturns struct {
		result1 *redisa.XPendingExtCmd
	}
	xPendingExtReturnsOnCall map[int]struct {
		result1 *redisa.XPendingExtCmd
	}
	XRangeStub        func(context.Context, string, string, string) *redisa.XMessageSliceCmd
	xRangeMutex       sync.RWMutex
	xRangeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	xRangeReturns struct {
		result1 *redisa.XMessageSliceCmd
	}
	xRangeReturnsOnCall map[int]struct {
		result1 *redisa.XMessageSliceCmd
	}
	XRangeNStub        func(context.Context, string, string, string, int64) *redisa.XMessageSliceCmd
	xRangeNMutex       sync.RWMutex
	xRangeNArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 int64
	}
	xRangeNReturns struct {
		result1 *redisa.XMessageSliceCmd
	}
	xRangeNReturnsOnCall map[int]struct {
		result1 *redisa.XMessageSliceCmd
	}
	XReadStub        func(context.Context, *redisa.XReadArgs) *redisa.XStreamSliceCmd
	xReadMutex       sync.RWMutex
	xReadArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.XReadArgs
	}
	xReadReturns struct {
		result1 *redisa.XStreamSliceCmd
	}
	xReadReturnsOnCall map[int]struct {
		result1 *redisa.XStreamSliceCmd
	}
	XReadGroupStub        func(context.Context, *redisa.XReadGroupArgs) *redisa.XStreamSliceCmd
	xReadGroupMutex       sync.RWMutex
	xReadGroupArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.XReadGroupArgs
	}
	xReadGroupReturns struct {
		result1 *redisa.XStreamSliceCmd
	}
	xReadGroupReturnsOnCall map[int]struct {
		result1 *redisa.XStreamSliceCmd
	}
	XReadStreamsStub        func(context.Context, ...string) *redisa.XStreamSliceCmd
	xReadStreamsMutex       sync.RWMutex
	xReadStreamsArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	xReadStreamsReturns struct {
		result1 *redisa.XStreamSliceCmd
	}
	xReadStreamsReturnsOnCall map[int]struct {
		result1 *redisa.XStreamSliceCmd
	}
	XRevRangeStub        func(context.Context, string, string, string) *redisa.XMessageSliceCmd
	xRevRangeMutex       sync.RWMutex
	xRevRangeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	xRevRangeReturns struct {
		result1 *redisa.XMessageSliceCmd
	}
	xRevRangeReturnsOnCall map[int]struct {
		result1 *redisa.XMessageSliceCmd
	}
	XRevRangeNStub        func(context.Context, string, string, string, int64) *redisa.XMessageSliceCmd
	xRevRangeNMutex       sync.RWMutex
	xRevRangeNArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 int64
	}
	xRevRangeNReturns struct {
		result1 *redisa.XMessageSliceCmd
	}
	xRevRangeNReturnsOnCall map[int]struct {
		result1 *redisa.XMessageSliceCmd
	}
	XTrimMaxLenStub        func(context.Context, string, int64) *redisa.IntCmd
	xTrimMaxLenMutex       sync.RWMutex
	xTrimMaxLenArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}
	xTrimMaxLenReturns struct {
		result1 *redisa.IntCmd
	}
	xTrimMaxLenReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	XTrimMaxLenApproxStub        func(context.Context, string, int64, int64) *redisa.IntCmd
	xTrimMaxLenApproxMutex       sync.RWMutex
	xTrimMaxLenApproxArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	xTrimMaxLenApproxReturns struct {
		result1 *redisa.IntCmd
	}
	xTrimMaxLenApproxReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	XTrimMinIDStub        func(context.Context, string, string) *redisa.IntCmd
	xTrimMinIDMutex       sync.RWMutex
	xTrimMinIDArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	xTrimMinIDReturns struct {
		result1 *redisa.IntCmd
	}
	xTrimMinIDReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	XTrimMinIDApproxStub        func(context.Context, string, string, int64) *redisa.IntCmd
	xTrimMinIDApproxMutex       sync.RWMutex
	xTrimMinIDApproxArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
	}
	xTrimMinIDApproxReturns struct {
		result1 *redisa.IntCmd
	}
	xTrimMinIDApproxReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZAddStub        func(context.Context, string, ...redisa.Z) *redisa.IntCmd
	zAddMutex       sync.RWMutex
	zAddArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []redisa.Z
	}
	zAddReturns struct {
		result1 *redisa.IntCmd
	}
	zAddReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZAddArgsStub        func(context.Context, string, redisa.ZAddArgs) *redisa.IntCmd
	zAddArgsMutex       sync.RWMutex
	zAddArgsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 redisa.ZAddArgs
	}
	zAddArgsReturns struct {
		result1 *redisa.IntCmd
	}
	zAddArgsReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZAddArgsIncrStub        func(context.Context, string, redisa.ZAddArgs) *redisa.FloatCmd
	zAddArgsIncrMutex       sync.RWMutex
	zAddArgsIncrArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 redisa.ZAddArgs
	}
	zAddArgsIncrReturns struct {
		result1 *redisa.FloatCmd
	}
	zAddArgsIncrReturnsOnCall map[int]struct {
		result1 *redisa.FloatCmd
	}
	ZAddGTStub        func(context.Context, string, ...redisa.Z) *redisa.IntCmd
	zAddGTMutex       sync.RWMutex
	zAddGTArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []redisa.Z
	}
	zAddGTReturns struct {
		result1 *redisa.IntCmd
	}
	zAddGTReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZAddLTStub        func(context.Context, string, ...redisa.Z) *redisa.IntCmd
	zAddLTMutex       sync.RWMutex
	zAddLTArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []redisa.Z
	}
	zAddLTReturns struct {
		result1 *redisa.IntCmd
	}
	zAddLTReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZAddNXStub        func(context.Context, string, ...redisa.Z) *redisa.IntCmd
	zAddNXMutex       sync.RWMutex
	zAddNXArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []redisa.Z
	}
	zAddNXReturns struct {
		result1 *redisa.IntCmd
	}
	zAddNXReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZAddXXStub        func(context.Context, string, ...redisa.Z) *redisa.IntCmd
	zAddXXMutex       sync.RWMutex
	zAddXXArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []redisa.Z
	}
	zAddXXReturns struct {
		result1 *redisa.IntCmd
	}
	zAddXXReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZCardStub        func(context.Context, string) *redisa.IntCmd
	zCardMutex       sync.RWMutex
	zCardArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	zCardReturns struct {
		result1 *redisa.IntCmd
	}
	zCardReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZCountStub        func(context.Context, string, string, string) *redisa.IntCmd
	zCountMutex       sync.RWMutex
	zCountArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	zCountReturns struct {
		result1 *redisa.IntCmd
	}
	zCountReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZDiffStub        func(context.Context, ...string) *redisa.StringSliceCmd
	zDiffMutex       sync.RWMutex
	zDiffArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	zDiffReturns struct {
		result1 *redisa.StringSliceCmd
	}
	zDiffReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ZDiffStoreStub        func(context.Context, string, ...string) *redisa.IntCmd
	zDiffStoreMutex       sync.RWMutex
	zDiffStoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	zDiffStoreReturns struct {
		result1 *redisa.IntCmd
	}
	zDiffStoreReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZDiffWithScoresStub        func(context.Context, ...string) *redisa.ZSliceCmd
	zDiffWithScoresMutex       sync.RWMutex
	zDiffWithScoresArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	zDiffWithScoresReturns struct {
		result1 *redisa.ZSliceCmd
	}
	zDiffWithScoresReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceCmd
	}
	ZIncrByStub        func(context.Context, string, float64, string) *redisa.FloatCmd
	zIncrByMutex       sync.RWMutex
	zIncrByArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 string
	}
	zIncrByReturns struct {
		result1 *redisa.FloatCmd
	}
	zIncrByReturnsOnCall map[int]struct {
		result1 *redisa.FloatCmd
	}
	ZInterStub        func(context.Context, *redisa.ZStore) *redisa.StringSliceCmd
	zInterMutex       sync.RWMutex
	zInterArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.ZStore
	}
	zInterReturns struct {
		result1 *redisa.StringSliceCmd
	}
	zInterReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ZInterCardStub        func(context.Context, int64, ...string) *redisa.IntCmd
	zInterCardMutex       sync.RWMutex
	zInterCardArgsForCall []struct {
		arg1 context.Context
		arg2 int64
		arg3 []string
	}
	zInterCardReturns struct {
		result1 *redisa.IntCmd
	}
	zInterCardReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZInterStoreStub        func(context.Context, string, *redisa.ZStore) *redisa.IntCmd
	zInterStoreMutex       sync.RWMutex
	zInterStoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZStore
	}
	zInterStoreReturns struct {
		result1 *redisa.IntCmd
	}
	zInterStoreReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZInterWithScoresStub        func(context.Context, *redisa.ZStore) *redisa.ZSliceCmd
	zInterWithScoresMutex       sync.RWMutex
	zInterWithScoresArgsForCall []struct {
		arg1 context.Context
		arg2 *redisa.ZStore
	}
	zInterWithScoresReturns struct {
		result1 *redisa.ZSliceCmd
	}
	zInterWithScoresReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceCmd
	}
	ZLexCountStub        func(context.Context, string, string, string) *redisa.IntCmd
	zLexCountMutex       sync.RWMutex
	zLexCountArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	zLexCountReturns struct {
		result1 *redisa.IntCmd
	}
	zLexCountReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZMPopStub        func(context.Context, string, int64, ...string) *redisa.ZSliceWithKeyCmd
	zMPopMutex       sync.RWMutex
	zMPopArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 []string
	}
	zMPopReturns struct {
		result1 *redisa.ZSliceWithKeyCmd
	}
	zMPopReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceWithKeyCmd
	}
	ZMScoreStub        func(context.Context, string, ...string) *redisa.FloatSliceCmd
	zMScoreMutex       sync.RWMutex
	zMScoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	zMScoreReturns struct {
		result1 *redisa.FloatSliceCmd
	}
	zMScoreReturnsOnCall map[int]struct {
		result1 *redisa.FloatSliceCmd
	}
	ZPopMaxStub        func(context.Context, string, ...int64) *redisa.ZSliceCmd
	zPopMaxMutex       sync.RWMutex
	zPopMaxArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []int64
	}
	zPopMaxReturns struct {
		result1 *redisa.ZSliceCmd
	}
	zPopMaxReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceCmd
	}
	ZPopMinStub        func(context.Context, string, ...int64) *redisa.ZSliceCmd
	zPopMinMutex       sync.RWMutex
	zPopMinArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []int64
	}
	zPopMinReturns struct {
		result1 *redisa.ZSliceCmd
	}
	zPopMinReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceCmd
	}
	ZRandMemberStub        func(context.Context, string, int) *redisa.StringSliceCmd
	zRandMemberMutex       sync.RWMutex
	zRandMemberArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	zRandMemberReturns struct {
		result1 *redisa.StringSliceCmd
	}
	zRandMemberReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ZRandMemberWithScoresStub        func(context.Context, string, int) *redisa.ZSliceCmd
	zRandMemberWithScoresMutex       sync.RWMutex
	zRandMemberWithScoresArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}
	zRandMemberWithScoresReturns struct {
		result1 *redisa.ZSliceCmd
	}
	zRandMemberWithScoresReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceCmd
	}
	ZRangeStub        func(context.Context, string, int64, int64) *redisa.StringSliceCmd
	zRangeMutex       sync.RWMutex
	zRangeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	zRangeReturns struct {
		result1 *redisa.StringSliceCmd
	}
	zRangeReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ZRangeArgsStub        func(context.Context, redisa.ZRangeArgs) *redisa.StringSliceCmd
	zRangeArgsMutex       sync.RWMutex
	zRangeArgsArgsForCall []struct {
		arg1 context.Context
		arg2 redisa.ZRangeArgs
	}
	zRangeArgsReturns struct {
		result1 *redisa.StringSliceCmd
	}
	zRangeArgsReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ZRangeArgsWithScoresStub        func(context.Context, redisa.ZRangeArgs) *redisa.ZSliceCmd
	zRangeArgsWithScoresMutex       sync.RWMutex
	zRangeArgsWithScoresArgsForCall []struct {
		arg1 context.Context
		arg2 redisa.ZRangeArgs
	}
	zRangeArgsWithScoresReturns struct {
		result1 *redisa.ZSliceCmd
	}
	zRangeArgsWithScoresReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceCmd
	}
	ZRangeByLexStub        func(context.Context, string, *redisa.ZRangeBy) *redisa.StringSliceCmd
	zRangeByLexMutex       sync.RWMutex
	zRangeByLexArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZRangeBy
	}
	zRangeByLexReturns struct {
		result1 *redisa.StringSliceCmd
	}
	zRangeByLexReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ZRangeByScoreStub        func(context.Context, string, *redisa.ZRangeBy) *redisa.StringSliceCmd
	zRangeByScoreMutex       sync.RWMutex
	zRangeByScoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZRangeBy
	}
	zRangeByScoreReturns struct {
		result1 *redisa.StringSliceCmd
	}
	zRangeByScoreReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ZRangeByScoreWithScoresStub        func(context.Context, string, *redisa.ZRangeBy) *redisa.ZSliceCmd
	zRangeByScoreWithScoresMutex       sync.RWMutex
	zRangeByScoreWithScoresArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZRangeBy
	}
	zRangeByScoreWithScoresReturns struct {
		result1 *redisa.ZSliceCmd
	}
	zRangeByScoreWithScoresReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceCmd
	}
	ZRangeStoreStub        func(context.Context, string, redisa.ZRangeArgs) *redisa.IntCmd
	zRangeStoreMutex       sync.RWMutex
	zRangeStoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 redisa.ZRangeArgs
	}
	zRangeStoreReturns struct {
		result1 *redisa.IntCmd
	}
	zRangeStoreReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZRangeWithScoresStub        func(context.Context, string, int64, int64) *redisa.ZSliceCmd
	zRangeWithScoresMutex       sync.RWMutex
	zRangeWithScoresArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	zRangeWithScoresReturns struct {
		result1 *redisa.ZSliceCmd
	}
	zRangeWithScoresReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceCmd
	}
	ZRankStub        func(context.Context, string, string) *redisa.IntCmd
	zRankMutex       sync.RWMutex
	zRankArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	zRankReturns struct {
		result1 *redisa.IntCmd
	}
	zRankReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZRankWithScoreStub        func(context.Context, string, string) *redisa.RankWithScoreCmd
	zRankWithScoreMutex       sync.RWMutex
	zRankWithScoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	zRankWithScoreReturns struct {
		result1 *redisa.RankWithScoreCmd
	}
	zRankWithScoreReturnsOnCall map[int]struct {
		result1 *redisa.RankWithScoreCmd
	}
	ZRemStub        func(context.Context, string, ...interface{}) *redisa.IntCmd
	zRemMutex       sync.RWMutex
	zRemArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	zRemReturns struct {
		result1 *redisa.IntCmd
	}
	zRemReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZRemRangeByLexStub        func(context.Context, string, string, string) *redisa.IntCmd
	zRemRangeByLexMutex       sync.RWMutex
	zRemRangeByLexArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	zRemRangeByLexReturns struct {
		result1 *redisa.IntCmd
	}
	zRemRangeByLexReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZRemRangeByRankStub        func(context.Context, string, int64, int64) *redisa.IntCmd
	zRemRangeByRankMutex       sync.RWMutex
	zRemRangeByRankArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	zRemRangeByRankReturns struct {
		result1 *redisa.IntCmd
	}
	zRemRangeByRankReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZRemRangeByScoreStub        func(context.Context, string, string, string) *redisa.IntCmd
	zRemRangeByScoreMutex       sync.RWMutex
	zRemRangeByScoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	zRemRangeByScoreReturns struct {
		result1 *redisa.IntCmd
	}
	zRemRangeByScoreReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZRevRangeStub        func(context.Context, string, int64, int64) *redisa.StringSliceCmd
	zRevRangeMutex       sync.RWMutex
	zRevRangeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	zRevRangeReturns struct {
		result1 *redisa.StringSliceCmd
	}
	zRevRangeReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ZRevRangeByLexStub        func(context.Context, string, *redisa.ZRangeBy) *redisa.StringSliceCmd
	zRevRangeByLexMutex       sync.RWMutex
	zRevRangeByLexArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZRangeBy
	}
	zRevRangeByLexReturns struct {
		result1 *redisa.StringSliceCmd
	}
	zRevRangeByLexReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ZRevRangeByScoreStub        func(context.Context, string, *redisa.ZRangeBy) *redisa.StringSliceCmd
	zRevRangeByScoreMutex       sync.RWMutex
	zRevRangeByScoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZRangeBy
	}
	zRevRangeByScoreReturns struct {
		result1 *redisa.StringSliceCmd
	}
	zRevRangeByScoreReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ZRevRangeByScoreWithScoresStub        func(context.Context, string, *redisa.ZRangeBy) *redisa.ZSliceCmd
	zRevRangeByScoreWithScoresMutex       sync.RWMutex
	zRevRangeByScoreWithScoresArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZRangeBy
	}
	zRevRangeByScoreWithScoresReturns struct {
		result1 *redisa.ZSliceCmd
	}
	zRevRangeByScoreWithScoresReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceCmd
	}
	ZRevRangeWithScoresStub        func(context.Context, string, int64, int64) *redisa.ZSliceCmd
	zRevRangeWithScoresMutex       sync.RWMutex
	zRevRangeWithScoresArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}
	zRevRangeWithScoresReturns struct {
		result1 *redisa.ZSliceCmd
	}
	zRevRangeWithScoresReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceCmd
	}
	ZRevRankStub        func(context.Context, string, string) *redisa.IntCmd
	zRevRankMutex       sync.RWMutex
	zRevRankArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	zRevRankReturns struct {
		result1 *redisa.IntCmd
	}
	zRevRankReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZRevRankWithScoreStub        func(context.Context, string, string) *redisa.RankWithScoreCmd
	zRevRankWithScoreMutex       sync.RWMutex
	zRevRankWithScoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	zRevRankWithScoreReturns struct {
		result1 *redisa.RankWithScoreCmd
	}
	zRevRankWithScoreReturnsOnCall map[int]struct {
		result1 *redisa.RankWithScoreCmd
	}
	ZScanStub        func(context.Context, string, uint64, string, int64) *redisa.ScanCmd
	zScanMutex       sync.RWMutex
	zScanArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 uint64
		arg4 string
		arg5 int64
	}
	zScanReturns struct {
		result1 *redisa.ScanCmd
	}
	zScanReturnsOnCall map[int]struct {
		result1 *redisa.ScanCmd
	}
	ZScoreStub        func(context.Context, string, string) *redisa.FloatCmd
	zScoreMutex       sync.RWMutex
	zScoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	zScoreReturns struct {
		result1 *redisa.FloatCmd
	}
	zScoreReturnsOnCall map[int]struct {
		result1 *redisa.FloatCmd
	}
	ZUnionStub        func(context.Context, redisa.ZStore) *redisa.StringSliceCmd
	zUnionMutex       sync.RWMutex
	zUnionArgsForCall []struct {
		arg1 context.Context
		arg2 redisa.ZStore
	}
	zUnionReturns struct {
		result1 *redisa.StringSliceCmd
	}
	zUnionReturnsOnCall map[int]struct {
		result1 *redisa.StringSliceCmd
	}
	ZUnionStoreStub        func(context.Context, string, *redisa.ZStore) *redisa.IntCmd
	zUnionStoreMutex       sync.RWMutex
	zUnionStoreArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZStore
	}
	zUnionStoreReturns struct {
		result1 *redisa.IntCmd
	}
	zUnionStoreReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	ZUnionWithScoresStub        func(context.Context, redisa.ZStore) *redisa.ZSliceCmd
	zUnionWithScoresMutex       sync.RWMutex
	zUnionWithScoresArgsForCall []struct {
		arg1 context.Context
		arg2 redisa.ZStore
	}
	zUnionWithScoresReturns struct {
		result1 *redisa.ZSliceCmd
	}
	zUnionWithScoresReturnsOnCall map[int]struct {
		result1 *redisa.ZSliceCmd
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCmdable) ACLDryRun(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.StringCmd {
	fake.aCLDryRunMutex.Lock()
	ret, specificReturn := fake.aCLDryRunReturnsOnCall[len(fake.aCLDryRunArgsForCall)]
	fake.aCLDryRunArgsForCall = append(fake.aCLDryRunArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.ACLDryRunStub
	fakeReturns := fake.aCLDryRunReturns
	fake.recordInvocation("ACLDryRun", []interface{}{arg1, arg2, arg3})
	fake.aCLDryRunMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ACLDryRunCallCount() int {
	fake.aCLDryRunMutex.RLock()
	defer fake.aCLDryRunMutex.RUnlock()
	return len(fake.aCLDryRunArgsForCall)
}

func (fake *FakeCmdable) ACLDryRunCalls(stub func(context.Context, string, ...interface{}) *redisa.StringCmd) {
	fake.aCLDryRunMutex.Lock()
	defer fake.aCLDryRunMutex.Unlock()
	fake.ACLDryRunStub = stub
}

func (fake *FakeCmdable) ACLDryRunArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.aCLDryRunMutex.RLock()
	defer fake.aCLDryRunMutex.RUnlock()
	argsForCall := fake.aCLDryRunArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ACLDryRunReturns(result1 *redisa.StringCmd) {
	fake.aCLDryRunMutex.Lock()
	defer fake.aCLDryRunMutex.Unlock()
	fake.ACLDryRunStub = nil
	fake.aCLDryRunReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ACLDryRunReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.aCLDryRunMutex.Lock()
	defer fake.aCLDryRunMutex.Unlock()
	fake.ACLDryRunStub = nil
	if fake.aCLDryRunReturnsOnCall == nil {
		fake.aCLDryRunReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.aCLDryRunReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ACLLog(arg1 context.Context, arg2 int64) *redisa.ACLLogCmd {
	fake.aCLLogMutex.Lock()
	ret, specificReturn := fake.aCLLogReturnsOnCall[len(fake.aCLLogArgsForCall)]
	fake.aCLLogArgsForCall = append(fake.aCLLogArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.ACLLogStub
	fakeReturns := fake.aCLLogReturns
	fake.recordInvocation("ACLLog", []interface{}{arg1, arg2})
	fake.aCLLogMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ACLLogCallCount() int {
	fake.aCLLogMutex.RLock()
	defer fake.aCLLogMutex.RUnlock()
	return len(fake.aCLLogArgsForCall)
}

func (fake *FakeCmdable) ACLLogCalls(stub func(context.Context, int64) *redisa.ACLLogCmd) {
	fake.aCLLogMutex.Lock()
	defer fake.aCLLogMutex.Unlock()
	fake.ACLLogStub = stub
}

func (fake *FakeCmdable) ACLLogArgsForCall(i int) (context.Context, int64) {
	fake.aCLLogMutex.RLock()
	defer fake.aCLLogMutex.RUnlock()
	argsForCall := fake.aCLLogArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ACLLogReturns(result1 *redisa.ACLLogCmd) {
	fake.aCLLogMutex.Lock()
	defer fake.aCLLogMutex.Unlock()
	fake.ACLLogStub = nil
	fake.aCLLogReturns = struct {
		result1 *redisa.ACLLogCmd
	}{result1}
}

func (fake *FakeCmdable) ACLLogReturnsOnCall(i int, result1 *redisa.ACLLogCmd) {
	fake.aCLLogMutex.Lock()
	defer fake.aCLLogMutex.Unlock()
	fake.ACLLogStub = nil
	if fake.aCLLogReturnsOnCall == nil {
		fake.aCLLogReturnsOnCall = make(map[int]struct {
			result1 *redisa.ACLLogCmd
		})
	}
	fake.aCLLogReturnsOnCall[i] = struct {
		result1 *redisa.ACLLogCmd
	}{result1}
}

func (fake *FakeCmdable) ACLLogReset(arg1 context.Context) *redisa.StatusCmd {
	fake.aCLLogResetMutex.Lock()
	ret, specificReturn := fake.aCLLogResetReturnsOnCall[len(fake.aCLLogResetArgsForCall)]
	fake.aCLLogResetArgsForCall = append(fake.aCLLogResetArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ACLLogResetStub
	fakeReturns := fake.aCLLogResetReturns
	fake.recordInvocation("ACLLogReset", []interface{}{arg1})
	fake.aCLLogResetMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ACLLogResetCallCount() int {
	fake.aCLLogResetMutex.RLock()
	defer fake.aCLLogResetMutex.RUnlock()
	return len(fake.aCLLogResetArgsForCall)
}

func (fake *FakeCmdable) ACLLogResetCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.aCLLogResetMutex.Lock()
	defer fake.aCLLogResetMutex.Unlock()
	fake.ACLLogResetStub = stub
}

func (fake *FakeCmdable) ACLLogResetArgsForCall(i int) context.Context {
	fake.aCLLogResetMutex.RLock()
	defer fake.aCLLogResetMutex.RUnlock()
	argsForCall := fake.aCLLogResetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ACLLogResetReturns(result1 *redisa.StatusCmd) {
	fake.aCLLogResetMutex.Lock()
	defer fake.aCLLogResetMutex.Unlock()
	fake.ACLLogResetStub = nil
	fake.aCLLogResetReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ACLLogResetReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.aCLLogResetMutex.Lock()
	defer fake.aCLLogResetMutex.Unlock()
	fake.ACLLogResetStub = nil
	if fake.aCLLogResetReturnsOnCall == nil {
		fake.aCLLogResetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.aCLLogResetReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) Append(arg1 context.Context, arg2 string, arg3 string) *redisa.IntCmd {
	fake.appendMutex.Lock()
	ret, specificReturn := fake.appendReturnsOnCall[len(fake.appendArgsForCall)]
	fake.appendArgsForCall = append(fake.appendArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AppendStub
	fakeReturns := fake.appendReturns
	fake.recordInvocation("Append", []interface{}{arg1, arg2, arg3})
	fake.appendMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) AppendCallCount() int {
	fake.appendMutex.RLock()
	defer fake.appendMutex.RUnlock()
	return len(fake.appendArgsForCall)
}

func (fake *FakeCmdable) AppendCalls(stub func(context.Context, string, string) *redisa.IntCmd) {
	fake.appendMutex.Lock()
	defer fake.appendMutex.Unlock()
	fake.AppendStub = stub
}

func (fake *FakeCmdable) AppendArgsForCall(i int) (context.Context, string, string) {
	fake.appendMutex.RLock()
	defer fake.appendMutex.RUnlock()
	argsForCall := fake.appendArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) AppendReturns(result1 *redisa.IntCmd) {
	fake.appendMutex.Lock()
	defer fake.appendMutex.Unlock()
	fake.AppendStub = nil
	fake.appendReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) AppendReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.appendMutex.Lock()
	defer fake.appendMutex.Unlock()
	fake.AppendStub = nil
	if fake.appendReturnsOnCall == nil {
		fake.appendReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.appendReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BFAdd(arg1 context.Context, arg2 string, arg3 interface{}) *redisa.BoolCmd {
	fake.bFAddMutex.Lock()
	ret, specificReturn := fake.bFAddReturnsOnCall[len(fake.bFAddArgsForCall)]
	fake.bFAddArgsForCall = append(fake.bFAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.BFAddStub
	fakeReturns := fake.bFAddReturns
	fake.recordInvocation("BFAdd", []interface{}{arg1, arg2, arg3})
	fake.bFAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFAddCallCount() int {
	fake.bFAddMutex.RLock()
	defer fake.bFAddMutex.RUnlock()
	return len(fake.bFAddArgsForCall)
}

func (fake *FakeCmdable) BFAddCalls(stub func(context.Context, string, interface{}) *redisa.BoolCmd) {
	fake.bFAddMutex.Lock()
	defer fake.bFAddMutex.Unlock()
	fake.BFAddStub = stub
}

func (fake *FakeCmdable) BFAddArgsForCall(i int) (context.Context, string, interface{}) {
	fake.bFAddMutex.RLock()
	defer fake.bFAddMutex.RUnlock()
	argsForCall := fake.bFAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BFAddReturns(result1 *redisa.BoolCmd) {
	fake.bFAddMutex.Lock()
	defer fake.bFAddMutex.Unlock()
	fake.BFAddStub = nil
	fake.bFAddReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) BFAddReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.bFAddMutex.Lock()
	defer fake.bFAddMutex.Unlock()
	fake.BFAddStub = nil
	if fake.bFAddReturnsOnCall == nil {
		fake.bFAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.bFAddReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) BFCard(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.bFCardMutex.Lock()
	ret, specificReturn := fake.bFCardReturnsOnCall[len(fake.bFCardArgsForCall)]
	fake.bFCardArgsForCall = append(fake.bFCardArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.BFCardStub
	fakeReturns := fake.bFCardReturns
	fake.recordInvocation("BFCard", []interface{}{arg1, arg2})
	fake.bFCardMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFCardCallCount() int {
	fake.bFCardMutex.RLock()
	defer fake.bFCardMutex.RUnlock()
	return len(fake.bFCardArgsForCall)
}

func (fake *FakeCmdable) BFCardCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.bFCardMutex.Lock()
	defer fake.bFCardMutex.Unlock()
	fake.BFCardStub = stub
}

func (fake *FakeCmdable) BFCardArgsForCall(i int) (context.Context, string) {
	fake.bFCardMutex.RLock()
	defer fake.bFCardMutex.RUnlock()
	argsForCall := fake.bFCardArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) BFCardReturns(result1 *redisa.IntCmd) {
	fake.bFCardMutex.Lock()
	defer fake.bFCardMutex.Unlock()
	fake.BFCardStub = nil
	fake.bFCardReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BFCardReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.bFCardMutex.Lock()
	defer fake.bFCardMutex.Unlock()
	fake.BFCardStub = nil
	if fake.bFCardReturnsOnCall == nil {
		fake.bFCardReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.bFCardReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BFExists(arg1 context.Context, arg2 string, arg3 interface{}) *redisa.BoolCmd {
	fake.bFExistsMutex.Lock()
	ret, specificReturn := fake.bFExistsReturnsOnCall[len(fake.bFExistsArgsForCall)]
	fake.bFExistsArgsForCall = append(fake.bFExistsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.BFExistsStub
	fakeReturns := fake.bFExistsReturns
	fake.recordInvocation("BFExists", []interface{}{arg1, arg2, arg3})
	fake.bFExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFExistsCallCount() int {
	fake.bFExistsMutex.RLock()
	defer fake.bFExistsMutex.RUnlock()
	return len(fake.bFExistsArgsForCall)
}

func (fake *FakeCmdable) BFExistsCalls(stub func(context.Context, string, interface{}) *redisa.BoolCmd) {
	fake.bFExistsMutex.Lock()
	defer fake.bFExistsMutex.Unlock()
	fake.BFExistsStub = stub
}

func (fake *FakeCmdable) BFExistsArgsForCall(i int) (context.Context, string, interface{}) {
	fake.bFExistsMutex.RLock()
	defer fake.bFExistsMutex.RUnlock()
	argsForCall := fake.bFExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BFExistsReturns(result1 *redisa.BoolCmd) {
	fake.bFExistsMutex.Lock()
	defer fake.bFExistsMutex.Unlock()
	fake.BFExistsStub = nil
	fake.bFExistsReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) BFExistsReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.bFExistsMutex.Lock()
	defer fake.bFExistsMutex.Unlock()
	fake.BFExistsStub = nil
	if fake.bFExistsReturnsOnCall == nil {
		fake.bFExistsReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.bFExistsReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfo(arg1 context.Context, arg2 string) *redisa.BFInfoCmd {
	fake.bFInfoMutex.Lock()
	ret, specificReturn := fake.bFInfoReturnsOnCall[len(fake.bFInfoArgsForCall)]
	fake.bFInfoArgsForCall = append(fake.bFInfoArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.BFInfoStub
	fakeReturns := fake.bFInfoReturns
	fake.recordInvocation("BFInfo", []interface{}{arg1, arg2})
	fake.bFInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFInfoCallCount() int {
	fake.bFInfoMutex.RLock()
	defer fake.bFInfoMutex.RUnlock()
	return len(fake.bFInfoArgsForCall)
}

func (fake *FakeCmdable) BFInfoCalls(stub func(context.Context, string) *redisa.BFInfoCmd) {
	fake.bFInfoMutex.Lock()
	defer fake.bFInfoMutex.Unlock()
	fake.BFInfoStub = stub
}

func (fake *FakeCmdable) BFInfoArgsForCall(i int) (context.Context, string) {
	fake.bFInfoMutex.RLock()
	defer fake.bFInfoMutex.RUnlock()
	argsForCall := fake.bFInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) BFInfoReturns(result1 *redisa.BFInfoCmd) {
	fake.bFInfoMutex.Lock()
	defer fake.bFInfoMutex.Unlock()
	fake.BFInfoStub = nil
	fake.bFInfoReturns = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoReturnsOnCall(i int, result1 *redisa.BFInfoCmd) {
	fake.bFInfoMutex.Lock()
	defer fake.bFInfoMutex.Unlock()
	fake.BFInfoStub = nil
	if fake.bFInfoReturnsOnCall == nil {
		fake.bFInfoReturnsOnCall = make(map[int]struct {
			result1 *redisa.BFInfoCmd
		})
	}
	fake.bFInfoReturnsOnCall[i] = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoArg(arg1 context.Context, arg2 string, arg3 string) *redisa.BFInfoCmd {
	fake.bFInfoArgMutex.Lock()
	ret, specificReturn := fake.bFInfoArgReturnsOnCall[len(fake.bFInfoArgArgsForCall)]
	fake.bFInfoArgArgsForCall = append(fake.bFInfoArgArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.BFInfoArgStub
	fakeReturns := fake.bFInfoArgReturns
	fake.recordInvocation("BFInfoArg", []interface{}{arg1, arg2, arg3})
	fake.bFInfoArgMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFInfoArgCallCount() int {
	fake.bFInfoArgMutex.RLock()
	defer fake.bFInfoArgMutex.RUnlock()
	return len(fake.bFInfoArgArgsForCall)
}

func (fake *FakeCmdable) BFInfoArgCalls(stub func(context.Context, string, string) *redisa.BFInfoCmd) {
	fake.bFInfoArgMutex.Lock()
	defer fake.bFInfoArgMutex.Unlock()
	fake.BFInfoArgStub = stub
}

func (fake *FakeCmdable) BFInfoArgArgsForCall(i int) (context.Context, string, string) {
	fake.bFInfoArgMutex.RLock()
	defer fake.bFInfoArgMutex.RUnlock()
	argsForCall := fake.bFInfoArgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BFInfoArgReturns(result1 *redisa.BFInfoCmd) {
	fake.bFInfoArgMutex.Lock()
	defer fake.bFInfoArgMutex.Unlock()
	fake.BFInfoArgStub = nil
	fake.bFInfoArgReturns = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoArgReturnsOnCall(i int, result1 *redisa.BFInfoCmd) {
	fake.bFInfoArgMutex.Lock()
	defer fake.bFInfoArgMutex.Unlock()
	fake.BFInfoArgStub = nil
	if fake.bFInfoArgReturnsOnCall == nil {
		fake.bFInfoArgReturnsOnCall = make(map[int]struct {
			result1 *redisa.BFInfoCmd
		})
	}
	fake.bFInfoArgReturnsOnCall[i] = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoCapacity(arg1 context.Context, arg2 string) *redisa.BFInfoCmd {
	fake.bFInfoCapacityMutex.Lock()
	ret, specificReturn := fake.bFInfoCapacityReturnsOnCall[len(fake.bFInfoCapacityArgsForCall)]
	fake.bFInfoCapacityArgsForCall = append(fake.bFInfoCapacityArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.BFInfoCapacityStub
	fakeReturns := fake.bFInfoCapacityReturns
	fake.recordInvocation("BFInfoCapacity", []interface{}{arg1, arg2})
	fake.bFInfoCapacityMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFInfoCapacityCallCount() int {
	fake.bFInfoCapacityMutex.RLock()
	defer fake.bFInfoCapacityMutex.RUnlock()
	return len(fake.bFInfoCapacityArgsForCall)
}

func (fake *FakeCmdable) BFInfoCapacityCalls(stub func(context.Context, string) *redisa.BFInfoCmd) {
	fake.bFInfoCapacityMutex.Lock()
	defer fake.bFInfoCapacityMutex.Unlock()
	fake.BFInfoCapacityStub = stub
}

func (fake *FakeCmdable) BFInfoCapacityArgsForCall(i int) (context.Context, string) {
	fake.bFInfoCapacityMutex.RLock()
	defer fake.bFInfoCapacityMutex.RUnlock()
	argsForCall := fake.bFInfoCapacityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) BFInfoCapacityReturns(result1 *redisa.BFInfoCmd) {
	fake.bFInfoCapacityMutex.Lock()
	defer fake.bFInfoCapacityMutex.Unlock()
	fake.BFInfoCapacityStub = nil
	fake.bFInfoCapacityReturns = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoCapacityReturnsOnCall(i int, result1 *redisa.BFInfoCmd) {
	fake.bFInfoCapacityMutex.Lock()
	defer fake.bFInfoCapacityMutex.Unlock()
	fake.BFInfoCapacityStub = nil
	if fake.bFInfoCapacityReturnsOnCall == nil {
		fake.bFInfoCapacityReturnsOnCall = make(map[int]struct {
			result1 *redisa.BFInfoCmd
		})
	}
	fake.bFInfoCapacityReturnsOnCall[i] = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoExpansion(arg1 context.Context, arg2 string) *redisa.BFInfoCmd {
	fake.bFInfoExpansionMutex.Lock()
	ret, specificReturn := fake.bFInfoExpansionReturnsOnCall[len(fake.bFInfoExpansionArgsForCall)]
	fake.bFInfoExpansionArgsForCall = append(fake.bFInfoExpansionArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.BFInfoExpansionStub
	fakeReturns := fake.bFInfoExpansionReturns
	fake.recordInvocation("BFInfoExpansion", []interface{}{arg1, arg2})
	fake.bFInfoExpansionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFInfoExpansionCallCount() int {
	fake.bFInfoExpansionMutex.RLock()
	defer fake.bFInfoExpansionMutex.RUnlock()
	return len(fake.bFInfoExpansionArgsForCall)
}

func (fake *FakeCmdable) BFInfoExpansionCalls(stub func(context.Context, string) *redisa.BFInfoCmd) {
	fake.bFInfoExpansionMutex.Lock()
	defer fake.bFInfoExpansionMutex.Unlock()
	fake.BFInfoExpansionStub = stub
}

func (fake *FakeCmdable) BFInfoExpansionArgsForCall(i int) (context.Context, string) {
	fake.bFInfoExpansionMutex.RLock()
	defer fake.bFInfoExpansionMutex.RUnlock()
	argsForCall := fake.bFInfoExpansionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) BFInfoExpansionReturns(result1 *redisa.BFInfoCmd) {
	fake.bFInfoExpansionMutex.Lock()
	defer fake.bFInfoExpansionMutex.Unlock()
	fake.BFInfoExpansionStub = nil
	fake.bFInfoExpansionReturns = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoExpansionReturnsOnCall(i int, result1 *redisa.BFInfoCmd) {
	fake.bFInfoExpansionMutex.Lock()
	defer fake.bFInfoExpansionMutex.Unlock()
	fake.BFInfoExpansionStub = nil
	if fake.bFInfoExpansionReturnsOnCall == nil {
		fake.bFInfoExpansionReturnsOnCall = make(map[int]struct {
			result1 *redisa.BFInfoCmd
		})
	}
	fake.bFInfoExpansionReturnsOnCall[i] = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoFilters(arg1 context.Context, arg2 string) *redisa.BFInfoCmd {
	fake.bFInfoFiltersMutex.Lock()
	ret, specificReturn := fake.bFInfoFiltersReturnsOnCall[len(fake.bFInfoFiltersArgsForCall)]
	fake.bFInfoFiltersArgsForCall = append(fake.bFInfoFiltersArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.BFInfoFiltersStub
	fakeReturns := fake.bFInfoFiltersReturns
	fake.recordInvocation("BFInfoFilters", []interface{}{arg1, arg2})
	fake.bFInfoFiltersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFInfoFiltersCallCount() int {
	fake.bFInfoFiltersMutex.RLock()
	defer fake.bFInfoFiltersMutex.RUnlock()
	return len(fake.bFInfoFiltersArgsForCall)
}

func (fake *FakeCmdable) BFInfoFiltersCalls(stub func(context.Context, string) *redisa.BFInfoCmd) {
	fake.bFInfoFiltersMutex.Lock()
	defer fake.bFInfoFiltersMutex.Unlock()
	fake.BFInfoFiltersStub = stub
}

func (fake *FakeCmdable) BFInfoFiltersArgsForCall(i int) (context.Context, string) {
	fake.bFInfoFiltersMutex.RLock()
	defer fake.bFInfoFiltersMutex.RUnlock()
	argsForCall := fake.bFInfoFiltersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) BFInfoFiltersReturns(result1 *redisa.BFInfoCmd) {
	fake.bFInfoFiltersMutex.Lock()
	defer fake.bFInfoFiltersMutex.Unlock()
	fake.BFInfoFiltersStub = nil
	fake.bFInfoFiltersReturns = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoFiltersReturnsOnCall(i int, result1 *redisa.BFInfoCmd) {
	fake.bFInfoFiltersMutex.Lock()
	defer fake.bFInfoFiltersMutex.Unlock()
	fake.BFInfoFiltersStub = nil
	if fake.bFInfoFiltersReturnsOnCall == nil {
		fake.bFInfoFiltersReturnsOnCall = make(map[int]struct {
			result1 *redisa.BFInfoCmd
		})
	}
	fake.bFInfoFiltersReturnsOnCall[i] = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoItems(arg1 context.Context, arg2 string) *redisa.BFInfoCmd {
	fake.bFInfoItemsMutex.Lock()
	ret, specificReturn := fake.bFInfoItemsReturnsOnCall[len(fake.bFInfoItemsArgsForCall)]
	fake.bFInfoItemsArgsForCall = append(fake.bFInfoItemsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.BFInfoItemsStub
	fakeReturns := fake.bFInfoItemsReturns
	fake.recordInvocation("BFInfoItems", []interface{}{arg1, arg2})
	fake.bFInfoItemsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFInfoItemsCallCount() int {
	fake.bFInfoItemsMutex.RLock()
	defer fake.bFInfoItemsMutex.RUnlock()
	return len(fake.bFInfoItemsArgsForCall)
}

func (fake *FakeCmdable) BFInfoItemsCalls(stub func(context.Context, string) *redisa.BFInfoCmd) {
	fake.bFInfoItemsMutex.Lock()
	defer fake.bFInfoItemsMutex.Unlock()
	fake.BFInfoItemsStub = stub
}

func (fake *FakeCmdable) BFInfoItemsArgsForCall(i int) (context.Context, string) {
	fake.bFInfoItemsMutex.RLock()
	defer fake.bFInfoItemsMutex.RUnlock()
	argsForCall := fake.bFInfoItemsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) BFInfoItemsReturns(result1 *redisa.BFInfoCmd) {
	fake.bFInfoItemsMutex.Lock()
	defer fake.bFInfoItemsMutex.Unlock()
	fake.BFInfoItemsStub = nil
	fake.bFInfoItemsReturns = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoItemsReturnsOnCall(i int, result1 *redisa.BFInfoCmd) {
	fake.bFInfoItemsMutex.Lock()
	defer fake.bFInfoItemsMutex.Unlock()
	fake.BFInfoItemsStub = nil
	if fake.bFInfoItemsReturnsOnCall == nil {
		fake.bFInfoItemsReturnsOnCall = make(map[int]struct {
			result1 *redisa.BFInfoCmd
		})
	}
	fake.bFInfoItemsReturnsOnCall[i] = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoSize(arg1 context.Context, arg2 string) *redisa.BFInfoCmd {
	fake.bFInfoSizeMutex.Lock()
	ret, specificReturn := fake.bFInfoSizeReturnsOnCall[len(fake.bFInfoSizeArgsForCall)]
	fake.bFInfoSizeArgsForCall = append(fake.bFInfoSizeArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.BFInfoSizeStub
	fakeReturns := fake.bFInfoSizeReturns
	fake.recordInvocation("BFInfoSize", []interface{}{arg1, arg2})
	fake.bFInfoSizeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFInfoSizeCallCount() int {
	fake.bFInfoSizeMutex.RLock()
	defer fake.bFInfoSizeMutex.RUnlock()
	return len(fake.bFInfoSizeArgsForCall)
}

func (fake *FakeCmdable) BFInfoSizeCalls(stub func(context.Context, string) *redisa.BFInfoCmd) {
	fake.bFInfoSizeMutex.Lock()
	defer fake.bFInfoSizeMutex.Unlock()
	fake.BFInfoSizeStub = stub
}

func (fake *FakeCmdable) BFInfoSizeArgsForCall(i int) (context.Context, string) {
	fake.bFInfoSizeMutex.RLock()
	defer fake.bFInfoSizeMutex.RUnlock()
	argsForCall := fake.bFInfoSizeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) BFInfoSizeReturns(result1 *redisa.BFInfoCmd) {
	fake.bFInfoSizeMutex.Lock()
	defer fake.bFInfoSizeMutex.Unlock()
	fake.BFInfoSizeStub = nil
	fake.bFInfoSizeReturns = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInfoSizeReturnsOnCall(i int, result1 *redisa.BFInfoCmd) {
	fake.bFInfoSizeMutex.Lock()
	defer fake.bFInfoSizeMutex.Unlock()
	fake.BFInfoSizeStub = nil
	if fake.bFInfoSizeReturnsOnCall == nil {
		fake.bFInfoSizeReturnsOnCall = make(map[int]struct {
			result1 *redisa.BFInfoCmd
		})
	}
	fake.bFInfoSizeReturnsOnCall[i] = struct {
		result1 *redisa.BFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) BFInsert(arg1 context.Context, arg2 string, arg3 *redisa.BFInsertOptions, arg4 ...interface{}) *redisa.BoolSliceCmd {
	fake.bFInsertMutex.Lock()
	ret, specificReturn := fake.bFInsertReturnsOnCall[len(fake.bFInsertArgsForCall)]
	fake.bFInsertArgsForCall = append(fake.bFInsertArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.BFInsertOptions
		arg4 []interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.BFInsertStub
	fakeReturns := fake.bFInsertReturns
	fake.recordInvocation("BFInsert", []interface{}{arg1, arg2, arg3, arg4})
	fake.bFInsertMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFInsertCallCount() int {
	fake.bFInsertMutex.RLock()
	defer fake.bFInsertMutex.RUnlock()
	return len(fake.bFInsertArgsForCall)
}

func (fake *FakeCmdable) BFInsertCalls(stub func(context.Context, string, *redisa.BFInsertOptions, ...interface{}) *redisa.BoolSliceCmd) {
	fake.bFInsertMutex.Lock()
	defer fake.bFInsertMutex.Unlock()
	fake.BFInsertStub = stub
}

func (fake *FakeCmdable) BFInsertArgsForCall(i int) (context.Context, string, *redisa.BFInsertOptions, []interface{}) {
	fake.bFInsertMutex.RLock()
	defer fake.bFInsertMutex.RUnlock()
	argsForCall := fake.bFInsertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) BFInsertReturns(result1 *redisa.BoolSliceCmd) {
	fake.bFInsertMutex.Lock()
	defer fake.bFInsertMutex.Unlock()
	fake.BFInsertStub = nil
	fake.bFInsertReturns = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BFInsertReturnsOnCall(i int, result1 *redisa.BoolSliceCmd) {
	fake.bFInsertMutex.Lock()
	defer fake.bFInsertMutex.Unlock()
	fake.BFInsertStub = nil
	if fake.bFInsertReturnsOnCall == nil {
		fake.bFInsertReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolSliceCmd
		})
	}
	fake.bFInsertReturnsOnCall[i] = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BFLoadChunk(arg1 context.Context, arg2 string, arg3 int64, arg4 interface{}) *redisa.StatusCmd {
	fake.bFLoadChunkMutex.Lock()
	ret, specificReturn := fake.bFLoadChunkReturnsOnCall[len(fake.bFLoadChunkArgsForCall)]
	fake.bFLoadChunkArgsForCall = append(fake.bFLoadChunkArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.BFLoadChunkStub
	fakeReturns := fake.bFLoadChunkReturns
	fake.recordInvocation("BFLoadChunk", []interface{}{arg1, arg2, arg3, arg4})
	fake.bFLoadChunkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFLoadChunkCallCount() int {
	fake.bFLoadChunkMutex.RLock()
	defer fake.bFLoadChunkMutex.RUnlock()
	return len(fake.bFLoadChunkArgsForCall)
}

func (fake *FakeCmdable) BFLoadChunkCalls(stub func(context.Context, string, int64, interface{}) *redisa.StatusCmd) {
	fake.bFLoadChunkMutex.Lock()
	defer fake.bFLoadChunkMutex.Unlock()
	fake.BFLoadChunkStub = stub
}

func (fake *FakeCmdable) BFLoadChunkArgsForCall(i int) (context.Context, string, int64, interface{}) {
	fake.bFLoadChunkMutex.RLock()
	defer fake.bFLoadChunkMutex.RUnlock()
	argsForCall := fake.bFLoadChunkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) BFLoadChunkReturns(result1 *redisa.StatusCmd) {
	fake.bFLoadChunkMutex.Lock()
	defer fake.bFLoadChunkMutex.Unlock()
	fake.BFLoadChunkStub = nil
	fake.bFLoadChunkReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BFLoadChunkReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.bFLoadChunkMutex.Lock()
	defer fake.bFLoadChunkMutex.Unlock()
	fake.BFLoadChunkStub = nil
	if fake.bFLoadChunkReturnsOnCall == nil {
		fake.bFLoadChunkReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.bFLoadChunkReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BFMAdd(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.BoolSliceCmd {
	fake.bFMAddMutex.Lock()
	ret, specificReturn := fake.bFMAddReturnsOnCall[len(fake.bFMAddArgsForCall)]
	fake.bFMAddArgsForCall = append(fake.bFMAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.BFMAddStub
	fakeReturns := fake.bFMAddReturns
	fake.recordInvocation("BFMAdd", []interface{}{arg1, arg2, arg3})
	fake.bFMAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFMAddCallCount() int {
	fake.bFMAddMutex.RLock()
	defer fake.bFMAddMutex.RUnlock()
	return len(fake.bFMAddArgsForCall)
}

func (fake *FakeCmdable) BFMAddCalls(stub func(context.Context, string, ...interface{}) *redisa.BoolSliceCmd) {
	fake.bFMAddMutex.Lock()
	defer fake.bFMAddMutex.Unlock()
	fake.BFMAddStub = stub
}

func (fake *FakeCmdable) BFMAddArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.bFMAddMutex.RLock()
	defer fake.bFMAddMutex.RUnlock()
	argsForCall := fake.bFMAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BFMAddReturns(result1 *redisa.BoolSliceCmd) {
	fake.bFMAddMutex.Lock()
	defer fake.bFMAddMutex.Unlock()
	fake.BFMAddStub = nil
	fake.bFMAddReturns = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BFMAddReturnsOnCall(i int, result1 *redisa.BoolSliceCmd) {
	fake.bFMAddMutex.Lock()
	defer fake.bFMAddMutex.Unlock()
	fake.BFMAddStub = nil
	if fake.bFMAddReturnsOnCall == nil {
		fake.bFMAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolSliceCmd
		})
	}
	fake.bFMAddReturnsOnCall[i] = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BFMExists(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.BoolSliceCmd {
	fake.bFMExistsMutex.Lock()
	ret, specificReturn := fake.bFMExistsReturnsOnCall[len(fake.bFMExistsArgsForCall)]
	fake.bFMExistsArgsForCall = append(fake.bFMExistsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.BFMExistsStub
	fakeReturns := fake.bFMExistsReturns
	fake.recordInvocation("BFMExists", []interface{}{arg1, arg2, arg3})
	fake.bFMExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFMExistsCallCount() int {
	fake.bFMExistsMutex.RLock()
	defer fake.bFMExistsMutex.RUnlock()
	return len(fake.bFMExistsArgsForCall)
}

func (fake *FakeCmdable) BFMExistsCalls(stub func(context.Context, string, ...interface{}) *redisa.BoolSliceCmd) {
	fake.bFMExistsMutex.Lock()
	defer fake.bFMExistsMutex.Unlock()
	fake.BFMExistsStub = stub
}

func (fake *FakeCmdable) BFMExistsArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.bFMExistsMutex.RLock()
	defer fake.bFMExistsMutex.RUnlock()
	argsForCall := fake.bFMExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BFMExistsReturns(result1 *redisa.BoolSliceCmd) {
	fake.bFMExistsMutex.Lock()
	defer fake.bFMExistsMutex.Unlock()
	fake.BFMExistsStub = nil
	fake.bFMExistsReturns = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BFMExistsReturnsOnCall(i int, result1 *redisa.BoolSliceCmd) {
	fake.bFMExistsMutex.Lock()
	defer fake.bFMExistsMutex.Unlock()
	fake.BFMExistsStub = nil
	if fake.bFMExistsReturnsOnCall == nil {
		fake.bFMExistsReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolSliceCmd
		})
	}
	fake.bFMExistsReturnsOnCall[i] = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BFReserve(arg1 context.Context, arg2 string, arg3 float64, arg4 int64) *redisa.StatusCmd {
	fake.bFReserveMutex.Lock()
	ret, specificReturn := fake.bFReserveReturnsOnCall[len(fake.bFReserveArgsForCall)]
	fake.bFReserveArgsForCall = append(fake.bFReserveArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.BFReserveStub
	fakeReturns := fake.bFReserveReturns
	fake.recordInvocation("BFReserve", []interface{}{arg1, arg2, arg3, arg4})
	fake.bFReserveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFReserveCallCount() int {
	fake.bFReserveMutex.RLock()
	defer fake.bFReserveMutex.RUnlock()
	return len(fake.bFReserveArgsForCall)
}

func (fake *FakeCmdable) BFReserveCalls(stub func(context.Context, string, float64, int64) *redisa.StatusCmd) {
	fake.bFReserveMutex.Lock()
	defer fake.bFReserveMutex.Unlock()
	fake.BFReserveStub = stub
}

func (fake *FakeCmdable) BFReserveArgsForCall(i int) (context.Context, string, float64, int64) {
	fake.bFReserveMutex.RLock()
	defer fake.bFReserveMutex.RUnlock()
	argsForCall := fake.bFReserveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) BFReserveReturns(result1 *redisa.StatusCmd) {
	fake.bFReserveMutex.Lock()
	defer fake.bFReserveMutex.Unlock()
	fake.BFReserveStub = nil
	fake.bFReserveReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BFReserveReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.bFReserveMutex.Lock()
	defer fake.bFReserveMutex.Unlock()
	fake.BFReserveStub = nil
	if fake.bFReserveReturnsOnCall == nil {
		fake.bFReserveReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.bFReserveReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BFReserveExpansion(arg1 context.Context, arg2 string, arg3 float64, arg4 int64, arg5 int64) *redisa.StatusCmd {
	fake.bFReserveExpansionMutex.Lock()
	ret, specificReturn := fake.bFReserveExpansionReturnsOnCall[len(fake.bFReserveExpansionArgsForCall)]
	fake.bFReserveExpansionArgsForCall = append(fake.bFReserveExpansionArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 int64
		arg5 int64
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.BFReserveExpansionStub
	fakeReturns := fake.bFReserveExpansionReturns
	fake.recordInvocation("BFReserveExpansion", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.bFReserveExpansionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFReserveExpansionCallCount() int {
	fake.bFReserveExpansionMutex.RLock()
	defer fake.bFReserveExpansionMutex.RUnlock()
	return len(fake.bFReserveExpansionArgsForCall)
}

func (fake *FakeCmdable) BFReserveExpansionCalls(stub func(context.Context, string, float64, int64, int64) *redisa.StatusCmd) {
	fake.bFReserveExpansionMutex.Lock()
	defer fake.bFReserveExpansionMutex.Unlock()
	fake.BFReserveExpansionStub = stub
}

func (fake *FakeCmdable) BFReserveExpansionArgsForCall(i int) (context.Context, string, float64, int64, int64) {
	fake.bFReserveExpansionMutex.RLock()
	defer fake.bFReserveExpansionMutex.RUnlock()
	argsForCall := fake.bFReserveExpansionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) BFReserveExpansionReturns(result1 *redisa.StatusCmd) {
	fake.bFReserveExpansionMutex.Lock()
	defer fake.bFReserveExpansionMutex.Unlock()
	fake.BFReserveExpansionStub = nil
	fake.bFReserveExpansionReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BFReserveExpansionReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.bFReserveExpansionMutex.Lock()
	defer fake.bFReserveExpansionMutex.Unlock()
	fake.BFReserveExpansionStub = nil
	if fake.bFReserveExpansionReturnsOnCall == nil {
		fake.bFReserveExpansionReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.bFReserveExpansionReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BFReserveNonScaling(arg1 context.Context, arg2 string, arg3 float64, arg4 int64) *redisa.StatusCmd {
	fake.bFReserveNonScalingMutex.Lock()
	ret, specificReturn := fake.bFReserveNonScalingReturnsOnCall[len(fake.bFReserveNonScalingArgsForCall)]
	fake.bFReserveNonScalingArgsForCall = append(fake.bFReserveNonScalingArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.BFReserveNonScalingStub
	fakeReturns := fake.bFReserveNonScalingReturns
	fake.recordInvocation("BFReserveNonScaling", []interface{}{arg1, arg2, arg3, arg4})
	fake.bFReserveNonScalingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFReserveNonScalingCallCount() int {
	fake.bFReserveNonScalingMutex.RLock()
	defer fake.bFReserveNonScalingMutex.RUnlock()
	return len(fake.bFReserveNonScalingArgsForCall)
}

func (fake *FakeCmdable) BFReserveNonScalingCalls(stub func(context.Context, string, float64, int64) *redisa.StatusCmd) {
	fake.bFReserveNonScalingMutex.Lock()
	defer fake.bFReserveNonScalingMutex.Unlock()
	fake.BFReserveNonScalingStub = stub
}

func (fake *FakeCmdable) BFReserveNonScalingArgsForCall(i int) (context.Context, string, float64, int64) {
	fake.bFReserveNonScalingMutex.RLock()
	defer fake.bFReserveNonScalingMutex.RUnlock()
	argsForCall := fake.bFReserveNonScalingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) BFReserveNonScalingReturns(result1 *redisa.StatusCmd) {
	fake.bFReserveNonScalingMutex.Lock()
	defer fake.bFReserveNonScalingMutex.Unlock()
	fake.BFReserveNonScalingStub = nil
	fake.bFReserveNonScalingReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BFReserveNonScalingReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.bFReserveNonScalingMutex.Lock()
	defer fake.bFReserveNonScalingMutex.Unlock()
	fake.BFReserveNonScalingStub = nil
	if fake.bFReserveNonScalingReturnsOnCall == nil {
		fake.bFReserveNonScalingReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.bFReserveNonScalingReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BFReserveWithArgs(arg1 context.Context, arg2 string, arg3 *redisa.BFReserveOptions) *redisa.StatusCmd {
	fake.bFReserveWithArgsMutex.Lock()
	ret, specificReturn := fake.bFReserveWithArgsReturnsOnCall[len(fake.bFReserveWithArgsArgsForCall)]
	fake.bFReserveWithArgsArgsForCall = append(fake.bFReserveWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.BFReserveOptions
	}{arg1, arg2, arg3})
	stub := fake.BFReserveWithArgsStub
	fakeReturns := fake.bFReserveWithArgsReturns
	fake.recordInvocation("BFReserveWithArgs", []interface{}{arg1, arg2, arg3})
	fake.bFReserveWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFReserveWithArgsCallCount() int {
	fake.bFReserveWithArgsMutex.RLock()
	defer fake.bFReserveWithArgsMutex.RUnlock()
	return len(fake.bFReserveWithArgsArgsForCall)
}

func (fake *FakeCmdable) BFReserveWithArgsCalls(stub func(context.Context, string, *redisa.BFReserveOptions) *redisa.StatusCmd) {
	fake.bFReserveWithArgsMutex.Lock()
	defer fake.bFReserveWithArgsMutex.Unlock()
	fake.BFReserveWithArgsStub = stub
}

func (fake *FakeCmdable) BFReserveWithArgsArgsForCall(i int) (context.Context, string, *redisa.BFReserveOptions) {
	fake.bFReserveWithArgsMutex.RLock()
	defer fake.bFReserveWithArgsMutex.RUnlock()
	argsForCall := fake.bFReserveWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BFReserveWithArgsReturns(result1 *redisa.StatusCmd) {
	fake.bFReserveWithArgsMutex.Lock()
	defer fake.bFReserveWithArgsMutex.Unlock()
	fake.BFReserveWithArgsStub = nil
	fake.bFReserveWithArgsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BFReserveWithArgsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.bFReserveWithArgsMutex.Lock()
	defer fake.bFReserveWithArgsMutex.Unlock()
	fake.BFReserveWithArgsStub = nil
	if fake.bFReserveWithArgsReturnsOnCall == nil {
		fake.bFReserveWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.bFReserveWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BFScanDump(arg1 context.Context, arg2 string, arg3 int64) *redisa.ScanDumpCmd {
	fake.bFScanDumpMutex.Lock()
	ret, specificReturn := fake.bFScanDumpReturnsOnCall[len(fake.bFScanDumpArgsForCall)]
	fake.bFScanDumpArgsForCall = append(fake.bFScanDumpArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.BFScanDumpStub
	fakeReturns := fake.bFScanDumpReturns
	fake.recordInvocation("BFScanDump", []interface{}{arg1, arg2, arg3})
	fake.bFScanDumpMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BFScanDumpCallCount() int {
	fake.bFScanDumpMutex.RLock()
	defer fake.bFScanDumpMutex.RUnlock()
	return len(fake.bFScanDumpArgsForCall)
}

func (fake *FakeCmdable) BFScanDumpCalls(stub func(context.Context, string, int64) *redisa.ScanDumpCmd) {
	fake.bFScanDumpMutex.Lock()
	defer fake.bFScanDumpMutex.Unlock()
	fake.BFScanDumpStub = stub
}

func (fake *FakeCmdable) BFScanDumpArgsForCall(i int) (context.Context, string, int64) {
	fake.bFScanDumpMutex.RLock()
	defer fake.bFScanDumpMutex.RUnlock()
	argsForCall := fake.bFScanDumpArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BFScanDumpReturns(result1 *redisa.ScanDumpCmd) {
	fake.bFScanDumpMutex.Lock()
	defer fake.bFScanDumpMutex.Unlock()
	fake.BFScanDumpStub = nil
	fake.bFScanDumpReturns = struct {
		result1 *redisa.ScanDumpCmd
	}{result1}
}

func (fake *FakeCmdable) BFScanDumpReturnsOnCall(i int, result1 *redisa.ScanDumpCmd) {
	fake.bFScanDumpMutex.Lock()
	defer fake.bFScanDumpMutex.Unlock()
	fake.BFScanDumpStub = nil
	if fake.bFScanDumpReturnsOnCall == nil {
		fake.bFScanDumpReturnsOnCall = make(map[int]struct {
			result1 *redisa.ScanDumpCmd
		})
	}
	fake.bFScanDumpReturnsOnCall[i] = struct {
		result1 *redisa.ScanDumpCmd
	}{result1}
}

func (fake *FakeCmdable) BLMPop(arg1 context.Context, arg2 time.Duration, arg3 string, arg4 int64, arg5 ...string) *redisa.KeyValuesCmd {
	fake.bLMPopMutex.Lock()
	ret, specificReturn := fake.bLMPopReturnsOnCall[len(fake.bLMPopArgsForCall)]
	fake.bLMPopArgsForCall = append(fake.bLMPopArgsForCall, struct {
		arg1 context.Context
		arg2 time.Duration
		arg3 string
		arg4 int64
		arg5 []string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.BLMPopStub
	fakeReturns := fake.bLMPopReturns
	fake.recordInvocation("BLMPop", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.bLMPopMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BLMPopCallCount() int {
	fake.bLMPopMutex.RLock()
	defer fake.bLMPopMutex.RUnlock()
	return len(fake.bLMPopArgsForCall)
}

func (fake *FakeCmdable) BLMPopCalls(stub func(context.Context, time.Duration, string, int64, ...string) *redisa.KeyValuesCmd) {
	fake.bLMPopMutex.Lock()
	defer fake.bLMPopMutex.Unlock()
	fake.BLMPopStub = stub
}

func (fake *FakeCmdable) BLMPopArgsForCall(i int) (context.Context, time.Duration, string, int64, []string) {
	fake.bLMPopMutex.RLock()
	defer fake.bLMPopMutex.RUnlock()
	argsForCall := fake.bLMPopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) BLMPopReturns(result1 *redisa.KeyValuesCmd) {
	fake.bLMPopMutex.Lock()
	defer fake.bLMPopMutex.Unlock()
	fake.BLMPopStub = nil
	fake.bLMPopReturns = struct {
		result1 *redisa.KeyValuesCmd
	}{result1}
}

func (fake *FakeCmdable) BLMPopReturnsOnCall(i int, result1 *redisa.KeyValuesCmd) {
	fake.bLMPopMutex.Lock()
	defer fake.bLMPopMutex.Unlock()
	fake.BLMPopStub = nil
	if fake.bLMPopReturnsOnCall == nil {
		fake.bLMPopReturnsOnCall = make(map[int]struct {
			result1 *redisa.KeyValuesCmd
		})
	}
	fake.bLMPopReturnsOnCall[i] = struct {
		result1 *redisa.KeyValuesCmd
	}{result1}
}

func (fake *FakeCmdable) BLMove(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 string, arg6 time.Duration) *redisa.StringCmd {
	fake.bLMoveMutex.Lock()
	ret, specificReturn := fake.bLMoveReturnsOnCall[len(fake.bLMoveArgsForCall)]
	fake.bLMoveArgsForCall = append(fake.bLMoveArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 time.Duration
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.BLMoveStub
	fakeReturns := fake.bLMoveReturns
	fake.recordInvocation("BLMove", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.bLMoveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BLMoveCallCount() int {
	fake.bLMoveMutex.RLock()
	defer fake.bLMoveMutex.RUnlock()
	return len(fake.bLMoveArgsForCall)
}

func (fake *FakeCmdable) BLMoveCalls(stub func(context.Context, string, string, string, string, time.Duration) *redisa.StringCmd) {
	fake.bLMoveMutex.Lock()
	defer fake.bLMoveMutex.Unlock()
	fake.BLMoveStub = stub
}

func (fake *FakeCmdable) BLMoveArgsForCall(i int) (context.Context, string, string, string, string, time.Duration) {
	fake.bLMoveMutex.RLock()
	defer fake.bLMoveMutex.RUnlock()
	argsForCall := fake.bLMoveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeCmdable) BLMoveReturns(result1 *redisa.StringCmd) {
	fake.bLMoveMutex.Lock()
	defer fake.bLMoveMutex.Unlock()
	fake.BLMoveStub = nil
	fake.bLMoveReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) BLMoveReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.bLMoveMutex.Lock()
	defer fake.bLMoveMutex.Unlock()
	fake.BLMoveStub = nil
	if fake.bLMoveReturnsOnCall == nil {
		fake.bLMoveReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.bLMoveReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) BLPop(arg1 context.Context, arg2 time.Duration, arg3 ...string) *redisa.StringSliceCmd {
	fake.bLPopMutex.Lock()
	ret, specificReturn := fake.bLPopReturnsOnCall[len(fake.bLPopArgsForCall)]
	fake.bLPopArgsForCall = append(fake.bLPopArgsForCall, struct {
		arg1 context.Context
		arg2 time.Duration
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.BLPopStub
	fakeReturns := fake.bLPopReturns
	fake.recordInvocation("BLPop", []interface{}{arg1, arg2, arg3})
	fake.bLPopMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BLPopCallCount() int {
	fake.bLPopMutex.RLock()
	defer fake.bLPopMutex.RUnlock()
	return len(fake.bLPopArgsForCall)
}

func (fake *FakeCmdable) BLPopCalls(stub func(context.Context, time.Duration, ...string) *redisa.StringSliceCmd) {
	fake.bLPopMutex.Lock()
	defer fake.bLPopMutex.Unlock()
	fake.BLPopStub = stub
}

func (fake *FakeCmdable) BLPopArgsForCall(i int) (context.Context, time.Duration, []string) {
	fake.bLPopMutex.RLock()
	defer fake.bLPopMutex.RUnlock()
	argsForCall := fake.bLPopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BLPopReturns(result1 *redisa.StringSliceCmd) {
	fake.bLPopMutex.Lock()
	defer fake.bLPopMutex.Unlock()
	fake.BLPopStub = nil
	fake.bLPopReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BLPopReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.bLPopMutex.Lock()
	defer fake.bLPopMutex.Unlock()
	fake.BLPopStub = nil
	if fake.bLPopReturnsOnCall == nil {
		fake.bLPopReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.bLPopReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BRPop(arg1 context.Context, arg2 time.Duration, arg3 ...string) *redisa.StringSliceCmd {
	fake.bRPopMutex.Lock()
	ret, specificReturn := fake.bRPopReturnsOnCall[len(fake.bRPopArgsForCall)]
	fake.bRPopArgsForCall = append(fake.bRPopArgsForCall, struct {
		arg1 context.Context
		arg2 time.Duration
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.BRPopStub
	fakeReturns := fake.bRPopReturns
	fake.recordInvocation("BRPop", []interface{}{arg1, arg2, arg3})
	fake.bRPopMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BRPopCallCount() int {
	fake.bRPopMutex.RLock()
	defer fake.bRPopMutex.RUnlock()
	return len(fake.bRPopArgsForCall)
}

func (fake *FakeCmdable) BRPopCalls(stub func(context.Context, time.Duration, ...string) *redisa.StringSliceCmd) {
	fake.bRPopMutex.Lock()
	defer fake.bRPopMutex.Unlock()
	fake.BRPopStub = stub
}

func (fake *FakeCmdable) BRPopArgsForCall(i int) (context.Context, time.Duration, []string) {
	fake.bRPopMutex.RLock()
	defer fake.bRPopMutex.RUnlock()
	argsForCall := fake.bRPopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BRPopReturns(result1 *redisa.StringSliceCmd) {
	fake.bRPopMutex.Lock()
	defer fake.bRPopMutex.Unlock()
	fake.BRPopStub = nil
	fake.bRPopReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BRPopReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.bRPopMutex.Lock()
	defer fake.bRPopMutex.Unlock()
	fake.BRPopStub = nil
	if fake.bRPopReturnsOnCall == nil {
		fake.bRPopReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.bRPopReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BRPopLPush(arg1 context.Context, arg2 string, arg3 string, arg4 time.Duration) *redisa.StringCmd {
	fake.bRPopLPushMutex.Lock()
	ret, specificReturn := fake.bRPopLPushReturnsOnCall[len(fake.bRPopLPushArgsForCall)]
	fake.bRPopLPushArgsForCall = append(fake.bRPopLPushArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 time.Duration
	}{arg1, arg2, arg3, arg4})
	stub := fake.BRPopLPushStub
	fakeReturns := fake.bRPopLPushReturns
	fake.recordInvocation("BRPopLPush", []interface{}{arg1, arg2, arg3, arg4})
	fake.bRPopLPushMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BRPopLPushCallCount() int {
	fake.bRPopLPushMutex.RLock()
	defer fake.bRPopLPushMutex.RUnlock()
	return len(fake.bRPopLPushArgsForCall)
}

func (fake *FakeCmdable) BRPopLPushCalls(stub func(context.Context, string, string, time.Duration) *redisa.StringCmd) {
	fake.bRPopLPushMutex.Lock()
	defer fake.bRPopLPushMutex.Unlock()
	fake.BRPopLPushStub = stub
}

func (fake *FakeCmdable) BRPopLPushArgsForCall(i int) (context.Context, string, string, time.Duration) {
	fake.bRPopLPushMutex.RLock()
	defer fake.bRPopLPushMutex.RUnlock()
	argsForCall := fake.bRPopLPushArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) BRPopLPushReturns(result1 *redisa.StringCmd) {
	fake.bRPopLPushMutex.Lock()
	defer fake.bRPopLPushMutex.Unlock()
	fake.BRPopLPushStub = nil
	fake.bRPopLPushReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) BRPopLPushReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.bRPopLPushMutex.Lock()
	defer fake.bRPopLPushMutex.Unlock()
	fake.BRPopLPushStub = nil
	if fake.bRPopLPushReturnsOnCall == nil {
		fake.bRPopLPushReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.bRPopLPushReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) BZMPop(arg1 context.Context, arg2 time.Duration, arg3 string, arg4 int64, arg5 ...string) *redisa.ZSliceWithKeyCmd {
	fake.bZMPopMutex.Lock()
	ret, specificReturn := fake.bZMPopReturnsOnCall[len(fake.bZMPopArgsForCall)]
	fake.bZMPopArgsForCall = append(fake.bZMPopArgsForCall, struct {
		arg1 context.Context
		arg2 time.Duration
		arg3 string
		arg4 int64
		arg5 []string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.BZMPopStub
	fakeReturns := fake.bZMPopReturns
	fake.recordInvocation("BZMPop", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.bZMPopMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BZMPopCallCount() int {
	fake.bZMPopMutex.RLock()
	defer fake.bZMPopMutex.RUnlock()
	return len(fake.bZMPopArgsForCall)
}

func (fake *FakeCmdable) BZMPopCalls(stub func(context.Context, time.Duration, string, int64, ...string) *redisa.ZSliceWithKeyCmd) {
	fake.bZMPopMutex.Lock()
	defer fake.bZMPopMutex.Unlock()
	fake.BZMPopStub = stub
}

func (fake *FakeCmdable) BZMPopArgsForCall(i int) (context.Context, time.Duration, string, int64, []string) {
	fake.bZMPopMutex.RLock()
	defer fake.bZMPopMutex.RUnlock()
	argsForCall := fake.bZMPopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) BZMPopReturns(result1 *redisa.ZSliceWithKeyCmd) {
	fake.bZMPopMutex.Lock()
	defer fake.bZMPopMutex.Unlock()
	fake.BZMPopStub = nil
	fake.bZMPopReturns = struct {
		result1 *redisa.ZSliceWithKeyCmd
	}{result1}
}

func (fake *FakeCmdable) BZMPopReturnsOnCall(i int, result1 *redisa.ZSliceWithKeyCmd) {
	fake.bZMPopMutex.Lock()
	defer fake.bZMPopMutex.Unlock()
	fake.BZMPopStub = nil
	if fake.bZMPopReturnsOnCall == nil {
		fake.bZMPopReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceWithKeyCmd
		})
	}
	fake.bZMPopReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceWithKeyCmd
	}{result1}
}

func (fake *FakeCmdable) BZPopMax(arg1 context.Context, arg2 time.Duration, arg3 ...string) *redisa.ZWithKeyCmd {
	fake.bZPopMaxMutex.Lock()
	ret, specificReturn := fake.bZPopMaxReturnsOnCall[len(fake.bZPopMaxArgsForCall)]
	fake.bZPopMaxArgsForCall = append(fake.bZPopMaxArgsForCall, struct {
		arg1 context.Context
		arg2 time.Duration
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.BZPopMaxStub
	fakeReturns := fake.bZPopMaxReturns
	fake.recordInvocation("BZPopMax", []interface{}{arg1, arg2, arg3})
	fake.bZPopMaxMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BZPopMaxCallCount() int {
	fake.bZPopMaxMutex.RLock()
	defer fake.bZPopMaxMutex.RUnlock()
	return len(fake.bZPopMaxArgsForCall)
}

func (fake *FakeCmdable) BZPopMaxCalls(stub func(context.Context, time.Duration, ...string) *redisa.ZWithKeyCmd) {
	fake.bZPopMaxMutex.Lock()
	defer fake.bZPopMaxMutex.Unlock()
	fake.BZPopMaxStub = stub
}

func (fake *FakeCmdable) BZPopMaxArgsForCall(i int) (context.Context, time.Duration, []string) {
	fake.bZPopMaxMutex.RLock()
	defer fake.bZPopMaxMutex.RUnlock()
	argsForCall := fake.bZPopMaxArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BZPopMaxReturns(result1 *redisa.ZWithKeyCmd) {
	fake.bZPopMaxMutex.Lock()
	defer fake.bZPopMaxMutex.Unlock()
	fake.BZPopMaxStub = nil
	fake.bZPopMaxReturns = struct {
		result1 *redisa.ZWithKeyCmd
	}{result1}
}

func (fake *FakeCmdable) BZPopMaxReturnsOnCall(i int, result1 *redisa.ZWithKeyCmd) {
	fake.bZPopMaxMutex.Lock()
	defer fake.bZPopMaxMutex.Unlock()
	fake.BZPopMaxStub = nil
	if fake.bZPopMaxReturnsOnCall == nil {
		fake.bZPopMaxReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZWithKeyCmd
		})
	}
	fake.bZPopMaxReturnsOnCall[i] = struct {
		result1 *redisa.ZWithKeyCmd
	}{result1}
}

func (fake *FakeCmdable) BZPopMin(arg1 context.Context, arg2 time.Duration, arg3 ...string) *redisa.ZWithKeyCmd {
	fake.bZPopMinMutex.Lock()
	ret, specificReturn := fake.bZPopMinReturnsOnCall[len(fake.bZPopMinArgsForCall)]
	fake.bZPopMinArgsForCall = append(fake.bZPopMinArgsForCall, struct {
		arg1 context.Context
		arg2 time.Duration
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.BZPopMinStub
	fakeReturns := fake.bZPopMinReturns
	fake.recordInvocation("BZPopMin", []interface{}{arg1, arg2, arg3})
	fake.bZPopMinMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BZPopMinCallCount() int {
	fake.bZPopMinMutex.RLock()
	defer fake.bZPopMinMutex.RUnlock()
	return len(fake.bZPopMinArgsForCall)
}

func (fake *FakeCmdable) BZPopMinCalls(stub func(context.Context, time.Duration, ...string) *redisa.ZWithKeyCmd) {
	fake.bZPopMinMutex.Lock()
	defer fake.bZPopMinMutex.Unlock()
	fake.BZPopMinStub = stub
}

func (fake *FakeCmdable) BZPopMinArgsForCall(i int) (context.Context, time.Duration, []string) {
	fake.bZPopMinMutex.RLock()
	defer fake.bZPopMinMutex.RUnlock()
	argsForCall := fake.bZPopMinArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BZPopMinReturns(result1 *redisa.ZWithKeyCmd) {
	fake.bZPopMinMutex.Lock()
	defer fake.bZPopMinMutex.Unlock()
	fake.BZPopMinStub = nil
	fake.bZPopMinReturns = struct {
		result1 *redisa.ZWithKeyCmd
	}{result1}
}

func (fake *FakeCmdable) BZPopMinReturnsOnCall(i int, result1 *redisa.ZWithKeyCmd) {
	fake.bZPopMinMutex.Lock()
	defer fake.bZPopMinMutex.Unlock()
	fake.BZPopMinStub = nil
	if fake.bZPopMinReturnsOnCall == nil {
		fake.bZPopMinReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZWithKeyCmd
		})
	}
	fake.bZPopMinReturnsOnCall[i] = struct {
		result1 *redisa.ZWithKeyCmd
	}{result1}
}

func (fake *FakeCmdable) BgRewriteAOF(arg1 context.Context) *redisa.StatusCmd {
	fake.bgRewriteAOFMutex.Lock()
	ret, specificReturn := fake.bgRewriteAOFReturnsOnCall[len(fake.bgRewriteAOFArgsForCall)]
	fake.bgRewriteAOFArgsForCall = append(fake.bgRewriteAOFArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.BgRewriteAOFStub
	fakeReturns := fake.bgRewriteAOFReturns
	fake.recordInvocation("BgRewriteAOF", []interface{}{arg1})
	fake.bgRewriteAOFMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BgRewriteAOFCallCount() int {
	fake.bgRewriteAOFMutex.RLock()
	defer fake.bgRewriteAOFMutex.RUnlock()
	return len(fake.bgRewriteAOFArgsForCall)
}

func (fake *FakeCmdable) BgRewriteAOFCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.bgRewriteAOFMutex.Lock()
	defer fake.bgRewriteAOFMutex.Unlock()
	fake.BgRewriteAOFStub = stub
}

func (fake *FakeCmdable) BgRewriteAOFArgsForCall(i int) context.Context {
	fake.bgRewriteAOFMutex.RLock()
	defer fake.bgRewriteAOFMutex.RUnlock()
	argsForCall := fake.bgRewriteAOFArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) BgRewriteAOFReturns(result1 *redisa.StatusCmd) {
	fake.bgRewriteAOFMutex.Lock()
	defer fake.bgRewriteAOFMutex.Unlock()
	fake.BgRewriteAOFStub = nil
	fake.bgRewriteAOFReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BgRewriteAOFReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.bgRewriteAOFMutex.Lock()
	defer fake.bgRewriteAOFMutex.Unlock()
	fake.BgRewriteAOFStub = nil
	if fake.bgRewriteAOFReturnsOnCall == nil {
		fake.bgRewriteAOFReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.bgRewriteAOFReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BgSave(arg1 context.Context) *redisa.StatusCmd {
	fake.bgSaveMutex.Lock()
	ret, specificReturn := fake.bgSaveReturnsOnCall[len(fake.bgSaveArgsForCall)]
	fake.bgSaveArgsForCall = append(fake.bgSaveArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.BgSaveStub
	fakeReturns := fake.bgSaveReturns
	fake.recordInvocation("BgSave", []interface{}{arg1})
	fake.bgSaveMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BgSaveCallCount() int {
	fake.bgSaveMutex.RLock()
	defer fake.bgSaveMutex.RUnlock()
	return len(fake.bgSaveArgsForCall)
}

func (fake *FakeCmdable) BgSaveCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.bgSaveMutex.Lock()
	defer fake.bgSaveMutex.Unlock()
	fake.BgSaveStub = stub
}

func (fake *FakeCmdable) BgSaveArgsForCall(i int) context.Context {
	fake.bgSaveMutex.RLock()
	defer fake.bgSaveMutex.RUnlock()
	argsForCall := fake.bgSaveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) BgSaveReturns(result1 *redisa.StatusCmd) {
	fake.bgSaveMutex.Lock()
	defer fake.bgSaveMutex.Unlock()
	fake.BgSaveStub = nil
	fake.bgSaveReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BgSaveReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.bgSaveMutex.Lock()
	defer fake.bgSaveMutex.Unlock()
	fake.BgSaveStub = nil
	if fake.bgSaveReturnsOnCall == nil {
		fake.bgSaveReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.bgSaveReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) BitCount(arg1 context.Context, arg2 string, arg3 *redisa.BitCount) *redisa.IntCmd {
	fake.bitCountMutex.Lock()
	ret, specificReturn := fake.bitCountReturnsOnCall[len(fake.bitCountArgsForCall)]
	fake.bitCountArgsForCall = append(fake.bitCountArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.BitCount
	}{arg1, arg2, arg3})
	stub := fake.BitCountStub
	fakeReturns := fake.bitCountReturns
	fake.recordInvocation("BitCount", []interface{}{arg1, arg2, arg3})
	fake.bitCountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BitCountCallCount() int {
	fake.bitCountMutex.RLock()
	defer fake.bitCountMutex.RUnlock()
	return len(fake.bitCountArgsForCall)
}

func (fake *FakeCmdable) BitCountCalls(stub func(context.Context, string, *redisa.BitCount) *redisa.IntCmd) {
	fake.bitCountMutex.Lock()
	defer fake.bitCountMutex.Unlock()
	fake.BitCountStub = stub
}

func (fake *FakeCmdable) BitCountArgsForCall(i int) (context.Context, string, *redisa.BitCount) {
	fake.bitCountMutex.RLock()
	defer fake.bitCountMutex.RUnlock()
	argsForCall := fake.bitCountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BitCountReturns(result1 *redisa.IntCmd) {
	fake.bitCountMutex.Lock()
	defer fake.bitCountMutex.Unlock()
	fake.BitCountStub = nil
	fake.bitCountReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitCountReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.bitCountMutex.Lock()
	defer fake.bitCountMutex.Unlock()
	fake.BitCountStub = nil
	if fake.bitCountReturnsOnCall == nil {
		fake.bitCountReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.bitCountReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitField(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntSliceCmd {
	fake.bitFieldMutex.Lock()
	ret, specificReturn := fake.bitFieldReturnsOnCall[len(fake.bitFieldArgsForCall)]
	fake.bitFieldArgsForCall = append(fake.bitFieldArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.BitFieldStub
	fakeReturns := fake.bitFieldReturns
	fake.recordInvocation("BitField", []interface{}{arg1, arg2, arg3})
	fake.bitFieldMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BitFieldCallCount() int {
	fake.bitFieldMutex.RLock()
	defer fake.bitFieldMutex.RUnlock()
	return len(fake.bitFieldArgsForCall)
}

func (fake *FakeCmdable) BitFieldCalls(stub func(context.Context, string, ...interface{}) *redisa.IntSliceCmd) {
	fake.bitFieldMutex.Lock()
	defer fake.bitFieldMutex.Unlock()
	fake.BitFieldStub = stub
}

func (fake *FakeCmdable) BitFieldArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.bitFieldMutex.RLock()
	defer fake.bitFieldMutex.RUnlock()
	argsForCall := fake.bitFieldArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BitFieldReturns(result1 *redisa.IntSliceCmd) {
	fake.bitFieldMutex.Lock()
	defer fake.bitFieldMutex.Unlock()
	fake.BitFieldStub = nil
	fake.bitFieldReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BitFieldReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.bitFieldMutex.Lock()
	defer fake.bitFieldMutex.Unlock()
	fake.BitFieldStub = nil
	if fake.bitFieldReturnsOnCall == nil {
		fake.bitFieldReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.bitFieldReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BitFieldRO(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntSliceCmd {
	fake.bitFieldROMutex.Lock()
	ret, specificReturn := fake.bitFieldROReturnsOnCall[len(fake.bitFieldROArgsForCall)]
	fake.bitFieldROArgsForCall = append(fake.bitFieldROArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.BitFieldROStub
	fakeReturns := fake.bitFieldROReturns
	fake.recordInvocation("BitFieldRO", []interface{}{arg1, arg2, arg3})
	fake.bitFieldROMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BitFieldROCallCount() int {
	fake.bitFieldROMutex.RLock()
	defer fake.bitFieldROMutex.RUnlock()
	return len(fake.bitFieldROArgsForCall)
}

func (fake *FakeCmdable) BitFieldROCalls(stub func(context.Context, string, ...interface{}) *redisa.IntSliceCmd) {
	fake.bitFieldROMutex.Lock()
	defer fake.bitFieldROMutex.Unlock()
	fake.BitFieldROStub = stub
}

func (fake *FakeCmdable) BitFieldROArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.bitFieldROMutex.RLock()
	defer fake.bitFieldROMutex.RUnlock()
	argsForCall := fake.bitFieldROArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BitFieldROReturns(result1 *redisa.IntSliceCmd) {
	fake.bitFieldROMutex.Lock()
	defer fake.bitFieldROMutex.Unlock()
	fake.BitFieldROStub = nil
	fake.bitFieldROReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BitFieldROReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.bitFieldROMutex.Lock()
	defer fake.bitFieldROMutex.Unlock()
	fake.BitFieldROStub = nil
	if fake.bitFieldROReturnsOnCall == nil {
		fake.bitFieldROReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.bitFieldROReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) BitOpAnd(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntCmd {
	fake.bitOpAndMutex.Lock()
	ret, specificReturn := fake.bitOpAndReturnsOnCall[len(fake.bitOpAndArgsForCall)]
	fake.bitOpAndArgsForCall = append(fake.bitOpAndArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.BitOpAndStub
	fakeReturns := fake.bitOpAndReturns
	fake.recordInvocation("BitOpAnd", []interface{}{arg1, arg2, arg3})
	fake.bitOpAndMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BitOpAndCallCount() int {
	fake.bitOpAndMutex.RLock()
	defer fake.bitOpAndMutex.RUnlock()
	return len(fake.bitOpAndArgsForCall)
}

func (fake *FakeCmdable) BitOpAndCalls(stub func(context.Context, string, ...string) *redisa.IntCmd) {
	fake.bitOpAndMutex.Lock()
	defer fake.bitOpAndMutex.Unlock()
	fake.BitOpAndStub = stub
}

func (fake *FakeCmdable) BitOpAndArgsForCall(i int) (context.Context, string, []string) {
	fake.bitOpAndMutex.RLock()
	defer fake.bitOpAndMutex.RUnlock()
	argsForCall := fake.bitOpAndArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BitOpAndReturns(result1 *redisa.IntCmd) {
	fake.bitOpAndMutex.Lock()
	defer fake.bitOpAndMutex.Unlock()
	fake.BitOpAndStub = nil
	fake.bitOpAndReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitOpAndReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.bitOpAndMutex.Lock()
	defer fake.bitOpAndMutex.Unlock()
	fake.BitOpAndStub = nil
	if fake.bitOpAndReturnsOnCall == nil {
		fake.bitOpAndReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.bitOpAndReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitOpNot(arg1 context.Context, arg2 string, arg3 string) *redisa.IntCmd {
	fake.bitOpNotMutex.Lock()
	ret, specificReturn := fake.bitOpNotReturnsOnCall[len(fake.bitOpNotArgsForCall)]
	fake.bitOpNotArgsForCall = append(fake.bitOpNotArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.BitOpNotStub
	fakeReturns := fake.bitOpNotReturns
	fake.recordInvocation("BitOpNot", []interface{}{arg1, arg2, arg3})
	fake.bitOpNotMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BitOpNotCallCount() int {
	fake.bitOpNotMutex.RLock()
	defer fake.bitOpNotMutex.RUnlock()
	return len(fake.bitOpNotArgsForCall)
}

func (fake *FakeCmdable) BitOpNotCalls(stub func(context.Context, string, string) *redisa.IntCmd) {
	fake.bitOpNotMutex.Lock()
	defer fake.bitOpNotMutex.Unlock()
	fake.BitOpNotStub = stub
}

func (fake *FakeCmdable) BitOpNotArgsForCall(i int) (context.Context, string, string) {
	fake.bitOpNotMutex.RLock()
	defer fake.bitOpNotMutex.RUnlock()
	argsForCall := fake.bitOpNotArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BitOpNotReturns(result1 *redisa.IntCmd) {
	fake.bitOpNotMutex.Lock()
	defer fake.bitOpNotMutex.Unlock()
	fake.BitOpNotStub = nil
	fake.bitOpNotReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitOpNotReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.bitOpNotMutex.Lock()
	defer fake.bitOpNotMutex.Unlock()
	fake.BitOpNotStub = nil
	if fake.bitOpNotReturnsOnCall == nil {
		fake.bitOpNotReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.bitOpNotReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitOpOr(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntCmd {
	fake.bitOpOrMutex.Lock()
	ret, specificReturn := fake.bitOpOrReturnsOnCall[len(fake.bitOpOrArgsForCall)]
	fake.bitOpOrArgsForCall = append(fake.bitOpOrArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.BitOpOrStub
	fakeReturns := fake.bitOpOrReturns
	fake.recordInvocation("BitOpOr", []interface{}{arg1, arg2, arg3})
	fake.bitOpOrMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BitOpOrCallCount() int {
	fake.bitOpOrMutex.RLock()
	defer fake.bitOpOrMutex.RUnlock()
	return len(fake.bitOpOrArgsForCall)
}

func (fake *FakeCmdable) BitOpOrCalls(stub func(context.Context, string, ...string) *redisa.IntCmd) {
	fake.bitOpOrMutex.Lock()
	defer fake.bitOpOrMutex.Unlock()
	fake.BitOpOrStub = stub
}

func (fake *FakeCmdable) BitOpOrArgsForCall(i int) (context.Context, string, []string) {
	fake.bitOpOrMutex.RLock()
	defer fake.bitOpOrMutex.RUnlock()
	argsForCall := fake.bitOpOrArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BitOpOrReturns(result1 *redisa.IntCmd) {
	fake.bitOpOrMutex.Lock()
	defer fake.bitOpOrMutex.Unlock()
	fake.BitOpOrStub = nil
	fake.bitOpOrReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitOpOrReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.bitOpOrMutex.Lock()
	defer fake.bitOpOrMutex.Unlock()
	fake.BitOpOrStub = nil
	if fake.bitOpOrReturnsOnCall == nil {
		fake.bitOpOrReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.bitOpOrReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitOpXor(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntCmd {
	fake.bitOpXorMutex.Lock()
	ret, specificReturn := fake.bitOpXorReturnsOnCall[len(fake.bitOpXorArgsForCall)]
	fake.bitOpXorArgsForCall = append(fake.bitOpXorArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.BitOpXorStub
	fakeReturns := fake.bitOpXorReturns
	fake.recordInvocation("BitOpXor", []interface{}{arg1, arg2, arg3})
	fake.bitOpXorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BitOpXorCallCount() int {
	fake.bitOpXorMutex.RLock()
	defer fake.bitOpXorMutex.RUnlock()
	return len(fake.bitOpXorArgsForCall)
}

func (fake *FakeCmdable) BitOpXorCalls(stub func(context.Context, string, ...string) *redisa.IntCmd) {
	fake.bitOpXorMutex.Lock()
	defer fake.bitOpXorMutex.Unlock()
	fake.BitOpXorStub = stub
}

func (fake *FakeCmdable) BitOpXorArgsForCall(i int) (context.Context, string, []string) {
	fake.bitOpXorMutex.RLock()
	defer fake.bitOpXorMutex.RUnlock()
	argsForCall := fake.bitOpXorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) BitOpXorReturns(result1 *redisa.IntCmd) {
	fake.bitOpXorMutex.Lock()
	defer fake.bitOpXorMutex.Unlock()
	fake.BitOpXorStub = nil
	fake.bitOpXorReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitOpXorReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.bitOpXorMutex.Lock()
	defer fake.bitOpXorMutex.Unlock()
	fake.BitOpXorStub = nil
	if fake.bitOpXorReturnsOnCall == nil {
		fake.bitOpXorReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.bitOpXorReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitPos(arg1 context.Context, arg2 string, arg3 int64, arg4 ...int64) *redisa.IntCmd {
	fake.bitPosMutex.Lock()
	ret, specificReturn := fake.bitPosReturnsOnCall[len(fake.bitPosArgsForCall)]
	fake.bitPosArgsForCall = append(fake.bitPosArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 []int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.BitPosStub
	fakeReturns := fake.bitPosReturns
	fake.recordInvocation("BitPos", []interface{}{arg1, arg2, arg3, arg4})
	fake.bitPosMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BitPosCallCount() int {
	fake.bitPosMutex.RLock()
	defer fake.bitPosMutex.RUnlock()
	return len(fake.bitPosArgsForCall)
}

func (fake *FakeCmdable) BitPosCalls(stub func(context.Context, string, int64, ...int64) *redisa.IntCmd) {
	fake.bitPosMutex.Lock()
	defer fake.bitPosMutex.Unlock()
	fake.BitPosStub = stub
}

func (fake *FakeCmdable) BitPosArgsForCall(i int) (context.Context, string, int64, []int64) {
	fake.bitPosMutex.RLock()
	defer fake.bitPosMutex.RUnlock()
	argsForCall := fake.bitPosArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) BitPosReturns(result1 *redisa.IntCmd) {
	fake.bitPosMutex.Lock()
	defer fake.bitPosMutex.Unlock()
	fake.BitPosStub = nil
	fake.bitPosReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitPosReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.bitPosMutex.Lock()
	defer fake.bitPosMutex.Unlock()
	fake.BitPosStub = nil
	if fake.bitPosReturnsOnCall == nil {
		fake.bitPosReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.bitPosReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitPosSpan(arg1 context.Context, arg2 string, arg3 int8, arg4 int64, arg5 int64, arg6 string) *redisa.IntCmd {
	fake.bitPosSpanMutex.Lock()
	ret, specificReturn := fake.bitPosSpanReturnsOnCall[len(fake.bitPosSpanArgsForCall)]
	fake.bitPosSpanArgsForCall = append(fake.bitPosSpanArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int8
		arg4 int64
		arg5 int64
		arg6 string
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.BitPosSpanStub
	fakeReturns := fake.bitPosSpanReturns
	fake.recordInvocation("BitPosSpan", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.bitPosSpanMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) BitPosSpanCallCount() int {
	fake.bitPosSpanMutex.RLock()
	defer fake.bitPosSpanMutex.RUnlock()
	return len(fake.bitPosSpanArgsForCall)
}

func (fake *FakeCmdable) BitPosSpanCalls(stub func(context.Context, string, int8, int64, int64, string) *redisa.IntCmd) {
	fake.bitPosSpanMutex.Lock()
	defer fake.bitPosSpanMutex.Unlock()
	fake.BitPosSpanStub = stub
}

func (fake *FakeCmdable) BitPosSpanArgsForCall(i int) (context.Context, string, int8, int64, int64, string) {
	fake.bitPosSpanMutex.RLock()
	defer fake.bitPosSpanMutex.RUnlock()
	argsForCall := fake.bitPosSpanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeCmdable) BitPosSpanReturns(result1 *redisa.IntCmd) {
	fake.bitPosSpanMutex.Lock()
	defer fake.bitPosSpanMutex.Unlock()
	fake.BitPosSpanStub = nil
	fake.bitPosSpanReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) BitPosSpanReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.bitPosSpanMutex.Lock()
	defer fake.bitPosSpanMutex.Unlock()
	fake.BitPosSpanStub = nil
	if fake.bitPosSpanReturnsOnCall == nil {
		fake.bitPosSpanReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.bitPosSpanReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) CFAdd(arg1 context.Context, arg2 string, arg3 interface{}) *redisa.BoolCmd {
	fake.cFAddMutex.Lock()
	ret, specificReturn := fake.cFAddReturnsOnCall[len(fake.cFAddArgsForCall)]
	fake.cFAddArgsForCall = append(fake.cFAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.CFAddStub
	fakeReturns := fake.cFAddReturns
	fake.recordInvocation("CFAdd", []interface{}{arg1, arg2, arg3})
	fake.cFAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFAddCallCount() int {
	fake.cFAddMutex.RLock()
	defer fake.cFAddMutex.RUnlock()
	return len(fake.cFAddArgsForCall)
}

func (fake *FakeCmdable) CFAddCalls(stub func(context.Context, string, interface{}) *redisa.BoolCmd) {
	fake.cFAddMutex.Lock()
	defer fake.cFAddMutex.Unlock()
	fake.CFAddStub = stub
}

func (fake *FakeCmdable) CFAddArgsForCall(i int) (context.Context, string, interface{}) {
	fake.cFAddMutex.RLock()
	defer fake.cFAddMutex.RUnlock()
	argsForCall := fake.cFAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CFAddReturns(result1 *redisa.BoolCmd) {
	fake.cFAddMutex.Lock()
	defer fake.cFAddMutex.Unlock()
	fake.CFAddStub = nil
	fake.cFAddReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) CFAddReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.cFAddMutex.Lock()
	defer fake.cFAddMutex.Unlock()
	fake.CFAddStub = nil
	if fake.cFAddReturnsOnCall == nil {
		fake.cFAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.cFAddReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) CFAddNX(arg1 context.Context, arg2 string, arg3 interface{}) *redisa.BoolCmd {
	fake.cFAddNXMutex.Lock()
	ret, specificReturn := fake.cFAddNXReturnsOnCall[len(fake.cFAddNXArgsForCall)]
	fake.cFAddNXArgsForCall = append(fake.cFAddNXArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.CFAddNXStub
	fakeReturns := fake.cFAddNXReturns
	fake.recordInvocation("CFAddNX", []interface{}{arg1, arg2, arg3})
	fake.cFAddNXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFAddNXCallCount() int {
	fake.cFAddNXMutex.RLock()
	defer fake.cFAddNXMutex.RUnlock()
	return len(fake.cFAddNXArgsForCall)
}

func (fake *FakeCmdable) CFAddNXCalls(stub func(context.Context, string, interface{}) *redisa.BoolCmd) {
	fake.cFAddNXMutex.Lock()
	defer fake.cFAddNXMutex.Unlock()
	fake.CFAddNXStub = stub
}

func (fake *FakeCmdable) CFAddNXArgsForCall(i int) (context.Context, string, interface{}) {
	fake.cFAddNXMutex.RLock()
	defer fake.cFAddNXMutex.RUnlock()
	argsForCall := fake.cFAddNXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CFAddNXReturns(result1 *redisa.BoolCmd) {
	fake.cFAddNXMutex.Lock()
	defer fake.cFAddNXMutex.Unlock()
	fake.CFAddNXStub = nil
	fake.cFAddNXReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) CFAddNXReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.cFAddNXMutex.Lock()
	defer fake.cFAddNXMutex.Unlock()
	fake.CFAddNXStub = nil
	if fake.cFAddNXReturnsOnCall == nil {
		fake.cFAddNXReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.cFAddNXReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) CFCount(arg1 context.Context, arg2 string, arg3 interface{}) *redisa.IntCmd {
	fake.cFCountMutex.Lock()
	ret, specificReturn := fake.cFCountReturnsOnCall[len(fake.cFCountArgsForCall)]
	fake.cFCountArgsForCall = append(fake.cFCountArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.CFCountStub
	fakeReturns := fake.cFCountReturns
	fake.recordInvocation("CFCount", []interface{}{arg1, arg2, arg3})
	fake.cFCountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFCountCallCount() int {
	fake.cFCountMutex.RLock()
	defer fake.cFCountMutex.RUnlock()
	return len(fake.cFCountArgsForCall)
}

func (fake *FakeCmdable) CFCountCalls(stub func(context.Context, string, interface{}) *redisa.IntCmd) {
	fake.cFCountMutex.Lock()
	defer fake.cFCountMutex.Unlock()
	fake.CFCountStub = stub
}

func (fake *FakeCmdable) CFCountArgsForCall(i int) (context.Context, string, interface{}) {
	fake.cFCountMutex.RLock()
	defer fake.cFCountMutex.RUnlock()
	argsForCall := fake.cFCountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CFCountReturns(result1 *redisa.IntCmd) {
	fake.cFCountMutex.Lock()
	defer fake.cFCountMutex.Unlock()
	fake.CFCountStub = nil
	fake.cFCountReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) CFCountReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.cFCountMutex.Lock()
	defer fake.cFCountMutex.Unlock()
	fake.CFCountStub = nil
	if fake.cFCountReturnsOnCall == nil {
		fake.cFCountReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.cFCountReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) CFDel(arg1 context.Context, arg2 string, arg3 interface{}) *redisa.BoolCmd {
	fake.cFDelMutex.Lock()
	ret, specificReturn := fake.cFDelReturnsOnCall[len(fake.cFDelArgsForCall)]
	fake.cFDelArgsForCall = append(fake.cFDelArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.CFDelStub
	fakeReturns := fake.cFDelReturns
	fake.recordInvocation("CFDel", []interface{}{arg1, arg2, arg3})
	fake.cFDelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFDelCallCount() int {
	fake.cFDelMutex.RLock()
	defer fake.cFDelMutex.RUnlock()
	return len(fake.cFDelArgsForCall)
}

func (fake *FakeCmdable) CFDelCalls(stub func(context.Context, string, interface{}) *redisa.BoolCmd) {
	fake.cFDelMutex.Lock()
	defer fake.cFDelMutex.Unlock()
	fake.CFDelStub = stub
}

func (fake *FakeCmdable) CFDelArgsForCall(i int) (context.Context, string, interface{}) {
	fake.cFDelMutex.RLock()
	defer fake.cFDelMutex.RUnlock()
	argsForCall := fake.cFDelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CFDelReturns(result1 *redisa.BoolCmd) {
	fake.cFDelMutex.Lock()
	defer fake.cFDelMutex.Unlock()
	fake.CFDelStub = nil
	fake.cFDelReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) CFDelReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.cFDelMutex.Lock()
	defer fake.cFDelMutex.Unlock()
	fake.CFDelStub = nil
	if fake.cFDelReturnsOnCall == nil {
		fake.cFDelReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.cFDelReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) CFExists(arg1 context.Context, arg2 string, arg3 interface{}) *redisa.BoolCmd {
	fake.cFExistsMutex.Lock()
	ret, specificReturn := fake.cFExistsReturnsOnCall[len(fake.cFExistsArgsForCall)]
	fake.cFExistsArgsForCall = append(fake.cFExistsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.CFExistsStub
	fakeReturns := fake.cFExistsReturns
	fake.recordInvocation("CFExists", []interface{}{arg1, arg2, arg3})
	fake.cFExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFExistsCallCount() int {
	fake.cFExistsMutex.RLock()
	defer fake.cFExistsMutex.RUnlock()
	return len(fake.cFExistsArgsForCall)
}

func (fake *FakeCmdable) CFExistsCalls(stub func(context.Context, string, interface{}) *redisa.BoolCmd) {
	fake.cFExistsMutex.Lock()
	defer fake.cFExistsMutex.Unlock()
	fake.CFExistsStub = stub
}

func (fake *FakeCmdable) CFExistsArgsForCall(i int) (context.Context, string, interface{}) {
	fake.cFExistsMutex.RLock()
	defer fake.cFExistsMutex.RUnlock()
	argsForCall := fake.cFExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CFExistsReturns(result1 *redisa.BoolCmd) {
	fake.cFExistsMutex.Lock()
	defer fake.cFExistsMutex.Unlock()
	fake.CFExistsStub = nil
	fake.cFExistsReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) CFExistsReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.cFExistsMutex.Lock()
	defer fake.cFExistsMutex.Unlock()
	fake.CFExistsStub = nil
	if fake.cFExistsReturnsOnCall == nil {
		fake.cFExistsReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.cFExistsReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) CFInfo(arg1 context.Context, arg2 string) *redisa.CFInfoCmd {
	fake.cFInfoMutex.Lock()
	ret, specificReturn := fake.cFInfoReturnsOnCall[len(fake.cFInfoArgsForCall)]
	fake.cFInfoArgsForCall = append(fake.cFInfoArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.CFInfoStub
	fakeReturns := fake.cFInfoReturns
	fake.recordInvocation("CFInfo", []interface{}{arg1, arg2})
	fake.cFInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFInfoCallCount() int {
	fake.cFInfoMutex.RLock()
	defer fake.cFInfoMutex.RUnlock()
	return len(fake.cFInfoArgsForCall)
}

func (fake *FakeCmdable) CFInfoCalls(stub func(context.Context, string) *redisa.CFInfoCmd) {
	fake.cFInfoMutex.Lock()
	defer fake.cFInfoMutex.Unlock()
	fake.CFInfoStub = stub
}

func (fake *FakeCmdable) CFInfoArgsForCall(i int) (context.Context, string) {
	fake.cFInfoMutex.RLock()
	defer fake.cFInfoMutex.RUnlock()
	argsForCall := fake.cFInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) CFInfoReturns(result1 *redisa.CFInfoCmd) {
	fake.cFInfoMutex.Lock()
	defer fake.cFInfoMutex.Unlock()
	fake.CFInfoStub = nil
	fake.cFInfoReturns = struct {
		result1 *redisa.CFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) CFInfoReturnsOnCall(i int, result1 *redisa.CFInfoCmd) {
	fake.cFInfoMutex.Lock()
	defer fake.cFInfoMutex.Unlock()
	fake.CFInfoStub = nil
	if fake.cFInfoReturnsOnCall == nil {
		fake.cFInfoReturnsOnCall = make(map[int]struct {
			result1 *redisa.CFInfoCmd
		})
	}
	fake.cFInfoReturnsOnCall[i] = struct {
		result1 *redisa.CFInfoCmd
	}{result1}
}

func (fake *FakeCmdable) CFInsert(arg1 context.Context, arg2 string, arg3 *redisa.CFInsertOptions, arg4 ...interface{}) *redisa.BoolSliceCmd {
	fake.cFInsertMutex.Lock()
	ret, specificReturn := fake.cFInsertReturnsOnCall[len(fake.cFInsertArgsForCall)]
	fake.cFInsertArgsForCall = append(fake.cFInsertArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.CFInsertOptions
		arg4 []interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.CFInsertStub
	fakeReturns := fake.cFInsertReturns
	fake.recordInvocation("CFInsert", []interface{}{arg1, arg2, arg3, arg4})
	fake.cFInsertMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFInsertCallCount() int {
	fake.cFInsertMutex.RLock()
	defer fake.cFInsertMutex.RUnlock()
	return len(fake.cFInsertArgsForCall)
}

func (fake *FakeCmdable) CFInsertCalls(stub func(context.Context, string, *redisa.CFInsertOptions, ...interface{}) *redisa.BoolSliceCmd) {
	fake.cFInsertMutex.Lock()
	defer fake.cFInsertMutex.Unlock()
	fake.CFInsertStub = stub
}

func (fake *FakeCmdable) CFInsertArgsForCall(i int) (context.Context, string, *redisa.CFInsertOptions, []interface{}) {
	fake.cFInsertMutex.RLock()
	defer fake.cFInsertMutex.RUnlock()
	argsForCall := fake.cFInsertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) CFInsertReturns(result1 *redisa.BoolSliceCmd) {
	fake.cFInsertMutex.Lock()
	defer fake.cFInsertMutex.Unlock()
	fake.CFInsertStub = nil
	fake.cFInsertReturns = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) CFInsertReturnsOnCall(i int, result1 *redisa.BoolSliceCmd) {
	fake.cFInsertMutex.Lock()
	defer fake.cFInsertMutex.Unlock()
	fake.CFInsertStub = nil
	if fake.cFInsertReturnsOnCall == nil {
		fake.cFInsertReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolSliceCmd
		})
	}
	fake.cFInsertReturnsOnCall[i] = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) CFInsertNX(arg1 context.Context, arg2 string, arg3 *redisa.CFInsertOptions, arg4 ...interface{}) *redisa.IntSliceCmd {
	fake.cFInsertNXMutex.Lock()
	ret, specificReturn := fake.cFInsertNXReturnsOnCall[len(fake.cFInsertNXArgsForCall)]
	fake.cFInsertNXArgsForCall = append(fake.cFInsertNXArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.CFInsertOptions
		arg4 []interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.CFInsertNXStub
	fakeReturns := fake.cFInsertNXReturns
	fake.recordInvocation("CFInsertNX", []interface{}{arg1, arg2, arg3, arg4})
	fake.cFInsertNXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFInsertNXCallCount() int {
	fake.cFInsertNXMutex.RLock()
	defer fake.cFInsertNXMutex.RUnlock()
	return len(fake.cFInsertNXArgsForCall)
}

func (fake *FakeCmdable) CFInsertNXCalls(stub func(context.Context, string, *redisa.CFInsertOptions, ...interface{}) *redisa.IntSliceCmd) {
	fake.cFInsertNXMutex.Lock()
	defer fake.cFInsertNXMutex.Unlock()
	fake.CFInsertNXStub = stub
}

func (fake *FakeCmdable) CFInsertNXArgsForCall(i int) (context.Context, string, *redisa.CFInsertOptions, []interface{}) {
	fake.cFInsertNXMutex.RLock()
	defer fake.cFInsertNXMutex.RUnlock()
	argsForCall := fake.cFInsertNXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) CFInsertNXReturns(result1 *redisa.IntSliceCmd) {
	fake.cFInsertNXMutex.Lock()
	defer fake.cFInsertNXMutex.Unlock()
	fake.CFInsertNXStub = nil
	fake.cFInsertNXReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) CFInsertNXReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.cFInsertNXMutex.Lock()
	defer fake.cFInsertNXMutex.Unlock()
	fake.CFInsertNXStub = nil
	if fake.cFInsertNXReturnsOnCall == nil {
		fake.cFInsertNXReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.cFInsertNXReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) CFLoadChunk(arg1 context.Context, arg2 string, arg3 int64, arg4 interface{}) *redisa.StatusCmd {
	fake.cFLoadChunkMutex.Lock()
	ret, specificReturn := fake.cFLoadChunkReturnsOnCall[len(fake.cFLoadChunkArgsForCall)]
	fake.cFLoadChunkArgsForCall = append(fake.cFLoadChunkArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.CFLoadChunkStub
	fakeReturns := fake.cFLoadChunkReturns
	fake.recordInvocation("CFLoadChunk", []interface{}{arg1, arg2, arg3, arg4})
	fake.cFLoadChunkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFLoadChunkCallCount() int {
	fake.cFLoadChunkMutex.RLock()
	defer fake.cFLoadChunkMutex.RUnlock()
	return len(fake.cFLoadChunkArgsForCall)
}

func (fake *FakeCmdable) CFLoadChunkCalls(stub func(context.Context, string, int64, interface{}) *redisa.StatusCmd) {
	fake.cFLoadChunkMutex.Lock()
	defer fake.cFLoadChunkMutex.Unlock()
	fake.CFLoadChunkStub = stub
}

func (fake *FakeCmdable) CFLoadChunkArgsForCall(i int) (context.Context, string, int64, interface{}) {
	fake.cFLoadChunkMutex.RLock()
	defer fake.cFLoadChunkMutex.RUnlock()
	argsForCall := fake.cFLoadChunkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) CFLoadChunkReturns(result1 *redisa.StatusCmd) {
	fake.cFLoadChunkMutex.Lock()
	defer fake.cFLoadChunkMutex.Unlock()
	fake.CFLoadChunkStub = nil
	fake.cFLoadChunkReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CFLoadChunkReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.cFLoadChunkMutex.Lock()
	defer fake.cFLoadChunkMutex.Unlock()
	fake.CFLoadChunkStub = nil
	if fake.cFLoadChunkReturnsOnCall == nil {
		fake.cFLoadChunkReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.cFLoadChunkReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CFMExists(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.BoolSliceCmd {
	fake.cFMExistsMutex.Lock()
	ret, specificReturn := fake.cFMExistsReturnsOnCall[len(fake.cFMExistsArgsForCall)]
	fake.cFMExistsArgsForCall = append(fake.cFMExistsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.CFMExistsStub
	fakeReturns := fake.cFMExistsReturns
	fake.recordInvocation("CFMExists", []interface{}{arg1, arg2, arg3})
	fake.cFMExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFMExistsCallCount() int {
	fake.cFMExistsMutex.RLock()
	defer fake.cFMExistsMutex.RUnlock()
	return len(fake.cFMExistsArgsForCall)
}

func (fake *FakeCmdable) CFMExistsCalls(stub func(context.Context, string, ...interface{}) *redisa.BoolSliceCmd) {
	fake.cFMExistsMutex.Lock()
	defer fake.cFMExistsMutex.Unlock()
	fake.CFMExistsStub = stub
}

func (fake *FakeCmdable) CFMExistsArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.cFMExistsMutex.RLock()
	defer fake.cFMExistsMutex.RUnlock()
	argsForCall := fake.cFMExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CFMExistsReturns(result1 *redisa.BoolSliceCmd) {
	fake.cFMExistsMutex.Lock()
	defer fake.cFMExistsMutex.Unlock()
	fake.CFMExistsStub = nil
	fake.cFMExistsReturns = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) CFMExistsReturnsOnCall(i int, result1 *redisa.BoolSliceCmd) {
	fake.cFMExistsMutex.Lock()
	defer fake.cFMExistsMutex.Unlock()
	fake.CFMExistsStub = nil
	if fake.cFMExistsReturnsOnCall == nil {
		fake.cFMExistsReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolSliceCmd
		})
	}
	fake.cFMExistsReturnsOnCall[i] = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) CFReserve(arg1 context.Context, arg2 string, arg3 int64) *redisa.StatusCmd {
	fake.cFReserveMutex.Lock()
	ret, specificReturn := fake.cFReserveReturnsOnCall[len(fake.cFReserveArgsForCall)]
	fake.cFReserveArgsForCall = append(fake.cFReserveArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.CFReserveStub
	fakeReturns := fake.cFReserveReturns
	fake.recordInvocation("CFReserve", []interface{}{arg1, arg2, arg3})
	fake.cFReserveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFReserveCallCount() int {
	fake.cFReserveMutex.RLock()
	defer fake.cFReserveMutex.RUnlock()
	return len(fake.cFReserveArgsForCall)
}

func (fake *FakeCmdable) CFReserveCalls(stub func(context.Context, string, int64) *redisa.StatusCmd) {
	fake.cFReserveMutex.Lock()
	defer fake.cFReserveMutex.Unlock()
	fake.CFReserveStub = stub
}

func (fake *FakeCmdable) CFReserveArgsForCall(i int) (context.Context, string, int64) {
	fake.cFReserveMutex.RLock()
	defer fake.cFReserveMutex.RUnlock()
	argsForCall := fake.cFReserveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CFReserveReturns(result1 *redisa.StatusCmd) {
	fake.cFReserveMutex.Lock()
	defer fake.cFReserveMutex.Unlock()
	fake.CFReserveStub = nil
	fake.cFReserveReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CFReserveReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.cFReserveMutex.Lock()
	defer fake.cFReserveMutex.Unlock()
	fake.CFReserveStub = nil
	if fake.cFReserveReturnsOnCall == nil {
		fake.cFReserveReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.cFReserveReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CFReserveBucketSize(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.StatusCmd {
	fake.cFReserveBucketSizeMutex.Lock()
	ret, specificReturn := fake.cFReserveBucketSizeReturnsOnCall[len(fake.cFReserveBucketSizeArgsForCall)]
	fake.cFReserveBucketSizeArgsForCall = append(fake.cFReserveBucketSizeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.CFReserveBucketSizeStub
	fakeReturns := fake.cFReserveBucketSizeReturns
	fake.recordInvocation("CFReserveBucketSize", []interface{}{arg1, arg2, arg3, arg4})
	fake.cFReserveBucketSizeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFReserveBucketSizeCallCount() int {
	fake.cFReserveBucketSizeMutex.RLock()
	defer fake.cFReserveBucketSizeMutex.RUnlock()
	return len(fake.cFReserveBucketSizeArgsForCall)
}

func (fake *FakeCmdable) CFReserveBucketSizeCalls(stub func(context.Context, string, int64, int64) *redisa.StatusCmd) {
	fake.cFReserveBucketSizeMutex.Lock()
	defer fake.cFReserveBucketSizeMutex.Unlock()
	fake.CFReserveBucketSizeStub = stub
}

func (fake *FakeCmdable) CFReserveBucketSizeArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.cFReserveBucketSizeMutex.RLock()
	defer fake.cFReserveBucketSizeMutex.RUnlock()
	argsForCall := fake.cFReserveBucketSizeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) CFReserveBucketSizeReturns(result1 *redisa.StatusCmd) {
	fake.cFReserveBucketSizeMutex.Lock()
	defer fake.cFReserveBucketSizeMutex.Unlock()
	fake.CFReserveBucketSizeStub = nil
	fake.cFReserveBucketSizeReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CFReserveBucketSizeReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.cFReserveBucketSizeMutex.Lock()
	defer fake.cFReserveBucketSizeMutex.Unlock()
	fake.CFReserveBucketSizeStub = nil
	if fake.cFReserveBucketSizeReturnsOnCall == nil {
		fake.cFReserveBucketSizeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.cFReserveBucketSizeReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CFReserveExpansion(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.StatusCmd {
	fake.cFReserveExpansionMutex.Lock()
	ret, specificReturn := fake.cFReserveExpansionReturnsOnCall[len(fake.cFReserveExpansionArgsForCall)]
	fake.cFReserveExpansionArgsForCall = append(fake.cFReserveExpansionArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.CFReserveExpansionStub
	fakeReturns := fake.cFReserveExpansionReturns
	fake.recordInvocation("CFReserveExpansion", []interface{}{arg1, arg2, arg3, arg4})
	fake.cFReserveExpansionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFReserveExpansionCallCount() int {
	fake.cFReserveExpansionMutex.RLock()
	defer fake.cFReserveExpansionMutex.RUnlock()
	return len(fake.cFReserveExpansionArgsForCall)
}

func (fake *FakeCmdable) CFReserveExpansionCalls(stub func(context.Context, string, int64, int64) *redisa.StatusCmd) {
	fake.cFReserveExpansionMutex.Lock()
	defer fake.cFReserveExpansionMutex.Unlock()
	fake.CFReserveExpansionStub = stub
}

func (fake *FakeCmdable) CFReserveExpansionArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.cFReserveExpansionMutex.RLock()
	defer fake.cFReserveExpansionMutex.RUnlock()
	argsForCall := fake.cFReserveExpansionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) CFReserveExpansionReturns(result1 *redisa.StatusCmd) {
	fake.cFReserveExpansionMutex.Lock()
	defer fake.cFReserveExpansionMutex.Unlock()
	fake.CFReserveExpansionStub = nil
	fake.cFReserveExpansionReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CFReserveExpansionReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.cFReserveExpansionMutex.Lock()
	defer fake.cFReserveExpansionMutex.Unlock()
	fake.CFReserveExpansionStub = nil
	if fake.cFReserveExpansionReturnsOnCall == nil {
		fake.cFReserveExpansionReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.cFReserveExpansionReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CFReserveMaxIterations(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.StatusCmd {
	fake.cFReserveMaxIterationsMutex.Lock()
	ret, specificReturn := fake.cFReserveMaxIterationsReturnsOnCall[len(fake.cFReserveMaxIterationsArgsForCall)]
	fake.cFReserveMaxIterationsArgsForCall = append(fake.cFReserveMaxIterationsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.CFReserveMaxIterationsStub
	fakeReturns := fake.cFReserveMaxIterationsReturns
	fake.recordInvocation("CFReserveMaxIterations", []interface{}{arg1, arg2, arg3, arg4})
	fake.cFReserveMaxIterationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFReserveMaxIterationsCallCount() int {
	fake.cFReserveMaxIterationsMutex.RLock()
	defer fake.cFReserveMaxIterationsMutex.RUnlock()
	return len(fake.cFReserveMaxIterationsArgsForCall)
}

func (fake *FakeCmdable) CFReserveMaxIterationsCalls(stub func(context.Context, string, int64, int64) *redisa.StatusCmd) {
	fake.cFReserveMaxIterationsMutex.Lock()
	defer fake.cFReserveMaxIterationsMutex.Unlock()
	fake.CFReserveMaxIterationsStub = stub
}

func (fake *FakeCmdable) CFReserveMaxIterationsArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.cFReserveMaxIterationsMutex.RLock()
	defer fake.cFReserveMaxIterationsMutex.RUnlock()
	argsForCall := fake.cFReserveMaxIterationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) CFReserveMaxIterationsReturns(result1 *redisa.StatusCmd) {
	fake.cFReserveMaxIterationsMutex.Lock()
	defer fake.cFReserveMaxIterationsMutex.Unlock()
	fake.CFReserveMaxIterationsStub = nil
	fake.cFReserveMaxIterationsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CFReserveMaxIterationsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.cFReserveMaxIterationsMutex.Lock()
	defer fake.cFReserveMaxIterationsMutex.Unlock()
	fake.CFReserveMaxIterationsStub = nil
	if fake.cFReserveMaxIterationsReturnsOnCall == nil {
		fake.cFReserveMaxIterationsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.cFReserveMaxIterationsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CFReserveWithArgs(arg1 context.Context, arg2 string, arg3 *redisa.CFReserveOptions) *redisa.StatusCmd {
	fake.cFReserveWithArgsMutex.Lock()
	ret, specificReturn := fake.cFReserveWithArgsReturnsOnCall[len(fake.cFReserveWithArgsArgsForCall)]
	fake.cFReserveWithArgsArgsForCall = append(fake.cFReserveWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.CFReserveOptions
	}{arg1, arg2, arg3})
	stub := fake.CFReserveWithArgsStub
	fakeReturns := fake.cFReserveWithArgsReturns
	fake.recordInvocation("CFReserveWithArgs", []interface{}{arg1, arg2, arg3})
	fake.cFReserveWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFReserveWithArgsCallCount() int {
	fake.cFReserveWithArgsMutex.RLock()
	defer fake.cFReserveWithArgsMutex.RUnlock()
	return len(fake.cFReserveWithArgsArgsForCall)
}

func (fake *FakeCmdable) CFReserveWithArgsCalls(stub func(context.Context, string, *redisa.CFReserveOptions) *redisa.StatusCmd) {
	fake.cFReserveWithArgsMutex.Lock()
	defer fake.cFReserveWithArgsMutex.Unlock()
	fake.CFReserveWithArgsStub = stub
}

func (fake *FakeCmdable) CFReserveWithArgsArgsForCall(i int) (context.Context, string, *redisa.CFReserveOptions) {
	fake.cFReserveWithArgsMutex.RLock()
	defer fake.cFReserveWithArgsMutex.RUnlock()
	argsForCall := fake.cFReserveWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CFReserveWithArgsReturns(result1 *redisa.StatusCmd) {
	fake.cFReserveWithArgsMutex.Lock()
	defer fake.cFReserveWithArgsMutex.Unlock()
	fake.CFReserveWithArgsStub = nil
	fake.cFReserveWithArgsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CFReserveWithArgsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.cFReserveWithArgsMutex.Lock()
	defer fake.cFReserveWithArgsMutex.Unlock()
	fake.CFReserveWithArgsStub = nil
	if fake.cFReserveWithArgsReturnsOnCall == nil {
		fake.cFReserveWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.cFReserveWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CFScanDump(arg1 context.Context, arg2 string, arg3 int64) *redisa.ScanDumpCmd {
	fake.cFScanDumpMutex.Lock()
	ret, specificReturn := fake.cFScanDumpReturnsOnCall[len(fake.cFScanDumpArgsForCall)]
	fake.cFScanDumpArgsForCall = append(fake.cFScanDumpArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.CFScanDumpStub
	fakeReturns := fake.cFScanDumpReturns
	fake.recordInvocation("CFScanDump", []interface{}{arg1, arg2, arg3})
	fake.cFScanDumpMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CFScanDumpCallCount() int {
	fake.cFScanDumpMutex.RLock()
	defer fake.cFScanDumpMutex.RUnlock()
	return len(fake.cFScanDumpArgsForCall)
}

func (fake *FakeCmdable) CFScanDumpCalls(stub func(context.Context, string, int64) *redisa.ScanDumpCmd) {
	fake.cFScanDumpMutex.Lock()
	defer fake.cFScanDumpMutex.Unlock()
	fake.CFScanDumpStub = stub
}

func (fake *FakeCmdable) CFScanDumpArgsForCall(i int) (context.Context, string, int64) {
	fake.cFScanDumpMutex.RLock()
	defer fake.cFScanDumpMutex.RUnlock()
	argsForCall := fake.cFScanDumpArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CFScanDumpReturns(result1 *redisa.ScanDumpCmd) {
	fake.cFScanDumpMutex.Lock()
	defer fake.cFScanDumpMutex.Unlock()
	fake.CFScanDumpStub = nil
	fake.cFScanDumpReturns = struct {
		result1 *redisa.ScanDumpCmd
	}{result1}
}

func (fake *FakeCmdable) CFScanDumpReturnsOnCall(i int, result1 *redisa.ScanDumpCmd) {
	fake.cFScanDumpMutex.Lock()
	defer fake.cFScanDumpMutex.Unlock()
	fake.CFScanDumpStub = nil
	if fake.cFScanDumpReturnsOnCall == nil {
		fake.cFScanDumpReturnsOnCall = make(map[int]struct {
			result1 *redisa.ScanDumpCmd
		})
	}
	fake.cFScanDumpReturnsOnCall[i] = struct {
		result1 *redisa.ScanDumpCmd
	}{result1}
}

func (fake *FakeCmdable) CMSIncrBy(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntSliceCmd {
	fake.cMSIncrByMutex.Lock()
	ret, specificReturn := fake.cMSIncrByReturnsOnCall[len(fake.cMSIncrByArgsForCall)]
	fake.cMSIncrByArgsForCall = append(fake.cMSIncrByArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.CMSIncrByStub
	fakeReturns := fake.cMSIncrByReturns
	fake.recordInvocation("CMSIncrBy", []interface{}{arg1, arg2, arg3})
	fake.cMSIncrByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CMSIncrByCallCount() int {
	fake.cMSIncrByMutex.RLock()
	defer fake.cMSIncrByMutex.RUnlock()
	return len(fake.cMSIncrByArgsForCall)
}

func (fake *FakeCmdable) CMSIncrByCalls(stub func(context.Context, string, ...interface{}) *redisa.IntSliceCmd) {
	fake.cMSIncrByMutex.Lock()
	defer fake.cMSIncrByMutex.Unlock()
	fake.CMSIncrByStub = stub
}

func (fake *FakeCmdable) CMSIncrByArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.cMSIncrByMutex.RLock()
	defer fake.cMSIncrByMutex.RUnlock()
	argsForCall := fake.cMSIncrByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CMSIncrByReturns(result1 *redisa.IntSliceCmd) {
	fake.cMSIncrByMutex.Lock()
	defer fake.cMSIncrByMutex.Unlock()
	fake.CMSIncrByStub = nil
	fake.cMSIncrByReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) CMSIncrByReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.cMSIncrByMutex.Lock()
	defer fake.cMSIncrByMutex.Unlock()
	fake.CMSIncrByStub = nil
	if fake.cMSIncrByReturnsOnCall == nil {
		fake.cMSIncrByReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.cMSIncrByReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) CMSInfo(arg1 context.Context, arg2 string) *redisa.CMSInfoCmd {
	fake.cMSInfoMutex.Lock()
	ret, specificReturn := fake.cMSInfoReturnsOnCall[len(fake.cMSInfoArgsForCall)]
	fake.cMSInfoArgsForCall = append(fake.cMSInfoArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.CMSInfoStub
	fakeReturns := fake.cMSInfoReturns
	fake.recordInvocation("CMSInfo", []interface{}{arg1, arg2})
	fake.cMSInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CMSInfoCallCount() int {
	fake.cMSInfoMutex.RLock()
	defer fake.cMSInfoMutex.RUnlock()
	return len(fake.cMSInfoArgsForCall)
}

func (fake *FakeCmdable) CMSInfoCalls(stub func(context.Context, string) *redisa.CMSInfoCmd) {
	fake.cMSInfoMutex.Lock()
	defer fake.cMSInfoMutex.Unlock()
	fake.CMSInfoStub = stub
}

func (fake *FakeCmdable) CMSInfoArgsForCall(i int) (context.Context, string) {
	fake.cMSInfoMutex.RLock()
	defer fake.cMSInfoMutex.RUnlock()
	argsForCall := fake.cMSInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) CMSInfoReturns(result1 *redisa.CMSInfoCmd) {
	fake.cMSInfoMutex.Lock()
	defer fake.cMSInfoMutex.Unlock()
	fake.CMSInfoStub = nil
	fake.cMSInfoReturns = struct {
		result1 *redisa.CMSInfoCmd
	}{result1}
}

func (fake *FakeCmdable) CMSInfoReturnsOnCall(i int, result1 *redisa.CMSInfoCmd) {
	fake.cMSInfoMutex.Lock()
	defer fake.cMSInfoMutex.Unlock()
	fake.CMSInfoStub = nil
	if fake.cMSInfoReturnsOnCall == nil {
		fake.cMSInfoReturnsOnCall = make(map[int]struct {
			result1 *redisa.CMSInfoCmd
		})
	}
	fake.cMSInfoReturnsOnCall[i] = struct {
		result1 *redisa.CMSInfoCmd
	}{result1}
}

func (fake *FakeCmdable) CMSInitByDim(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.StatusCmd {
	fake.cMSInitByDimMutex.Lock()
	ret, specificReturn := fake.cMSInitByDimReturnsOnCall[len(fake.cMSInitByDimArgsForCall)]
	fake.cMSInitByDimArgsForCall = append(fake.cMSInitByDimArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.CMSInitByDimStub
	fakeReturns := fake.cMSInitByDimReturns
	fake.recordInvocation("CMSInitByDim", []interface{}{arg1, arg2, arg3, arg4})
	fake.cMSInitByDimMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CMSInitByDimCallCount() int {
	fake.cMSInitByDimMutex.RLock()
	defer fake.cMSInitByDimMutex.RUnlock()
	return len(fake.cMSInitByDimArgsForCall)
}

func (fake *FakeCmdable) CMSInitByDimCalls(stub func(context.Context, string, int64, int64) *redisa.StatusCmd) {
	fake.cMSInitByDimMutex.Lock()
	defer fake.cMSInitByDimMutex.Unlock()
	fake.CMSInitByDimStub = stub
}

func (fake *FakeCmdable) CMSInitByDimArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.cMSInitByDimMutex.RLock()
	defer fake.cMSInitByDimMutex.RUnlock()
	argsForCall := fake.cMSInitByDimArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) CMSInitByDimReturns(result1 *redisa.StatusCmd) {
	fake.cMSInitByDimMutex.Lock()
	defer fake.cMSInitByDimMutex.Unlock()
	fake.CMSInitByDimStub = nil
	fake.cMSInitByDimReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CMSInitByDimReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.cMSInitByDimMutex.Lock()
	defer fake.cMSInitByDimMutex.Unlock()
	fake.CMSInitByDimStub = nil
	if fake.cMSInitByDimReturnsOnCall == nil {
		fake.cMSInitByDimReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.cMSInitByDimReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CMSInitByProb(arg1 context.Context, arg2 string, arg3 float64, arg4 float64) *redisa.StatusCmd {
	fake.cMSInitByProbMutex.Lock()
	ret, specificReturn := fake.cMSInitByProbReturnsOnCall[len(fake.cMSInitByProbArgsForCall)]
	fake.cMSInitByProbArgsForCall = append(fake.cMSInitByProbArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 float64
	}{arg1, arg2, arg3, arg4})
	stub := fake.CMSInitByProbStub
	fakeReturns := fake.cMSInitByProbReturns
	fake.recordInvocation("CMSInitByProb", []interface{}{arg1, arg2, arg3, arg4})
	fake.cMSInitByProbMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CMSInitByProbCallCount() int {
	fake.cMSInitByProbMutex.RLock()
	defer fake.cMSInitByProbMutex.RUnlock()
	return len(fake.cMSInitByProbArgsForCall)
}

func (fake *FakeCmdable) CMSInitByProbCalls(stub func(context.Context, string, float64, float64) *redisa.StatusCmd) {
	fake.cMSInitByProbMutex.Lock()
	defer fake.cMSInitByProbMutex.Unlock()
	fake.CMSInitByProbStub = stub
}

func (fake *FakeCmdable) CMSInitByProbArgsForCall(i int) (context.Context, string, float64, float64) {
	fake.cMSInitByProbMutex.RLock()
	defer fake.cMSInitByProbMutex.RUnlock()
	argsForCall := fake.cMSInitByProbArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) CMSInitByProbReturns(result1 *redisa.StatusCmd) {
	fake.cMSInitByProbMutex.Lock()
	defer fake.cMSInitByProbMutex.Unlock()
	fake.CMSInitByProbStub = nil
	fake.cMSInitByProbReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CMSInitByProbReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.cMSInitByProbMutex.Lock()
	defer fake.cMSInitByProbMutex.Unlock()
	fake.CMSInitByProbStub = nil
	if fake.cMSInitByProbReturnsOnCall == nil {
		fake.cMSInitByProbReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.cMSInitByProbReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CMSMerge(arg1 context.Context, arg2 string, arg3 ...string) *redisa.StatusCmd {
	fake.cMSMergeMutex.Lock()
	ret, specificReturn := fake.cMSMergeReturnsOnCall[len(fake.cMSMergeArgsForCall)]
	fake.cMSMergeArgsForCall = append(fake.cMSMergeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.CMSMergeStub
	fakeReturns := fake.cMSMergeReturns
	fake.recordInvocation("CMSMerge", []interface{}{arg1, arg2, arg3})
	fake.cMSMergeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CMSMergeCallCount() int {
	fake.cMSMergeMutex.RLock()
	defer fake.cMSMergeMutex.RUnlock()
	return len(fake.cMSMergeArgsForCall)
}

func (fake *FakeCmdable) CMSMergeCalls(stub func(context.Context, string, ...string) *redisa.StatusCmd) {
	fake.cMSMergeMutex.Lock()
	defer fake.cMSMergeMutex.Unlock()
	fake.CMSMergeStub = stub
}

func (fake *FakeCmdable) CMSMergeArgsForCall(i int) (context.Context, string, []string) {
	fake.cMSMergeMutex.RLock()
	defer fake.cMSMergeMutex.RUnlock()
	argsForCall := fake.cMSMergeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CMSMergeReturns(result1 *redisa.StatusCmd) {
	fake.cMSMergeMutex.Lock()
	defer fake.cMSMergeMutex.Unlock()
	fake.CMSMergeStub = nil
	fake.cMSMergeReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CMSMergeReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.cMSMergeMutex.Lock()
	defer fake.cMSMergeMutex.Unlock()
	fake.CMSMergeStub = nil
	if fake.cMSMergeReturnsOnCall == nil {
		fake.cMSMergeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.cMSMergeReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CMSMergeWithWeight(arg1 context.Context, arg2 string, arg3 map[string]int64) *redisa.StatusCmd {
	fake.cMSMergeWithWeightMutex.Lock()
	ret, specificReturn := fake.cMSMergeWithWeightReturnsOnCall[len(fake.cMSMergeWithWeightArgsForCall)]
	fake.cMSMergeWithWeightArgsForCall = append(fake.cMSMergeWithWeightArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]int64
	}{arg1, arg2, arg3})
	stub := fake.CMSMergeWithWeightStub
	fakeReturns := fake.cMSMergeWithWeightReturns
	fake.recordInvocation("CMSMergeWithWeight", []interface{}{arg1, arg2, arg3})
	fake.cMSMergeWithWeightMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CMSMergeWithWeightCallCount() int {
	fake.cMSMergeWithWeightMutex.RLock()
	defer fake.cMSMergeWithWeightMutex.RUnlock()
	return len(fake.cMSMergeWithWeightArgsForCall)
}

func (fake *FakeCmdable) CMSMergeWithWeightCalls(stub func(context.Context, string, map[string]int64) *redisa.StatusCmd) {
	fake.cMSMergeWithWeightMutex.Lock()
	defer fake.cMSMergeWithWeightMutex.Unlock()
	fake.CMSMergeWithWeightStub = stub
}

func (fake *FakeCmdable) CMSMergeWithWeightArgsForCall(i int) (context.Context, string, map[string]int64) {
	fake.cMSMergeWithWeightMutex.RLock()
	defer fake.cMSMergeWithWeightMutex.RUnlock()
	argsForCall := fake.cMSMergeWithWeightArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CMSMergeWithWeightReturns(result1 *redisa.StatusCmd) {
	fake.cMSMergeWithWeightMutex.Lock()
	defer fake.cMSMergeWithWeightMutex.Unlock()
	fake.CMSMergeWithWeightStub = nil
	fake.cMSMergeWithWeightReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CMSMergeWithWeightReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.cMSMergeWithWeightMutex.Lock()
	defer fake.cMSMergeWithWeightMutex.Unlock()
	fake.CMSMergeWithWeightStub = nil
	if fake.cMSMergeWithWeightReturnsOnCall == nil {
		fake.cMSMergeWithWeightReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.cMSMergeWithWeightReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) CMSQuery(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntSliceCmd {
	fake.cMSQueryMutex.Lock()
	ret, specificReturn := fake.cMSQueryReturnsOnCall[len(fake.cMSQueryArgsForCall)]
	fake.cMSQueryArgsForCall = append(fake.cMSQueryArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.CMSQueryStub
	fakeReturns := fake.cMSQueryReturns
	fake.recordInvocation("CMSQuery", []interface{}{arg1, arg2, arg3})
	fake.cMSQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CMSQueryCallCount() int {
	fake.cMSQueryMutex.RLock()
	defer fake.cMSQueryMutex.RUnlock()
	return len(fake.cMSQueryArgsForCall)
}

func (fake *FakeCmdable) CMSQueryCalls(stub func(context.Context, string, ...interface{}) *redisa.IntSliceCmd) {
	fake.cMSQueryMutex.Lock()
	defer fake.cMSQueryMutex.Unlock()
	fake.CMSQueryStub = stub
}

func (fake *FakeCmdable) CMSQueryArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.cMSQueryMutex.RLock()
	defer fake.cMSQueryMutex.RUnlock()
	argsForCall := fake.cMSQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) CMSQueryReturns(result1 *redisa.IntSliceCmd) {
	fake.cMSQueryMutex.Lock()
	defer fake.cMSQueryMutex.Unlock()
	fake.CMSQueryStub = nil
	fake.cMSQueryReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) CMSQueryReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.cMSQueryMutex.Lock()
	defer fake.cMSQueryMutex.Unlock()
	fake.CMSQueryStub = nil
	if fake.cMSQueryReturnsOnCall == nil {
		fake.cMSQueryReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.cMSQueryReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ClientGetName(arg1 context.Context) *redisa.StringCmd {
	fake.clientGetNameMutex.Lock()
	ret, specificReturn := fake.clientGetNameReturnsOnCall[len(fake.clientGetNameArgsForCall)]
	fake.clientGetNameArgsForCall = append(fake.clientGetNameArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClientGetNameStub
	fakeReturns := fake.clientGetNameReturns
	fake.recordInvocation("ClientGetName", []interface{}{arg1})
	fake.clientGetNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClientGetNameCallCount() int {
	fake.clientGetNameMutex.RLock()
	defer fake.clientGetNameMutex.RUnlock()
	return len(fake.clientGetNameArgsForCall)
}

func (fake *FakeCmdable) ClientGetNameCalls(stub func(context.Context) *redisa.StringCmd) {
	fake.clientGetNameMutex.Lock()
	defer fake.clientGetNameMutex.Unlock()
	fake.ClientGetNameStub = stub
}

func (fake *FakeCmdable) ClientGetNameArgsForCall(i int) context.Context {
	fake.clientGetNameMutex.RLock()
	defer fake.clientGetNameMutex.RUnlock()
	argsForCall := fake.clientGetNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClientGetNameReturns(result1 *redisa.StringCmd) {
	fake.clientGetNameMutex.Lock()
	defer fake.clientGetNameMutex.Unlock()
	fake.ClientGetNameStub = nil
	fake.clientGetNameReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ClientGetNameReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.clientGetNameMutex.Lock()
	defer fake.clientGetNameMutex.Unlock()
	fake.ClientGetNameStub = nil
	if fake.clientGetNameReturnsOnCall == nil {
		fake.clientGetNameReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.clientGetNameReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ClientID(arg1 context.Context) *redisa.IntCmd {
	fake.clientIDMutex.Lock()
	ret, specificReturn := fake.clientIDReturnsOnCall[len(fake.clientIDArgsForCall)]
	fake.clientIDArgsForCall = append(fake.clientIDArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClientIDStub
	fakeReturns := fake.clientIDReturns
	fake.recordInvocation("ClientID", []interface{}{arg1})
	fake.clientIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClientIDCallCount() int {
	fake.clientIDMutex.RLock()
	defer fake.clientIDMutex.RUnlock()
	return len(fake.clientIDArgsForCall)
}

func (fake *FakeCmdable) ClientIDCalls(stub func(context.Context) *redisa.IntCmd) {
	fake.clientIDMutex.Lock()
	defer fake.clientIDMutex.Unlock()
	fake.ClientIDStub = stub
}

func (fake *FakeCmdable) ClientIDArgsForCall(i int) context.Context {
	fake.clientIDMutex.RLock()
	defer fake.clientIDMutex.RUnlock()
	argsForCall := fake.clientIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClientIDReturns(result1 *redisa.IntCmd) {
	fake.clientIDMutex.Lock()
	defer fake.clientIDMutex.Unlock()
	fake.ClientIDStub = nil
	fake.clientIDReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClientIDReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.clientIDMutex.Lock()
	defer fake.clientIDMutex.Unlock()
	fake.ClientIDStub = nil
	if fake.clientIDReturnsOnCall == nil {
		fake.clientIDReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.clientIDReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClientInfo(arg1 context.Context) *redisa.ClientInfoCmd {
	fake.clientInfoMutex.Lock()
	ret, specificReturn := fake.clientInfoReturnsOnCall[len(fake.clientInfoArgsForCall)]
	fake.clientInfoArgsForCall = append(fake.clientInfoArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClientInfoStub
	fakeReturns := fake.clientInfoReturns
	fake.recordInvocation("ClientInfo", []interface{}{arg1})
	fake.clientInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClientInfoCallCount() int {
	fake.clientInfoMutex.RLock()
	defer fake.clientInfoMutex.RUnlock()
	return len(fake.clientInfoArgsForCall)
}

func (fake *FakeCmdable) ClientInfoCalls(stub func(context.Context) *redisa.ClientInfoCmd) {
	fake.clientInfoMutex.Lock()
	defer fake.clientInfoMutex.Unlock()
	fake.ClientInfoStub = stub
}

func (fake *FakeCmdable) ClientInfoArgsForCall(i int) context.Context {
	fake.clientInfoMutex.RLock()
	defer fake.clientInfoMutex.RUnlock()
	argsForCall := fake.clientInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClientInfoReturns(result1 *redisa.ClientInfoCmd) {
	fake.clientInfoMutex.Lock()
	defer fake.clientInfoMutex.Unlock()
	fake.ClientInfoStub = nil
	fake.clientInfoReturns = struct {
		result1 *redisa.ClientInfoCmd
	}{result1}
}

func (fake *FakeCmdable) ClientInfoReturnsOnCall(i int, result1 *redisa.ClientInfoCmd) {
	fake.clientInfoMutex.Lock()
	defer fake.clientInfoMutex.Unlock()
	fake.ClientInfoStub = nil
	if fake.clientInfoReturnsOnCall == nil {
		fake.clientInfoReturnsOnCall = make(map[int]struct {
			result1 *redisa.ClientInfoCmd
		})
	}
	fake.clientInfoReturnsOnCall[i] = struct {
		result1 *redisa.ClientInfoCmd
	}{result1}
}

func (fake *FakeCmdable) ClientKill(arg1 context.Context, arg2 string) *redisa.StatusCmd {
	fake.clientKillMutex.Lock()
	ret, specificReturn := fake.clientKillReturnsOnCall[len(fake.clientKillArgsForCall)]
	fake.clientKillArgsForCall = append(fake.clientKillArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ClientKillStub
	fakeReturns := fake.clientKillReturns
	fake.recordInvocation("ClientKill", []interface{}{arg1, arg2})
	fake.clientKillMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClientKillCallCount() int {
	fake.clientKillMutex.RLock()
	defer fake.clientKillMutex.RUnlock()
	return len(fake.clientKillArgsForCall)
}

func (fake *FakeCmdable) ClientKillCalls(stub func(context.Context, string) *redisa.StatusCmd) {
	fake.clientKillMutex.Lock()
	defer fake.clientKillMutex.Unlock()
	fake.ClientKillStub = stub
}

func (fake *FakeCmdable) ClientKillArgsForCall(i int) (context.Context, string) {
	fake.clientKillMutex.RLock()
	defer fake.clientKillMutex.RUnlock()
	argsForCall := fake.clientKillArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClientKillReturns(result1 *redisa.StatusCmd) {
	fake.clientKillMutex.Lock()
	defer fake.clientKillMutex.Unlock()
	fake.ClientKillStub = nil
	fake.clientKillReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClientKillReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.clientKillMutex.Lock()
	defer fake.clientKillMutex.Unlock()
	fake.ClientKillStub = nil
	if fake.clientKillReturnsOnCall == nil {
		fake.clientKillReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.clientKillReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClientKillByFilter(arg1 context.Context, arg2 ...string) *redisa.IntCmd {
	fake.clientKillByFilterMutex.Lock()
	ret, specificReturn := fake.clientKillByFilterReturnsOnCall[len(fake.clientKillByFilterArgsForCall)]
	fake.clientKillByFilterArgsForCall = append(fake.clientKillByFilterArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.ClientKillByFilterStub
	fakeReturns := fake.clientKillByFilterReturns
	fake.recordInvocation("ClientKillByFilter", []interface{}{arg1, arg2})
	fake.clientKillByFilterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClientKillByFilterCallCount() int {
	fake.clientKillByFilterMutex.RLock()
	defer fake.clientKillByFilterMutex.RUnlock()
	return len(fake.clientKillByFilterArgsForCall)
}

func (fake *FakeCmdable) ClientKillByFilterCalls(stub func(context.Context, ...string) *redisa.IntCmd) {
	fake.clientKillByFilterMutex.Lock()
	defer fake.clientKillByFilterMutex.Unlock()
	fake.ClientKillByFilterStub = stub
}

func (fake *FakeCmdable) ClientKillByFilterArgsForCall(i int) (context.Context, []string) {
	fake.clientKillByFilterMutex.RLock()
	defer fake.clientKillByFilterMutex.RUnlock()
	argsForCall := fake.clientKillByFilterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClientKillByFilterReturns(result1 *redisa.IntCmd) {
	fake.clientKillByFilterMutex.Lock()
	defer fake.clientKillByFilterMutex.Unlock()
	fake.ClientKillByFilterStub = nil
	fake.clientKillByFilterReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClientKillByFilterReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.clientKillByFilterMutex.Lock()
	defer fake.clientKillByFilterMutex.Unlock()
	fake.ClientKillByFilterStub = nil
	if fake.clientKillByFilterReturnsOnCall == nil {
		fake.clientKillByFilterReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.clientKillByFilterReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClientList(arg1 context.Context) *redisa.StringCmd {
	fake.clientListMutex.Lock()
	ret, specificReturn := fake.clientListReturnsOnCall[len(fake.clientListArgsForCall)]
	fake.clientListArgsForCall = append(fake.clientListArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClientListStub
	fakeReturns := fake.clientListReturns
	fake.recordInvocation("ClientList", []interface{}{arg1})
	fake.clientListMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClientListCallCount() int {
	fake.clientListMutex.RLock()
	defer fake.clientListMutex.RUnlock()
	return len(fake.clientListArgsForCall)
}

func (fake *FakeCmdable) ClientListCalls(stub func(context.Context) *redisa.StringCmd) {
	fake.clientListMutex.Lock()
	defer fake.clientListMutex.Unlock()
	fake.ClientListStub = stub
}

func (fake *FakeCmdable) ClientListArgsForCall(i int) context.Context {
	fake.clientListMutex.RLock()
	defer fake.clientListMutex.RUnlock()
	argsForCall := fake.clientListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClientListReturns(result1 *redisa.StringCmd) {
	fake.clientListMutex.Lock()
	defer fake.clientListMutex.Unlock()
	fake.ClientListStub = nil
	fake.clientListReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ClientListReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.clientListMutex.Lock()
	defer fake.clientListMutex.Unlock()
	fake.ClientListStub = nil
	if fake.clientListReturnsOnCall == nil {
		fake.clientListReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.clientListReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ClientPause(arg1 context.Context, arg2 time.Duration) *redisa.BoolCmd {
	fake.clientPauseMutex.Lock()
	ret, specificReturn := fake.clientPauseReturnsOnCall[len(fake.clientPauseArgsForCall)]
	fake.clientPauseArgsForCall = append(fake.clientPauseArgsForCall, struct {
		arg1 context.Context
		arg2 time.Duration
	}{arg1, arg2})
	stub := fake.ClientPauseStub
	fakeReturns := fake.clientPauseReturns
	fake.recordInvocation("ClientPause", []interface{}{arg1, arg2})
	fake.clientPauseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClientPauseCallCount() int {
	fake.clientPauseMutex.RLock()
	defer fake.clientPauseMutex.RUnlock()
	return len(fake.clientPauseArgsForCall)
}

func (fake *FakeCmdable) ClientPauseCalls(stub func(context.Context, time.Duration) *redisa.BoolCmd) {
	fake.clientPauseMutex.Lock()
	defer fake.clientPauseMutex.Unlock()
	fake.ClientPauseStub = stub
}

func (fake *FakeCmdable) ClientPauseArgsForCall(i int) (context.Context, time.Duration) {
	fake.clientPauseMutex.RLock()
	defer fake.clientPauseMutex.RUnlock()
	argsForCall := fake.clientPauseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClientPauseReturns(result1 *redisa.BoolCmd) {
	fake.clientPauseMutex.Lock()
	defer fake.clientPauseMutex.Unlock()
	fake.ClientPauseStub = nil
	fake.clientPauseReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ClientPauseReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.clientPauseMutex.Lock()
	defer fake.clientPauseMutex.Unlock()
	fake.ClientPauseStub = nil
	if fake.clientPauseReturnsOnCall == nil {
		fake.clientPauseReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.clientPauseReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ClientUnblock(arg1 context.Context, arg2 int64) *redisa.IntCmd {
	fake.clientUnblockMutex.Lock()
	ret, specificReturn := fake.clientUnblockReturnsOnCall[len(fake.clientUnblockArgsForCall)]
	fake.clientUnblockArgsForCall = append(fake.clientUnblockArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.ClientUnblockStub
	fakeReturns := fake.clientUnblockReturns
	fake.recordInvocation("ClientUnblock", []interface{}{arg1, arg2})
	fake.clientUnblockMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClientUnblockCallCount() int {
	fake.clientUnblockMutex.RLock()
	defer fake.clientUnblockMutex.RUnlock()
	return len(fake.clientUnblockArgsForCall)
}

func (fake *FakeCmdable) ClientUnblockCalls(stub func(context.Context, int64) *redisa.IntCmd) {
	fake.clientUnblockMutex.Lock()
	defer fake.clientUnblockMutex.Unlock()
	fake.ClientUnblockStub = stub
}

func (fake *FakeCmdable) ClientUnblockArgsForCall(i int) (context.Context, int64) {
	fake.clientUnblockMutex.RLock()
	defer fake.clientUnblockMutex.RUnlock()
	argsForCall := fake.clientUnblockArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClientUnblockReturns(result1 *redisa.IntCmd) {
	fake.clientUnblockMutex.Lock()
	defer fake.clientUnblockMutex.Unlock()
	fake.ClientUnblockStub = nil
	fake.clientUnblockReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClientUnblockReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.clientUnblockMutex.Lock()
	defer fake.clientUnblockMutex.Unlock()
	fake.ClientUnblockStub = nil
	if fake.clientUnblockReturnsOnCall == nil {
		fake.clientUnblockReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.clientUnblockReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClientUnblockWithError(arg1 context.Context, arg2 int64) *redisa.IntCmd {
	fake.clientUnblockWithErrorMutex.Lock()
	ret, specificReturn := fake.clientUnblockWithErrorReturnsOnCall[len(fake.clientUnblockWithErrorArgsForCall)]
	fake.clientUnblockWithErrorArgsForCall = append(fake.clientUnblockWithErrorArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.ClientUnblockWithErrorStub
	fakeReturns := fake.clientUnblockWithErrorReturns
	fake.recordInvocation("ClientUnblockWithError", []interface{}{arg1, arg2})
	fake.clientUnblockWithErrorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClientUnblockWithErrorCallCount() int {
	fake.clientUnblockWithErrorMutex.RLock()
	defer fake.clientUnblockWithErrorMutex.RUnlock()
	return len(fake.clientUnblockWithErrorArgsForCall)
}

func (fake *FakeCmdable) ClientUnblockWithErrorCalls(stub func(context.Context, int64) *redisa.IntCmd) {
	fake.clientUnblockWithErrorMutex.Lock()
	defer fake.clientUnblockWithErrorMutex.Unlock()
	fake.ClientUnblockWithErrorStub = stub
}

func (fake *FakeCmdable) ClientUnblockWithErrorArgsForCall(i int) (context.Context, int64) {
	fake.clientUnblockWithErrorMutex.RLock()
	defer fake.clientUnblockWithErrorMutex.RUnlock()
	argsForCall := fake.clientUnblockWithErrorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClientUnblockWithErrorReturns(result1 *redisa.IntCmd) {
	fake.clientUnblockWithErrorMutex.Lock()
	defer fake.clientUnblockWithErrorMutex.Unlock()
	fake.ClientUnblockWithErrorStub = nil
	fake.clientUnblockWithErrorReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClientUnblockWithErrorReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.clientUnblockWithErrorMutex.Lock()
	defer fake.clientUnblockWithErrorMutex.Unlock()
	fake.ClientUnblockWithErrorStub = nil
	if fake.clientUnblockWithErrorReturnsOnCall == nil {
		fake.clientUnblockWithErrorReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.clientUnblockWithErrorReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClientUnpause(arg1 context.Context) *redisa.BoolCmd {
	fake.clientUnpauseMutex.Lock()
	ret, specificReturn := fake.clientUnpauseReturnsOnCall[len(fake.clientUnpauseArgsForCall)]
	fake.clientUnpauseArgsForCall = append(fake.clientUnpauseArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClientUnpauseStub
	fakeReturns := fake.clientUnpauseReturns
	fake.recordInvocation("ClientUnpause", []interface{}{arg1})
	fake.clientUnpauseMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClientUnpauseCallCount() int {
	fake.clientUnpauseMutex.RLock()
	defer fake.clientUnpauseMutex.RUnlock()
	return len(fake.clientUnpauseArgsForCall)
}

func (fake *FakeCmdable) ClientUnpauseCalls(stub func(context.Context) *redisa.BoolCmd) {
	fake.clientUnpauseMutex.Lock()
	defer fake.clientUnpauseMutex.Unlock()
	fake.ClientUnpauseStub = stub
}

func (fake *FakeCmdable) ClientUnpauseArgsForCall(i int) context.Context {
	fake.clientUnpauseMutex.RLock()
	defer fake.clientUnpauseMutex.RUnlock()
	argsForCall := fake.clientUnpauseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClientUnpauseReturns(result1 *redisa.BoolCmd) {
	fake.clientUnpauseMutex.Lock()
	defer fake.clientUnpauseMutex.Unlock()
	fake.ClientUnpauseStub = nil
	fake.clientUnpauseReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ClientUnpauseReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.clientUnpauseMutex.Lock()
	defer fake.clientUnpauseMutex.Unlock()
	fake.ClientUnpauseStub = nil
	if fake.clientUnpauseReturnsOnCall == nil {
		fake.clientUnpauseReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.clientUnpauseReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterAddSlots(arg1 context.Context, arg2 ...int) *redisa.StatusCmd {
	fake.clusterAddSlotsMutex.Lock()
	ret, specificReturn := fake.clusterAddSlotsReturnsOnCall[len(fake.clusterAddSlotsArgsForCall)]
	fake.clusterAddSlotsArgsForCall = append(fake.clusterAddSlotsArgsForCall, struct {
		arg1 context.Context
		arg2 []int
	}{arg1, arg2})
	stub := fake.ClusterAddSlotsStub
	fakeReturns := fake.clusterAddSlotsReturns
	fake.recordInvocation("ClusterAddSlots", []interface{}{arg1, arg2})
	fake.clusterAddSlotsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterAddSlotsCallCount() int {
	fake.clusterAddSlotsMutex.RLock()
	defer fake.clusterAddSlotsMutex.RUnlock()
	return len(fake.clusterAddSlotsArgsForCall)
}

func (fake *FakeCmdable) ClusterAddSlotsCalls(stub func(context.Context, ...int) *redisa.StatusCmd) {
	fake.clusterAddSlotsMutex.Lock()
	defer fake.clusterAddSlotsMutex.Unlock()
	fake.ClusterAddSlotsStub = stub
}

func (fake *FakeCmdable) ClusterAddSlotsArgsForCall(i int) (context.Context, []int) {
	fake.clusterAddSlotsMutex.RLock()
	defer fake.clusterAddSlotsMutex.RUnlock()
	argsForCall := fake.clusterAddSlotsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClusterAddSlotsReturns(result1 *redisa.StatusCmd) {
	fake.clusterAddSlotsMutex.Lock()
	defer fake.clusterAddSlotsMutex.Unlock()
	fake.ClusterAddSlotsStub = nil
	fake.clusterAddSlotsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterAddSlotsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.clusterAddSlotsMutex.Lock()
	defer fake.clusterAddSlotsMutex.Unlock()
	fake.ClusterAddSlotsStub = nil
	if fake.clusterAddSlotsReturnsOnCall == nil {
		fake.clusterAddSlotsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.clusterAddSlotsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterAddSlotsRange(arg1 context.Context, arg2 int, arg3 int) *redisa.StatusCmd {
	fake.clusterAddSlotsRangeMutex.Lock()
	ret, specificReturn := fake.clusterAddSlotsRangeReturnsOnCall[len(fake.clusterAddSlotsRangeArgsForCall)]
	fake.clusterAddSlotsRangeArgsForCall = append(fake.clusterAddSlotsRangeArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.ClusterAddSlotsRangeStub
	fakeReturns := fake.clusterAddSlotsRangeReturns
	fake.recordInvocation("ClusterAddSlotsRange", []interface{}{arg1, arg2, arg3})
	fake.clusterAddSlotsRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterAddSlotsRangeCallCount() int {
	fake.clusterAddSlotsRangeMutex.RLock()
	defer fake.clusterAddSlotsRangeMutex.RUnlock()
	return len(fake.clusterAddSlotsRangeArgsForCall)
}

func (fake *FakeCmdable) ClusterAddSlotsRangeCalls(stub func(context.Context, int, int) *redisa.StatusCmd) {
	fake.clusterAddSlotsRangeMutex.Lock()
	defer fake.clusterAddSlotsRangeMutex.Unlock()
	fake.ClusterAddSlotsRangeStub = stub
}

func (fake *FakeCmdable) ClusterAddSlotsRangeArgsForCall(i int) (context.Context, int, int) {
	fake.clusterAddSlotsRangeMutex.RLock()
	defer fake.clusterAddSlotsRangeMutex.RUnlock()
	argsForCall := fake.clusterAddSlotsRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ClusterAddSlotsRangeReturns(result1 *redisa.StatusCmd) {
	fake.clusterAddSlotsRangeMutex.Lock()
	defer fake.clusterAddSlotsRangeMutex.Unlock()
	fake.ClusterAddSlotsRangeStub = nil
	fake.clusterAddSlotsRangeReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterAddSlotsRangeReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.clusterAddSlotsRangeMutex.Lock()
	defer fake.clusterAddSlotsRangeMutex.Unlock()
	fake.ClusterAddSlotsRangeStub = nil
	if fake.clusterAddSlotsRangeReturnsOnCall == nil {
		fake.clusterAddSlotsRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.clusterAddSlotsRangeReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterCountFailureReports(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.clusterCountFailureReportsMutex.Lock()
	ret, specificReturn := fake.clusterCountFailureReportsReturnsOnCall[len(fake.clusterCountFailureReportsArgsForCall)]
	fake.clusterCountFailureReportsArgsForCall = append(fake.clusterCountFailureReportsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ClusterCountFailureReportsStub
	fakeReturns := fake.clusterCountFailureReportsReturns
	fake.recordInvocation("ClusterCountFailureReports", []interface{}{arg1, arg2})
	fake.clusterCountFailureReportsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterCountFailureReportsCallCount() int {
	fake.clusterCountFailureReportsMutex.RLock()
	defer fake.clusterCountFailureReportsMutex.RUnlock()
	return len(fake.clusterCountFailureReportsArgsForCall)
}

func (fake *FakeCmdable) ClusterCountFailureReportsCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.clusterCountFailureReportsMutex.Lock()
	defer fake.clusterCountFailureReportsMutex.Unlock()
	fake.ClusterCountFailureReportsStub = stub
}

func (fake *FakeCmdable) ClusterCountFailureReportsArgsForCall(i int) (context.Context, string) {
	fake.clusterCountFailureReportsMutex.RLock()
	defer fake.clusterCountFailureReportsMutex.RUnlock()
	argsForCall := fake.clusterCountFailureReportsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClusterCountFailureReportsReturns(result1 *redisa.IntCmd) {
	fake.clusterCountFailureReportsMutex.Lock()
	defer fake.clusterCountFailureReportsMutex.Unlock()
	fake.ClusterCountFailureReportsStub = nil
	fake.clusterCountFailureReportsReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterCountFailureReportsReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.clusterCountFailureReportsMutex.Lock()
	defer fake.clusterCountFailureReportsMutex.Unlock()
	fake.ClusterCountFailureReportsStub = nil
	if fake.clusterCountFailureReportsReturnsOnCall == nil {
		fake.clusterCountFailureReportsReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.clusterCountFailureReportsReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterCountKeysInSlot(arg1 context.Context, arg2 int) *redisa.IntCmd {
	fake.clusterCountKeysInSlotMutex.Lock()
	ret, specificReturn := fake.clusterCountKeysInSlotReturnsOnCall[len(fake.clusterCountKeysInSlotArgsForCall)]
	fake.clusterCountKeysInSlotArgsForCall = append(fake.clusterCountKeysInSlotArgsForCall, struct {
		arg1 context.Context
		arg2 int
	}{arg1, arg2})
	stub := fake.ClusterCountKeysInSlotStub
	fakeReturns := fake.clusterCountKeysInSlotReturns
	fake.recordInvocation("ClusterCountKeysInSlot", []interface{}{arg1, arg2})
	fake.clusterCountKeysInSlotMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterCountKeysInSlotCallCount() int {
	fake.clusterCountKeysInSlotMutex.RLock()
	defer fake.clusterCountKeysInSlotMutex.RUnlock()
	return len(fake.clusterCountKeysInSlotArgsForCall)
}

func (fake *FakeCmdable) ClusterCountKeysInSlotCalls(stub func(context.Context, int) *redisa.IntCmd) {
	fake.clusterCountKeysInSlotMutex.Lock()
	defer fake.clusterCountKeysInSlotMutex.Unlock()
	fake.ClusterCountKeysInSlotStub = stub
}

func (fake *FakeCmdable) ClusterCountKeysInSlotArgsForCall(i int) (context.Context, int) {
	fake.clusterCountKeysInSlotMutex.RLock()
	defer fake.clusterCountKeysInSlotMutex.RUnlock()
	argsForCall := fake.clusterCountKeysInSlotArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClusterCountKeysInSlotReturns(result1 *redisa.IntCmd) {
	fake.clusterCountKeysInSlotMutex.Lock()
	defer fake.clusterCountKeysInSlotMutex.Unlock()
	fake.ClusterCountKeysInSlotStub = nil
	fake.clusterCountKeysInSlotReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterCountKeysInSlotReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.clusterCountKeysInSlotMutex.Lock()
	defer fake.clusterCountKeysInSlotMutex.Unlock()
	fake.ClusterCountKeysInSlotStub = nil
	if fake.clusterCountKeysInSlotReturnsOnCall == nil {
		fake.clusterCountKeysInSlotReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.clusterCountKeysInSlotReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterDelSlots(arg1 context.Context, arg2 ...int) *redisa.StatusCmd {
	fake.clusterDelSlotsMutex.Lock()
	ret, specificReturn := fake.clusterDelSlotsReturnsOnCall[len(fake.clusterDelSlotsArgsForCall)]
	fake.clusterDelSlotsArgsForCall = append(fake.clusterDelSlotsArgsForCall, struct {
		arg1 context.Context
		arg2 []int
	}{arg1, arg2})
	stub := fake.ClusterDelSlotsStub
	fakeReturns := fake.clusterDelSlotsReturns
	fake.recordInvocation("ClusterDelSlots", []interface{}{arg1, arg2})
	fake.clusterDelSlotsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterDelSlotsCallCount() int {
	fake.clusterDelSlotsMutex.RLock()
	defer fake.clusterDelSlotsMutex.RUnlock()
	return len(fake.clusterDelSlotsArgsForCall)
}

func (fake *FakeCmdable) ClusterDelSlotsCalls(stub func(context.Context, ...int) *redisa.StatusCmd) {
	fake.clusterDelSlotsMutex.Lock()
	defer fake.clusterDelSlotsMutex.Unlock()
	fake.ClusterDelSlotsStub = stub
}

func (fake *FakeCmdable) ClusterDelSlotsArgsForCall(i int) (context.Context, []int) {
	fake.clusterDelSlotsMutex.RLock()
	defer fake.clusterDelSlotsMutex.RUnlock()
	argsForCall := fake.clusterDelSlotsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClusterDelSlotsReturns(result1 *redisa.StatusCmd) {
	fake.clusterDelSlotsMutex.Lock()
	defer fake.clusterDelSlotsMutex.Unlock()
	fake.ClusterDelSlotsStub = nil
	fake.clusterDelSlotsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterDelSlotsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.clusterDelSlotsMutex.Lock()
	defer fake.clusterDelSlotsMutex.Unlock()
	fake.ClusterDelSlotsStub = nil
	if fake.clusterDelSlotsReturnsOnCall == nil {
		fake.clusterDelSlotsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.clusterDelSlotsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterDelSlotsRange(arg1 context.Context, arg2 int, arg3 int) *redisa.StatusCmd {
	fake.clusterDelSlotsRangeMutex.Lock()
	ret, specificReturn := fake.clusterDelSlotsRangeReturnsOnCall[len(fake.clusterDelSlotsRangeArgsForCall)]
	fake.clusterDelSlotsRangeArgsForCall = append(fake.clusterDelSlotsRangeArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.ClusterDelSlotsRangeStub
	fakeReturns := fake.clusterDelSlotsRangeReturns
	fake.recordInvocation("ClusterDelSlotsRange", []interface{}{arg1, arg2, arg3})
	fake.clusterDelSlotsRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterDelSlotsRangeCallCount() int {
	fake.clusterDelSlotsRangeMutex.RLock()
	defer fake.clusterDelSlotsRangeMutex.RUnlock()
	return len(fake.clusterDelSlotsRangeArgsForCall)
}

func (fake *FakeCmdable) ClusterDelSlotsRangeCalls(stub func(context.Context, int, int) *redisa.StatusCmd) {
	fake.clusterDelSlotsRangeMutex.Lock()
	defer fake.clusterDelSlotsRangeMutex.Unlock()
	fake.ClusterDelSlotsRangeStub = stub
}

func (fake *FakeCmdable) ClusterDelSlotsRangeArgsForCall(i int) (context.Context, int, int) {
	fake.clusterDelSlotsRangeMutex.RLock()
	defer fake.clusterDelSlotsRangeMutex.RUnlock()
	argsForCall := fake.clusterDelSlotsRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ClusterDelSlotsRangeReturns(result1 *redisa.StatusCmd) {
	fake.clusterDelSlotsRangeMutex.Lock()
	defer fake.clusterDelSlotsRangeMutex.Unlock()
	fake.ClusterDelSlotsRangeStub = nil
	fake.clusterDelSlotsRangeReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterDelSlotsRangeReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.clusterDelSlotsRangeMutex.Lock()
	defer fake.clusterDelSlotsRangeMutex.Unlock()
	fake.ClusterDelSlotsRangeStub = nil
	if fake.clusterDelSlotsRangeReturnsOnCall == nil {
		fake.clusterDelSlotsRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.clusterDelSlotsRangeReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterFailover(arg1 context.Context) *redisa.StatusCmd {
	fake.clusterFailoverMutex.Lock()
	ret, specificReturn := fake.clusterFailoverReturnsOnCall[len(fake.clusterFailoverArgsForCall)]
	fake.clusterFailoverArgsForCall = append(fake.clusterFailoverArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClusterFailoverStub
	fakeReturns := fake.clusterFailoverReturns
	fake.recordInvocation("ClusterFailover", []interface{}{arg1})
	fake.clusterFailoverMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterFailoverCallCount() int {
	fake.clusterFailoverMutex.RLock()
	defer fake.clusterFailoverMutex.RUnlock()
	return len(fake.clusterFailoverArgsForCall)
}

func (fake *FakeCmdable) ClusterFailoverCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.clusterFailoverMutex.Lock()
	defer fake.clusterFailoverMutex.Unlock()
	fake.ClusterFailoverStub = stub
}

func (fake *FakeCmdable) ClusterFailoverArgsForCall(i int) context.Context {
	fake.clusterFailoverMutex.RLock()
	defer fake.clusterFailoverMutex.RUnlock()
	argsForCall := fake.clusterFailoverArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClusterFailoverReturns(result1 *redisa.StatusCmd) {
	fake.clusterFailoverMutex.Lock()
	defer fake.clusterFailoverMutex.Unlock()
	fake.ClusterFailoverStub = nil
	fake.clusterFailoverReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterFailoverReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.clusterFailoverMutex.Lock()
	defer fake.clusterFailoverMutex.Unlock()
	fake.ClusterFailoverStub = nil
	if fake.clusterFailoverReturnsOnCall == nil {
		fake.clusterFailoverReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.clusterFailoverReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterForget(arg1 context.Context, arg2 string) *redisa.StatusCmd {
	fake.clusterForgetMutex.Lock()
	ret, specificReturn := fake.clusterForgetReturnsOnCall[len(fake.clusterForgetArgsForCall)]
	fake.clusterForgetArgsForCall = append(fake.clusterForgetArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ClusterForgetStub
	fakeReturns := fake.clusterForgetReturns
	fake.recordInvocation("ClusterForget", []interface{}{arg1, arg2})
	fake.clusterForgetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterForgetCallCount() int {
	fake.clusterForgetMutex.RLock()
	defer fake.clusterForgetMutex.RUnlock()
	return len(fake.clusterForgetArgsForCall)
}

func (fake *FakeCmdable) ClusterForgetCalls(stub func(context.Context, string) *redisa.StatusCmd) {
	fake.clusterForgetMutex.Lock()
	defer fake.clusterForgetMutex.Unlock()
	fake.ClusterForgetStub = stub
}

func (fake *FakeCmdable) ClusterForgetArgsForCall(i int) (context.Context, string) {
	fake.clusterForgetMutex.RLock()
	defer fake.clusterForgetMutex.RUnlock()
	argsForCall := fake.clusterForgetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClusterForgetReturns(result1 *redisa.StatusCmd) {
	fake.clusterForgetMutex.Lock()
	defer fake.clusterForgetMutex.Unlock()
	fake.ClusterForgetStub = nil
	fake.clusterForgetReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterForgetReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.clusterForgetMutex.Lock()
	defer fake.clusterForgetMutex.Unlock()
	fake.ClusterForgetStub = nil
	if fake.clusterForgetReturnsOnCall == nil {
		fake.clusterForgetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.clusterForgetReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterGetKeysInSlot(arg1 context.Context, arg2 int, arg3 int) *redisa.StringSliceCmd {
	fake.clusterGetKeysInSlotMutex.Lock()
	ret, specificReturn := fake.clusterGetKeysInSlotReturnsOnCall[len(fake.clusterGetKeysInSlotArgsForCall)]
	fake.clusterGetKeysInSlotArgsForCall = append(fake.clusterGetKeysInSlotArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.ClusterGetKeysInSlotStub
	fakeReturns := fake.clusterGetKeysInSlotReturns
	fake.recordInvocation("ClusterGetKeysInSlot", []interface{}{arg1, arg2, arg3})
	fake.clusterGetKeysInSlotMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterGetKeysInSlotCallCount() int {
	fake.clusterGetKeysInSlotMutex.RLock()
	defer fake.clusterGetKeysInSlotMutex.RUnlock()
	return len(fake.clusterGetKeysInSlotArgsForCall)
}

func (fake *FakeCmdable) ClusterGetKeysInSlotCalls(stub func(context.Context, int, int) *redisa.StringSliceCmd) {
	fake.clusterGetKeysInSlotMutex.Lock()
	defer fake.clusterGetKeysInSlotMutex.Unlock()
	fake.ClusterGetKeysInSlotStub = stub
}

func (fake *FakeCmdable) ClusterGetKeysInSlotArgsForCall(i int) (context.Context, int, int) {
	fake.clusterGetKeysInSlotMutex.RLock()
	defer fake.clusterGetKeysInSlotMutex.RUnlock()
	argsForCall := fake.clusterGetKeysInSlotArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ClusterGetKeysInSlotReturns(result1 *redisa.StringSliceCmd) {
	fake.clusterGetKeysInSlotMutex.Lock()
	defer fake.clusterGetKeysInSlotMutex.Unlock()
	fake.ClusterGetKeysInSlotStub = nil
	fake.clusterGetKeysInSlotReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterGetKeysInSlotReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.clusterGetKeysInSlotMutex.Lock()
	defer fake.clusterGetKeysInSlotMutex.Unlock()
	fake.ClusterGetKeysInSlotStub = nil
	if fake.clusterGetKeysInSlotReturnsOnCall == nil {
		fake.clusterGetKeysInSlotReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.clusterGetKeysInSlotReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterInfo(arg1 context.Context) *redisa.StringCmd {
	fake.clusterInfoMutex.Lock()
	ret, specificReturn := fake.clusterInfoReturnsOnCall[len(fake.clusterInfoArgsForCall)]
	fake.clusterInfoArgsForCall = append(fake.clusterInfoArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClusterInfoStub
	fakeReturns := fake.clusterInfoReturns
	fake.recordInvocation("ClusterInfo", []interface{}{arg1})
	fake.clusterInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterInfoCallCount() int {
	fake.clusterInfoMutex.RLock()
	defer fake.clusterInfoMutex.RUnlock()
	return len(fake.clusterInfoArgsForCall)
}

func (fake *FakeCmdable) ClusterInfoCalls(stub func(context.Context) *redisa.StringCmd) {
	fake.clusterInfoMutex.Lock()
	defer fake.clusterInfoMutex.Unlock()
	fake.ClusterInfoStub = stub
}

func (fake *FakeCmdable) ClusterInfoArgsForCall(i int) context.Context {
	fake.clusterInfoMutex.RLock()
	defer fake.clusterInfoMutex.RUnlock()
	argsForCall := fake.clusterInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClusterInfoReturns(result1 *redisa.StringCmd) {
	fake.clusterInfoMutex.Lock()
	defer fake.clusterInfoMutex.Unlock()
	fake.ClusterInfoStub = nil
	fake.clusterInfoReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterInfoReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.clusterInfoMutex.Lock()
	defer fake.clusterInfoMutex.Unlock()
	fake.ClusterInfoStub = nil
	if fake.clusterInfoReturnsOnCall == nil {
		fake.clusterInfoReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.clusterInfoReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterKeySlot(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.clusterKeySlotMutex.Lock()
	ret, specificReturn := fake.clusterKeySlotReturnsOnCall[len(fake.clusterKeySlotArgsForCall)]
	fake.clusterKeySlotArgsForCall = append(fake.clusterKeySlotArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ClusterKeySlotStub
	fakeReturns := fake.clusterKeySlotReturns
	fake.recordInvocation("ClusterKeySlot", []interface{}{arg1, arg2})
	fake.clusterKeySlotMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterKeySlotCallCount() int {
	fake.clusterKeySlotMutex.RLock()
	defer fake.clusterKeySlotMutex.RUnlock()
	return len(fake.clusterKeySlotArgsForCall)
}

func (fake *FakeCmdable) ClusterKeySlotCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.clusterKeySlotMutex.Lock()
	defer fake.clusterKeySlotMutex.Unlock()
	fake.ClusterKeySlotStub = stub
}

func (fake *FakeCmdable) ClusterKeySlotArgsForCall(i int) (context.Context, string) {
	fake.clusterKeySlotMutex.RLock()
	defer fake.clusterKeySlotMutex.RUnlock()
	argsForCall := fake.clusterKeySlotArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClusterKeySlotReturns(result1 *redisa.IntCmd) {
	fake.clusterKeySlotMutex.Lock()
	defer fake.clusterKeySlotMutex.Unlock()
	fake.ClusterKeySlotStub = nil
	fake.clusterKeySlotReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterKeySlotReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.clusterKeySlotMutex.Lock()
	defer fake.clusterKeySlotMutex.Unlock()
	fake.ClusterKeySlotStub = nil
	if fake.clusterKeySlotReturnsOnCall == nil {
		fake.clusterKeySlotReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.clusterKeySlotReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterLinks(arg1 context.Context) *redisa.ClusterLinksCmd {
	fake.clusterLinksMutex.Lock()
	ret, specificReturn := fake.clusterLinksReturnsOnCall[len(fake.clusterLinksArgsForCall)]
	fake.clusterLinksArgsForCall = append(fake.clusterLinksArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClusterLinksStub
	fakeReturns := fake.clusterLinksReturns
	fake.recordInvocation("ClusterLinks", []interface{}{arg1})
	fake.clusterLinksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterLinksCallCount() int {
	fake.clusterLinksMutex.RLock()
	defer fake.clusterLinksMutex.RUnlock()
	return len(fake.clusterLinksArgsForCall)
}

func (fake *FakeCmdable) ClusterLinksCalls(stub func(context.Context) *redisa.ClusterLinksCmd) {
	fake.clusterLinksMutex.Lock()
	defer fake.clusterLinksMutex.Unlock()
	fake.ClusterLinksStub = stub
}

func (fake *FakeCmdable) ClusterLinksArgsForCall(i int) context.Context {
	fake.clusterLinksMutex.RLock()
	defer fake.clusterLinksMutex.RUnlock()
	argsForCall := fake.clusterLinksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClusterLinksReturns(result1 *redisa.ClusterLinksCmd) {
	fake.clusterLinksMutex.Lock()
	defer fake.clusterLinksMutex.Unlock()
	fake.ClusterLinksStub = nil
	fake.clusterLinksReturns = struct {
		result1 *redisa.ClusterLinksCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterLinksReturnsOnCall(i int, result1 *redisa.ClusterLinksCmd) {
	fake.clusterLinksMutex.Lock()
	defer fake.clusterLinksMutex.Unlock()
	fake.ClusterLinksStub = nil
	if fake.clusterLinksReturnsOnCall == nil {
		fake.clusterLinksReturnsOnCall = make(map[int]struct {
			result1 *redisa.ClusterLinksCmd
		})
	}
	fake.clusterLinksReturnsOnCall[i] = struct {
		result1 *redisa.ClusterLinksCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterMeet(arg1 context.Context, arg2 string, arg3 string) *redisa.StatusCmd {
	fake.clusterMeetMutex.Lock()
	ret, specificReturn := fake.clusterMeetReturnsOnCall[len(fake.clusterMeetArgsForCall)]
	fake.clusterMeetArgsForCall = append(fake.clusterMeetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ClusterMeetStub
	fakeReturns := fake.clusterMeetReturns
	fake.recordInvocation("ClusterMeet", []interface{}{arg1, arg2, arg3})
	fake.clusterMeetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterMeetCallCount() int {
	fake.clusterMeetMutex.RLock()
	defer fake.clusterMeetMutex.RUnlock()
	return len(fake.clusterMeetArgsForCall)
}

func (fake *FakeCmdable) ClusterMeetCalls(stub func(context.Context, string, string) *redisa.StatusCmd) {
	fake.clusterMeetMutex.Lock()
	defer fake.clusterMeetMutex.Unlock()
	fake.ClusterMeetStub = stub
}

func (fake *FakeCmdable) ClusterMeetArgsForCall(i int) (context.Context, string, string) {
	fake.clusterMeetMutex.RLock()
	defer fake.clusterMeetMutex.RUnlock()
	argsForCall := fake.clusterMeetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ClusterMeetReturns(result1 *redisa.StatusCmd) {
	fake.clusterMeetMutex.Lock()
	defer fake.clusterMeetMutex.Unlock()
	fake.ClusterMeetStub = nil
	fake.clusterMeetReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterMeetReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.clusterMeetMutex.Lock()
	defer fake.clusterMeetMutex.Unlock()
	fake.ClusterMeetStub = nil
	if fake.clusterMeetReturnsOnCall == nil {
		fake.clusterMeetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.clusterMeetReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterMyShardID(arg1 context.Context) *redisa.StringCmd {
	fake.clusterMyShardIDMutex.Lock()
	ret, specificReturn := fake.clusterMyShardIDReturnsOnCall[len(fake.clusterMyShardIDArgsForCall)]
	fake.clusterMyShardIDArgsForCall = append(fake.clusterMyShardIDArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClusterMyShardIDStub
	fakeReturns := fake.clusterMyShardIDReturns
	fake.recordInvocation("ClusterMyShardID", []interface{}{arg1})
	fake.clusterMyShardIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterMyShardIDCallCount() int {
	fake.clusterMyShardIDMutex.RLock()
	defer fake.clusterMyShardIDMutex.RUnlock()
	return len(fake.clusterMyShardIDArgsForCall)
}

func (fake *FakeCmdable) ClusterMyShardIDCalls(stub func(context.Context) *redisa.StringCmd) {
	fake.clusterMyShardIDMutex.Lock()
	defer fake.clusterMyShardIDMutex.Unlock()
	fake.ClusterMyShardIDStub = stub
}

func (fake *FakeCmdable) ClusterMyShardIDArgsForCall(i int) context.Context {
	fake.clusterMyShardIDMutex.RLock()
	defer fake.clusterMyShardIDMutex.RUnlock()
	argsForCall := fake.clusterMyShardIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClusterMyShardIDReturns(result1 *redisa.StringCmd) {
	fake.clusterMyShardIDMutex.Lock()
	defer fake.clusterMyShardIDMutex.Unlock()
	fake.ClusterMyShardIDStub = nil
	fake.clusterMyShardIDReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterMyShardIDReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.clusterMyShardIDMutex.Lock()
	defer fake.clusterMyShardIDMutex.Unlock()
	fake.ClusterMyShardIDStub = nil
	if fake.clusterMyShardIDReturnsOnCall == nil {
		fake.clusterMyShardIDReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.clusterMyShardIDReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterNodes(arg1 context.Context) *redisa.StringCmd {
	fake.clusterNodesMutex.Lock()
	ret, specificReturn := fake.clusterNodesReturnsOnCall[len(fake.clusterNodesArgsForCall)]
	fake.clusterNodesArgsForCall = append(fake.clusterNodesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClusterNodesStub
	fakeReturns := fake.clusterNodesReturns
	fake.recordInvocation("ClusterNodes", []interface{}{arg1})
	fake.clusterNodesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterNodesCallCount() int {
	fake.clusterNodesMutex.RLock()
	defer fake.clusterNodesMutex.RUnlock()
	return len(fake.clusterNodesArgsForCall)
}

func (fake *FakeCmdable) ClusterNodesCalls(stub func(context.Context) *redisa.StringCmd) {
	fake.clusterNodesMutex.Lock()
	defer fake.clusterNodesMutex.Unlock()
	fake.ClusterNodesStub = stub
}

func (fake *FakeCmdable) ClusterNodesArgsForCall(i int) context.Context {
	fake.clusterNodesMutex.RLock()
	defer fake.clusterNodesMutex.RUnlock()
	argsForCall := fake.clusterNodesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClusterNodesReturns(result1 *redisa.StringCmd) {
	fake.clusterNodesMutex.Lock()
	defer fake.clusterNodesMutex.Unlock()
	fake.ClusterNodesStub = nil
	fake.clusterNodesReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterNodesReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.clusterNodesMutex.Lock()
	defer fake.clusterNodesMutex.Unlock()
	fake.ClusterNodesStub = nil
	if fake.clusterNodesReturnsOnCall == nil {
		fake.clusterNodesReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.clusterNodesReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterReplicate(arg1 context.Context, arg2 string) *redisa.StatusCmd {
	fake.clusterReplicateMutex.Lock()
	ret, specificReturn := fake.clusterReplicateReturnsOnCall[len(fake.clusterReplicateArgsForCall)]
	fake.clusterReplicateArgsForCall = append(fake.clusterReplicateArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ClusterReplicateStub
	fakeReturns := fake.clusterReplicateReturns
	fake.recordInvocation("ClusterReplicate", []interface{}{arg1, arg2})
	fake.clusterReplicateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterReplicateCallCount() int {
	fake.clusterReplicateMutex.RLock()
	defer fake.clusterReplicateMutex.RUnlock()
	return len(fake.clusterReplicateArgsForCall)
}

func (fake *FakeCmdable) ClusterReplicateCalls(stub func(context.Context, string) *redisa.StatusCmd) {
	fake.clusterReplicateMutex.Lock()
	defer fake.clusterReplicateMutex.Unlock()
	fake.ClusterReplicateStub = stub
}

func (fake *FakeCmdable) ClusterReplicateArgsForCall(i int) (context.Context, string) {
	fake.clusterReplicateMutex.RLock()
	defer fake.clusterReplicateMutex.RUnlock()
	argsForCall := fake.clusterReplicateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClusterReplicateReturns(result1 *redisa.StatusCmd) {
	fake.clusterReplicateMutex.Lock()
	defer fake.clusterReplicateMutex.Unlock()
	fake.ClusterReplicateStub = nil
	fake.clusterReplicateReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterReplicateReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.clusterReplicateMutex.Lock()
	defer fake.clusterReplicateMutex.Unlock()
	fake.ClusterReplicateStub = nil
	if fake.clusterReplicateReturnsOnCall == nil {
		fake.clusterReplicateReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.clusterReplicateReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterResetHard(arg1 context.Context) *redisa.StatusCmd {
	fake.clusterResetHardMutex.Lock()
	ret, specificReturn := fake.clusterResetHardReturnsOnCall[len(fake.clusterResetHardArgsForCall)]
	fake.clusterResetHardArgsForCall = append(fake.clusterResetHardArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClusterResetHardStub
	fakeReturns := fake.clusterResetHardReturns
	fake.recordInvocation("ClusterResetHard", []interface{}{arg1})
	fake.clusterResetHardMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterResetHardCallCount() int {
	fake.clusterResetHardMutex.RLock()
	defer fake.clusterResetHardMutex.RUnlock()
	return len(fake.clusterResetHardArgsForCall)
}

func (fake *FakeCmdable) ClusterResetHardCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.clusterResetHardMutex.Lock()
	defer fake.clusterResetHardMutex.Unlock()
	fake.ClusterResetHardStub = stub
}

func (fake *FakeCmdable) ClusterResetHardArgsForCall(i int) context.Context {
	fake.clusterResetHardMutex.RLock()
	defer fake.clusterResetHardMutex.RUnlock()
	argsForCall := fake.clusterResetHardArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClusterResetHardReturns(result1 *redisa.StatusCmd) {
	fake.clusterResetHardMutex.Lock()
	defer fake.clusterResetHardMutex.Unlock()
	fake.ClusterResetHardStub = nil
	fake.clusterResetHardReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterResetHardReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.clusterResetHardMutex.Lock()
	defer fake.clusterResetHardMutex.Unlock()
	fake.ClusterResetHardStub = nil
	if fake.clusterResetHardReturnsOnCall == nil {
		fake.clusterResetHardReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.clusterResetHardReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterResetSoft(arg1 context.Context) *redisa.StatusCmd {
	fake.clusterResetSoftMutex.Lock()
	ret, specificReturn := fake.clusterResetSoftReturnsOnCall[len(fake.clusterResetSoftArgsForCall)]
	fake.clusterResetSoftArgsForCall = append(fake.clusterResetSoftArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClusterResetSoftStub
	fakeReturns := fake.clusterResetSoftReturns
	fake.recordInvocation("ClusterResetSoft", []interface{}{arg1})
	fake.clusterResetSoftMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterResetSoftCallCount() int {
	fake.clusterResetSoftMutex.RLock()
	defer fake.clusterResetSoftMutex.RUnlock()
	return len(fake.clusterResetSoftArgsForCall)
}

func (fake *FakeCmdable) ClusterResetSoftCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.clusterResetSoftMutex.Lock()
	defer fake.clusterResetSoftMutex.Unlock()
	fake.ClusterResetSoftStub = stub
}

func (fake *FakeCmdable) ClusterResetSoftArgsForCall(i int) context.Context {
	fake.clusterResetSoftMutex.RLock()
	defer fake.clusterResetSoftMutex.RUnlock()
	argsForCall := fake.clusterResetSoftArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClusterResetSoftReturns(result1 *redisa.StatusCmd) {
	fake.clusterResetSoftMutex.Lock()
	defer fake.clusterResetSoftMutex.Unlock()
	fake.ClusterResetSoftStub = nil
	fake.clusterResetSoftReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterResetSoftReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.clusterResetSoftMutex.Lock()
	defer fake.clusterResetSoftMutex.Unlock()
	fake.ClusterResetSoftStub = nil
	if fake.clusterResetSoftReturnsOnCall == nil {
		fake.clusterResetSoftReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.clusterResetSoftReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterSaveConfig(arg1 context.Context) *redisa.StatusCmd {
	fake.clusterSaveConfigMutex.Lock()
	ret, specificReturn := fake.clusterSaveConfigReturnsOnCall[len(fake.clusterSaveConfigArgsForCall)]
	fake.clusterSaveConfigArgsForCall = append(fake.clusterSaveConfigArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClusterSaveConfigStub
	fakeReturns := fake.clusterSaveConfigReturns
	fake.recordInvocation("ClusterSaveConfig", []interface{}{arg1})
	fake.clusterSaveConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterSaveConfigCallCount() int {
	fake.clusterSaveConfigMutex.RLock()
	defer fake.clusterSaveConfigMutex.RUnlock()
	return len(fake.clusterSaveConfigArgsForCall)
}

func (fake *FakeCmdable) ClusterSaveConfigCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.clusterSaveConfigMutex.Lock()
	defer fake.clusterSaveConfigMutex.Unlock()
	fake.ClusterSaveConfigStub = stub
}

func (fake *FakeCmdable) ClusterSaveConfigArgsForCall(i int) context.Context {
	fake.clusterSaveConfigMutex.RLock()
	defer fake.clusterSaveConfigMutex.RUnlock()
	argsForCall := fake.clusterSaveConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClusterSaveConfigReturns(result1 *redisa.StatusCmd) {
	fake.clusterSaveConfigMutex.Lock()
	defer fake.clusterSaveConfigMutex.Unlock()
	fake.ClusterSaveConfigStub = nil
	fake.clusterSaveConfigReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterSaveConfigReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.clusterSaveConfigMutex.Lock()
	defer fake.clusterSaveConfigMutex.Unlock()
	fake.ClusterSaveConfigStub = nil
	if fake.clusterSaveConfigReturnsOnCall == nil {
		fake.clusterSaveConfigReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.clusterSaveConfigReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterShards(arg1 context.Context) *redisa.ClusterShardsCmd {
	fake.clusterShardsMutex.Lock()
	ret, specificReturn := fake.clusterShardsReturnsOnCall[len(fake.clusterShardsArgsForCall)]
	fake.clusterShardsArgsForCall = append(fake.clusterShardsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClusterShardsStub
	fakeReturns := fake.clusterShardsReturns
	fake.recordInvocation("ClusterShards", []interface{}{arg1})
	fake.clusterShardsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterShardsCallCount() int {
	fake.clusterShardsMutex.RLock()
	defer fake.clusterShardsMutex.RUnlock()
	return len(fake.clusterShardsArgsForCall)
}

func (fake *FakeCmdable) ClusterShardsCalls(stub func(context.Context) *redisa.ClusterShardsCmd) {
	fake.clusterShardsMutex.Lock()
	defer fake.clusterShardsMutex.Unlock()
	fake.ClusterShardsStub = stub
}

func (fake *FakeCmdable) ClusterShardsArgsForCall(i int) context.Context {
	fake.clusterShardsMutex.RLock()
	defer fake.clusterShardsMutex.RUnlock()
	argsForCall := fake.clusterShardsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClusterShardsReturns(result1 *redisa.ClusterShardsCmd) {
	fake.clusterShardsMutex.Lock()
	defer fake.clusterShardsMutex.Unlock()
	fake.ClusterShardsStub = nil
	fake.clusterShardsReturns = struct {
		result1 *redisa.ClusterShardsCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterShardsReturnsOnCall(i int, result1 *redisa.ClusterShardsCmd) {
	fake.clusterShardsMutex.Lock()
	defer fake.clusterShardsMutex.Unlock()
	fake.ClusterShardsStub = nil
	if fake.clusterShardsReturnsOnCall == nil {
		fake.clusterShardsReturnsOnCall = make(map[int]struct {
			result1 *redisa.ClusterShardsCmd
		})
	}
	fake.clusterShardsReturnsOnCall[i] = struct {
		result1 *redisa.ClusterShardsCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterSlaves(arg1 context.Context, arg2 string) *redisa.StringSliceCmd {
	fake.clusterSlavesMutex.Lock()
	ret, specificReturn := fake.clusterSlavesReturnsOnCall[len(fake.clusterSlavesArgsForCall)]
	fake.clusterSlavesArgsForCall = append(fake.clusterSlavesArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ClusterSlavesStub
	fakeReturns := fake.clusterSlavesReturns
	fake.recordInvocation("ClusterSlaves", []interface{}{arg1, arg2})
	fake.clusterSlavesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterSlavesCallCount() int {
	fake.clusterSlavesMutex.RLock()
	defer fake.clusterSlavesMutex.RUnlock()
	return len(fake.clusterSlavesArgsForCall)
}

func (fake *FakeCmdable) ClusterSlavesCalls(stub func(context.Context, string) *redisa.StringSliceCmd) {
	fake.clusterSlavesMutex.Lock()
	defer fake.clusterSlavesMutex.Unlock()
	fake.ClusterSlavesStub = stub
}

func (fake *FakeCmdable) ClusterSlavesArgsForCall(i int) (context.Context, string) {
	fake.clusterSlavesMutex.RLock()
	defer fake.clusterSlavesMutex.RUnlock()
	argsForCall := fake.clusterSlavesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ClusterSlavesReturns(result1 *redisa.StringSliceCmd) {
	fake.clusterSlavesMutex.Lock()
	defer fake.clusterSlavesMutex.Unlock()
	fake.ClusterSlavesStub = nil
	fake.clusterSlavesReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterSlavesReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.clusterSlavesMutex.Lock()
	defer fake.clusterSlavesMutex.Unlock()
	fake.ClusterSlavesStub = nil
	if fake.clusterSlavesReturnsOnCall == nil {
		fake.clusterSlavesReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.clusterSlavesReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterSlots(arg1 context.Context) *redisa.ClusterSlotsCmd {
	fake.clusterSlotsMutex.Lock()
	ret, specificReturn := fake.clusterSlotsReturnsOnCall[len(fake.clusterSlotsArgsForCall)]
	fake.clusterSlotsArgsForCall = append(fake.clusterSlotsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ClusterSlotsStub
	fakeReturns := fake.clusterSlotsReturns
	fake.recordInvocation("ClusterSlots", []interface{}{arg1})
	fake.clusterSlotsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ClusterSlotsCallCount() int {
	fake.clusterSlotsMutex.RLock()
	defer fake.clusterSlotsMutex.RUnlock()
	return len(fake.clusterSlotsArgsForCall)
}

func (fake *FakeCmdable) ClusterSlotsCalls(stub func(context.Context) *redisa.ClusterSlotsCmd) {
	fake.clusterSlotsMutex.Lock()
	defer fake.clusterSlotsMutex.Unlock()
	fake.ClusterSlotsStub = stub
}

func (fake *FakeCmdable) ClusterSlotsArgsForCall(i int) context.Context {
	fake.clusterSlotsMutex.RLock()
	defer fake.clusterSlotsMutex.RUnlock()
	argsForCall := fake.clusterSlotsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ClusterSlotsReturns(result1 *redisa.ClusterSlotsCmd) {
	fake.clusterSlotsMutex.Lock()
	defer fake.clusterSlotsMutex.Unlock()
	fake.ClusterSlotsStub = nil
	fake.clusterSlotsReturns = struct {
		result1 *redisa.ClusterSlotsCmd
	}{result1}
}

func (fake *FakeCmdable) ClusterSlotsReturnsOnCall(i int, result1 *redisa.ClusterSlotsCmd) {
	fake.clusterSlotsMutex.Lock()
	defer fake.clusterSlotsMutex.Unlock()
	fake.ClusterSlotsStub = nil
	if fake.clusterSlotsReturnsOnCall == nil {
		fake.clusterSlotsReturnsOnCall = make(map[int]struct {
			result1 *redisa.ClusterSlotsCmd
		})
	}
	fake.clusterSlotsReturnsOnCall[i] = struct {
		result1 *redisa.ClusterSlotsCmd
	}{result1}
}

func (fake *FakeCmdable) Command(arg1 context.Context) *redisa.CommandsInfoCmd {
	fake.commandMutex.Lock()
	ret, specificReturn := fake.commandReturnsOnCall[len(fake.commandArgsForCall)]
	fake.commandArgsForCall = append(fake.commandArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CommandStub
	fakeReturns := fake.commandReturns
	fake.recordInvocation("Command", []interface{}{arg1})
	fake.commandMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CommandCallCount() int {
	fake.commandMutex.RLock()
	defer fake.commandMutex.RUnlock()
	return len(fake.commandArgsForCall)
}

func (fake *FakeCmdable) CommandCalls(stub func(context.Context) *redisa.CommandsInfoCmd) {
	fake.commandMutex.Lock()
	defer fake.commandMutex.Unlock()
	fake.CommandStub = stub
}

func (fake *FakeCmdable) CommandArgsForCall(i int) context.Context {
	fake.commandMutex.RLock()
	defer fake.commandMutex.RUnlock()
	argsForCall := fake.commandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) CommandReturns(result1 *redisa.CommandsInfoCmd) {
	fake.commandMutex.Lock()
	defer fake.commandMutex.Unlock()
	fake.CommandStub = nil
	fake.commandReturns = struct {
		result1 *redisa.CommandsInfoCmd
	}{result1}
}

func (fake *FakeCmdable) CommandReturnsOnCall(i int, result1 *redisa.CommandsInfoCmd) {
	fake.commandMutex.Lock()
	defer fake.commandMutex.Unlock()
	fake.CommandStub = nil
	if fake.commandReturnsOnCall == nil {
		fake.commandReturnsOnCall = make(map[int]struct {
			result1 *redisa.CommandsInfoCmd
		})
	}
	fake.commandReturnsOnCall[i] = struct {
		result1 *redisa.CommandsInfoCmd
	}{result1}
}

func (fake *FakeCmdable) CommandGetKeys(arg1 context.Context, arg2 ...interface{}) *redisa.StringSliceCmd {
	fake.commandGetKeysMutex.Lock()
	ret, specificReturn := fake.commandGetKeysReturnsOnCall[len(fake.commandGetKeysArgsForCall)]
	fake.commandGetKeysArgsForCall = append(fake.commandGetKeysArgsForCall, struct {
		arg1 context.Context
		arg2 []interface{}
	}{arg1, arg2})
	stub := fake.CommandGetKeysStub
	fakeReturns := fake.commandGetKeysReturns
	fake.recordInvocation("CommandGetKeys", []interface{}{arg1, arg2})
	fake.commandGetKeysMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CommandGetKeysCallCount() int {
	fake.commandGetKeysMutex.RLock()
	defer fake.commandGetKeysMutex.RUnlock()
	return len(fake.commandGetKeysArgsForCall)
}

func (fake *FakeCmdable) CommandGetKeysCalls(stub func(context.Context, ...interface{}) *redisa.StringSliceCmd) {
	fake.commandGetKeysMutex.Lock()
	defer fake.commandGetKeysMutex.Unlock()
	fake.CommandGetKeysStub = stub
}

func (fake *FakeCmdable) CommandGetKeysArgsForCall(i int) (context.Context, []interface{}) {
	fake.commandGetKeysMutex.RLock()
	defer fake.commandGetKeysMutex.RUnlock()
	argsForCall := fake.commandGetKeysArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) CommandGetKeysReturns(result1 *redisa.StringSliceCmd) {
	fake.commandGetKeysMutex.Lock()
	defer fake.commandGetKeysMutex.Unlock()
	fake.CommandGetKeysStub = nil
	fake.commandGetKeysReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) CommandGetKeysReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.commandGetKeysMutex.Lock()
	defer fake.commandGetKeysMutex.Unlock()
	fake.CommandGetKeysStub = nil
	if fake.commandGetKeysReturnsOnCall == nil {
		fake.commandGetKeysReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.commandGetKeysReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) CommandGetKeysAndFlags(arg1 context.Context, arg2 ...interface{}) *redisa.KeyFlagsCmd {
	fake.commandGetKeysAndFlagsMutex.Lock()
	ret, specificReturn := fake.commandGetKeysAndFlagsReturnsOnCall[len(fake.commandGetKeysAndFlagsArgsForCall)]
	fake.commandGetKeysAndFlagsArgsForCall = append(fake.commandGetKeysAndFlagsArgsForCall, struct {
		arg1 context.Context
		arg2 []interface{}
	}{arg1, arg2})
	stub := fake.CommandGetKeysAndFlagsStub
	fakeReturns := fake.commandGetKeysAndFlagsReturns
	fake.recordInvocation("CommandGetKeysAndFlags", []interface{}{arg1, arg2})
	fake.commandGetKeysAndFlagsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CommandGetKeysAndFlagsCallCount() int {
	fake.commandGetKeysAndFlagsMutex.RLock()
	defer fake.commandGetKeysAndFlagsMutex.RUnlock()
	return len(fake.commandGetKeysAndFlagsArgsForCall)
}

func (fake *FakeCmdable) CommandGetKeysAndFlagsCalls(stub func(context.Context, ...interface{}) *redisa.KeyFlagsCmd) {
	fake.commandGetKeysAndFlagsMutex.Lock()
	defer fake.commandGetKeysAndFlagsMutex.Unlock()
	fake.CommandGetKeysAndFlagsStub = stub
}

func (fake *FakeCmdable) CommandGetKeysAndFlagsArgsForCall(i int) (context.Context, []interface{}) {
	fake.commandGetKeysAndFlagsMutex.RLock()
	defer fake.commandGetKeysAndFlagsMutex.RUnlock()
	argsForCall := fake.commandGetKeysAndFlagsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) CommandGetKeysAndFlagsReturns(result1 *redisa.KeyFlagsCmd) {
	fake.commandGetKeysAndFlagsMutex.Lock()
	defer fake.commandGetKeysAndFlagsMutex.Unlock()
	fake.CommandGetKeysAndFlagsStub = nil
	fake.commandGetKeysAndFlagsReturns = struct {
		result1 *redisa.KeyFlagsCmd
	}{result1}
}

func (fake *FakeCmdable) CommandGetKeysAndFlagsReturnsOnCall(i int, result1 *redisa.KeyFlagsCmd) {
	fake.commandGetKeysAndFlagsMutex.Lock()
	defer fake.commandGetKeysAndFlagsMutex.Unlock()
	fake.CommandGetKeysAndFlagsStub = nil
	if fake.commandGetKeysAndFlagsReturnsOnCall == nil {
		fake.commandGetKeysAndFlagsReturnsOnCall = make(map[int]struct {
			result1 *redisa.KeyFlagsCmd
		})
	}
	fake.commandGetKeysAndFlagsReturnsOnCall[i] = struct {
		result1 *redisa.KeyFlagsCmd
	}{result1}
}

func (fake *FakeCmdable) CommandList(arg1 context.Context, arg2 *redisa.FilterBy) *redisa.StringSliceCmd {
	fake.commandListMutex.Lock()
	ret, specificReturn := fake.commandListReturnsOnCall[len(fake.commandListArgsForCall)]
	fake.commandListArgsForCall = append(fake.commandListArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.FilterBy
	}{arg1, arg2})
	stub := fake.CommandListStub
	fakeReturns := fake.commandListReturns
	fake.recordInvocation("CommandList", []interface{}{arg1, arg2})
	fake.commandListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CommandListCallCount() int {
	fake.commandListMutex.RLock()
	defer fake.commandListMutex.RUnlock()
	return len(fake.commandListArgsForCall)
}

func (fake *FakeCmdable) CommandListCalls(stub func(context.Context, *redisa.FilterBy) *redisa.StringSliceCmd) {
	fake.commandListMutex.Lock()
	defer fake.commandListMutex.Unlock()
	fake.CommandListStub = stub
}

func (fake *FakeCmdable) CommandListArgsForCall(i int) (context.Context, *redisa.FilterBy) {
	fake.commandListMutex.RLock()
	defer fake.commandListMutex.RUnlock()
	argsForCall := fake.commandListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) CommandListReturns(result1 *redisa.StringSliceCmd) {
	fake.commandListMutex.Lock()
	defer fake.commandListMutex.Unlock()
	fake.CommandListStub = nil
	fake.commandListReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) CommandListReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.commandListMutex.Lock()
	defer fake.commandListMutex.Unlock()
	fake.CommandListStub = nil
	if fake.commandListReturnsOnCall == nil {
		fake.commandListReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.commandListReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ConfigGet(arg1 context.Context, arg2 string) *redisa.MapStringStringCmd {
	fake.configGetMutex.Lock()
	ret, specificReturn := fake.configGetReturnsOnCall[len(fake.configGetArgsForCall)]
	fake.configGetArgsForCall = append(fake.configGetArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ConfigGetStub
	fakeReturns := fake.configGetReturns
	fake.recordInvocation("ConfigGet", []interface{}{arg1, arg2})
	fake.configGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ConfigGetCallCount() int {
	fake.configGetMutex.RLock()
	defer fake.configGetMutex.RUnlock()
	return len(fake.configGetArgsForCall)
}

func (fake *FakeCmdable) ConfigGetCalls(stub func(context.Context, string) *redisa.MapStringStringCmd) {
	fake.configGetMutex.Lock()
	defer fake.configGetMutex.Unlock()
	fake.ConfigGetStub = stub
}

func (fake *FakeCmdable) ConfigGetArgsForCall(i int) (context.Context, string) {
	fake.configGetMutex.RLock()
	defer fake.configGetMutex.RUnlock()
	argsForCall := fake.configGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ConfigGetReturns(result1 *redisa.MapStringStringCmd) {
	fake.configGetMutex.Lock()
	defer fake.configGetMutex.Unlock()
	fake.ConfigGetStub = nil
	fake.configGetReturns = struct {
		result1 *redisa.MapStringStringCmd
	}{result1}
}

func (fake *FakeCmdable) ConfigGetReturnsOnCall(i int, result1 *redisa.MapStringStringCmd) {
	fake.configGetMutex.Lock()
	defer fake.configGetMutex.Unlock()
	fake.ConfigGetStub = nil
	if fake.configGetReturnsOnCall == nil {
		fake.configGetReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringStringCmd
		})
	}
	fake.configGetReturnsOnCall[i] = struct {
		result1 *redisa.MapStringStringCmd
	}{result1}
}

func (fake *FakeCmdable) ConfigResetStat(arg1 context.Context) *redisa.StatusCmd {
	fake.configResetStatMutex.Lock()
	ret, specificReturn := fake.configResetStatReturnsOnCall[len(fake.configResetStatArgsForCall)]
	fake.configResetStatArgsForCall = append(fake.configResetStatArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ConfigResetStatStub
	fakeReturns := fake.configResetStatReturns
	fake.recordInvocation("ConfigResetStat", []interface{}{arg1})
	fake.configResetStatMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ConfigResetStatCallCount() int {
	fake.configResetStatMutex.RLock()
	defer fake.configResetStatMutex.RUnlock()
	return len(fake.configResetStatArgsForCall)
}

func (fake *FakeCmdable) ConfigResetStatCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.configResetStatMutex.Lock()
	defer fake.configResetStatMutex.Unlock()
	fake.ConfigResetStatStub = stub
}

func (fake *FakeCmdable) ConfigResetStatArgsForCall(i int) context.Context {
	fake.configResetStatMutex.RLock()
	defer fake.configResetStatMutex.RUnlock()
	argsForCall := fake.configResetStatArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ConfigResetStatReturns(result1 *redisa.StatusCmd) {
	fake.configResetStatMutex.Lock()
	defer fake.configResetStatMutex.Unlock()
	fake.ConfigResetStatStub = nil
	fake.configResetStatReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ConfigResetStatReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.configResetStatMutex.Lock()
	defer fake.configResetStatMutex.Unlock()
	fake.ConfigResetStatStub = nil
	if fake.configResetStatReturnsOnCall == nil {
		fake.configResetStatReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.configResetStatReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ConfigRewrite(arg1 context.Context) *redisa.StatusCmd {
	fake.configRewriteMutex.Lock()
	ret, specificReturn := fake.configRewriteReturnsOnCall[len(fake.configRewriteArgsForCall)]
	fake.configRewriteArgsForCall = append(fake.configRewriteArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ConfigRewriteStub
	fakeReturns := fake.configRewriteReturns
	fake.recordInvocation("ConfigRewrite", []interface{}{arg1})
	fake.configRewriteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ConfigRewriteCallCount() int {
	fake.configRewriteMutex.RLock()
	defer fake.configRewriteMutex.RUnlock()
	return len(fake.configRewriteArgsForCall)
}

func (fake *FakeCmdable) ConfigRewriteCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.configRewriteMutex.Lock()
	defer fake.configRewriteMutex.Unlock()
	fake.ConfigRewriteStub = stub
}

func (fake *FakeCmdable) ConfigRewriteArgsForCall(i int) context.Context {
	fake.configRewriteMutex.RLock()
	defer fake.configRewriteMutex.RUnlock()
	argsForCall := fake.configRewriteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ConfigRewriteReturns(result1 *redisa.StatusCmd) {
	fake.configRewriteMutex.Lock()
	defer fake.configRewriteMutex.Unlock()
	fake.ConfigRewriteStub = nil
	fake.configRewriteReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ConfigRewriteReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.configRewriteMutex.Lock()
	defer fake.configRewriteMutex.Unlock()
	fake.ConfigRewriteStub = nil
	if fake.configRewriteReturnsOnCall == nil {
		fake.configRewriteReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.configRewriteReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ConfigSet(arg1 context.Context, arg2 string, arg3 string) *redisa.StatusCmd {
	fake.configSetMutex.Lock()
	ret, specificReturn := fake.configSetReturnsOnCall[len(fake.configSetArgsForCall)]
	fake.configSetArgsForCall = append(fake.configSetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ConfigSetStub
	fakeReturns := fake.configSetReturns
	fake.recordInvocation("ConfigSet", []interface{}{arg1, arg2, arg3})
	fake.configSetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ConfigSetCallCount() int {
	fake.configSetMutex.RLock()
	defer fake.configSetMutex.RUnlock()
	return len(fake.configSetArgsForCall)
}

func (fake *FakeCmdable) ConfigSetCalls(stub func(context.Context, string, string) *redisa.StatusCmd) {
	fake.configSetMutex.Lock()
	defer fake.configSetMutex.Unlock()
	fake.ConfigSetStub = stub
}

func (fake *FakeCmdable) ConfigSetArgsForCall(i int) (context.Context, string, string) {
	fake.configSetMutex.RLock()
	defer fake.configSetMutex.RUnlock()
	argsForCall := fake.configSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ConfigSetReturns(result1 *redisa.StatusCmd) {
	fake.configSetMutex.Lock()
	defer fake.configSetMutex.Unlock()
	fake.ConfigSetStub = nil
	fake.configSetReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ConfigSetReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.configSetMutex.Lock()
	defer fake.configSetMutex.Unlock()
	fake.ConfigSetStub = nil
	if fake.configSetReturnsOnCall == nil {
		fake.configSetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.configSetReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) Copy(arg1 context.Context, arg2 string, arg3 string, arg4 int, arg5 bool) *redisa.IntCmd {
	fake.copyMutex.Lock()
	ret, specificReturn := fake.copyReturnsOnCall[len(fake.copyArgsForCall)]
	fake.copyArgsForCall = append(fake.copyArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 bool
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.CopyStub
	fakeReturns := fake.copyReturns
	fake.recordInvocation("Copy", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.copyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) CopyCallCount() int {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	return len(fake.copyArgsForCall)
}

func (fake *FakeCmdable) CopyCalls(stub func(context.Context, string, string, int, bool) *redisa.IntCmd) {
	fake.copyMutex.Lock()
	defer fake.copyMutex.Unlock()
	fake.CopyStub = stub
}

func (fake *FakeCmdable) CopyArgsForCall(i int) (context.Context, string, string, int, bool) {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	argsForCall := fake.copyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) CopyReturns(result1 *redisa.IntCmd) {
	fake.copyMutex.Lock()
	defer fake.copyMutex.Unlock()
	fake.CopyStub = nil
	fake.copyReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) CopyReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.copyMutex.Lock()
	defer fake.copyMutex.Unlock()
	fake.CopyStub = nil
	if fake.copyReturnsOnCall == nil {
		fake.copyReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.copyReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) DBSize(arg1 context.Context) *redisa.IntCmd {
	fake.dBSizeMutex.Lock()
	ret, specificReturn := fake.dBSizeReturnsOnCall[len(fake.dBSizeArgsForCall)]
	fake.dBSizeArgsForCall = append(fake.dBSizeArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.DBSizeStub
	fakeReturns := fake.dBSizeReturns
	fake.recordInvocation("DBSize", []interface{}{arg1})
	fake.dBSizeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) DBSizeCallCount() int {
	fake.dBSizeMutex.RLock()
	defer fake.dBSizeMutex.RUnlock()
	return len(fake.dBSizeArgsForCall)
}

func (fake *FakeCmdable) DBSizeCalls(stub func(context.Context) *redisa.IntCmd) {
	fake.dBSizeMutex.Lock()
	defer fake.dBSizeMutex.Unlock()
	fake.DBSizeStub = stub
}

func (fake *FakeCmdable) DBSizeArgsForCall(i int) context.Context {
	fake.dBSizeMutex.RLock()
	defer fake.dBSizeMutex.RUnlock()
	argsForCall := fake.dBSizeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) DBSizeReturns(result1 *redisa.IntCmd) {
	fake.dBSizeMutex.Lock()
	defer fake.dBSizeMutex.Unlock()
	fake.DBSizeStub = nil
	fake.dBSizeReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) DBSizeReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.dBSizeMutex.Lock()
	defer fake.dBSizeMutex.Unlock()
	fake.DBSizeStub = nil
	if fake.dBSizeReturnsOnCall == nil {
		fake.dBSizeReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.dBSizeReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) DebugObject(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.debugObjectMutex.Lock()
	ret, specificReturn := fake.debugObjectReturnsOnCall[len(fake.debugObjectArgsForCall)]
	fake.debugObjectArgsForCall = append(fake.debugObjectArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DebugObjectStub
	fakeReturns := fake.debugObjectReturns
	fake.recordInvocation("DebugObject", []interface{}{arg1, arg2})
	fake.debugObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) DebugObjectCallCount() int {
	fake.debugObjectMutex.RLock()
	defer fake.debugObjectMutex.RUnlock()
	return len(fake.debugObjectArgsForCall)
}

func (fake *FakeCmdable) DebugObjectCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.debugObjectMutex.Lock()
	defer fake.debugObjectMutex.Unlock()
	fake.DebugObjectStub = stub
}

func (fake *FakeCmdable) DebugObjectArgsForCall(i int) (context.Context, string) {
	fake.debugObjectMutex.RLock()
	defer fake.debugObjectMutex.RUnlock()
	argsForCall := fake.debugObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) DebugObjectReturns(result1 *redisa.StringCmd) {
	fake.debugObjectMutex.Lock()
	defer fake.debugObjectMutex.Unlock()
	fake.DebugObjectStub = nil
	fake.debugObjectReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) DebugObjectReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.debugObjectMutex.Lock()
	defer fake.debugObjectMutex.Unlock()
	fake.DebugObjectStub = nil
	if fake.debugObjectReturnsOnCall == nil {
		fake.debugObjectReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.debugObjectReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) Decr(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.decrMutex.Lock()
	ret, specificReturn := fake.decrReturnsOnCall[len(fake.decrArgsForCall)]
	fake.decrArgsForCall = append(fake.decrArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DecrStub
	fakeReturns := fake.decrReturns
	fake.recordInvocation("Decr", []interface{}{arg1, arg2})
	fake.decrMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) DecrCallCount() int {
	fake.decrMutex.RLock()
	defer fake.decrMutex.RUnlock()
	return len(fake.decrArgsForCall)
}

func (fake *FakeCmdable) DecrCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.decrMutex.Lock()
	defer fake.decrMutex.Unlock()
	fake.DecrStub = stub
}

func (fake *FakeCmdable) DecrArgsForCall(i int) (context.Context, string) {
	fake.decrMutex.RLock()
	defer fake.decrMutex.RUnlock()
	argsForCall := fake.decrArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) DecrReturns(result1 *redisa.IntCmd) {
	fake.decrMutex.Lock()
	defer fake.decrMutex.Unlock()
	fake.DecrStub = nil
	fake.decrReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) DecrReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.decrMutex.Lock()
	defer fake.decrMutex.Unlock()
	fake.DecrStub = nil
	if fake.decrReturnsOnCall == nil {
		fake.decrReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.decrReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) DecrBy(arg1 context.Context, arg2 string, arg3 int64) *redisa.IntCmd {
	fake.decrByMutex.Lock()
	ret, specificReturn := fake.decrByReturnsOnCall[len(fake.decrByArgsForCall)]
	fake.decrByArgsForCall = append(fake.decrByArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.DecrByStub
	fakeReturns := fake.decrByReturns
	fake.recordInvocation("DecrBy", []interface{}{arg1, arg2, arg3})
	fake.decrByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) DecrByCallCount() int {
	fake.decrByMutex.RLock()
	defer fake.decrByMutex.RUnlock()
	return len(fake.decrByArgsForCall)
}

func (fake *FakeCmdable) DecrByCalls(stub func(context.Context, string, int64) *redisa.IntCmd) {
	fake.decrByMutex.Lock()
	defer fake.decrByMutex.Unlock()
	fake.DecrByStub = stub
}

func (fake *FakeCmdable) DecrByArgsForCall(i int) (context.Context, string, int64) {
	fake.decrByMutex.RLock()
	defer fake.decrByMutex.RUnlock()
	argsForCall := fake.decrByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) DecrByReturns(result1 *redisa.IntCmd) {
	fake.decrByMutex.Lock()
	defer fake.decrByMutex.Unlock()
	fake.DecrByStub = nil
	fake.decrByReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) DecrByReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.decrByMutex.Lock()
	defer fake.decrByMutex.Unlock()
	fake.DecrByStub = nil
	if fake.decrByReturnsOnCall == nil {
		fake.decrByReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.decrByReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) Del(arg1 context.Context, arg2 ...string) *redisa.IntCmd {
	fake.delMutex.Lock()
	ret, specificReturn := fake.delReturnsOnCall[len(fake.delArgsForCall)]
	fake.delArgsForCall = append(fake.delArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.DelStub
	fakeReturns := fake.delReturns
	fake.recordInvocation("Del", []interface{}{arg1, arg2})
	fake.delMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) DelCallCount() int {
	fake.delMutex.RLock()
	defer fake.delMutex.RUnlock()
	return len(fake.delArgsForCall)
}

func (fake *FakeCmdable) DelCalls(stub func(context.Context, ...string) *redisa.IntCmd) {
	fake.delMutex.Lock()
	defer fake.delMutex.Unlock()
	fake.DelStub = stub
}

func (fake *FakeCmdable) DelArgsForCall(i int) (context.Context, []string) {
	fake.delMutex.RLock()
	defer fake.delMutex.RUnlock()
	argsForCall := fake.delArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) DelReturns(result1 *redisa.IntCmd) {
	fake.delMutex.Lock()
	defer fake.delMutex.Unlock()
	fake.DelStub = nil
	fake.delReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) DelReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.delMutex.Lock()
	defer fake.delMutex.Unlock()
	fake.DelStub = nil
	if fake.delReturnsOnCall == nil {
		fake.delReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.delReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) Dump(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.dumpMutex.Lock()
	ret, specificReturn := fake.dumpReturnsOnCall[len(fake.dumpArgsForCall)]
	fake.dumpArgsForCall = append(fake.dumpArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DumpStub
	fakeReturns := fake.dumpReturns
	fake.recordInvocation("Dump", []interface{}{arg1, arg2})
	fake.dumpMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) DumpCallCount() int {
	fake.dumpMutex.RLock()
	defer fake.dumpMutex.RUnlock()
	return len(fake.dumpArgsForCall)
}

func (fake *FakeCmdable) DumpCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.dumpMutex.Lock()
	defer fake.dumpMutex.Unlock()
	fake.DumpStub = stub
}

func (fake *FakeCmdable) DumpArgsForCall(i int) (context.Context, string) {
	fake.dumpMutex.RLock()
	defer fake.dumpMutex.RUnlock()
	argsForCall := fake.dumpArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) DumpReturns(result1 *redisa.StringCmd) {
	fake.dumpMutex.Lock()
	defer fake.dumpMutex.Unlock()
	fake.DumpStub = nil
	fake.dumpReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) DumpReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.dumpMutex.Lock()
	defer fake.dumpMutex.Unlock()
	fake.DumpStub = nil
	if fake.dumpReturnsOnCall == nil {
		fake.dumpReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.dumpReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) Echo(arg1 context.Context, arg2 interface{}) *redisa.StringCmd {
	fake.echoMutex.Lock()
	ret, specificReturn := fake.echoReturnsOnCall[len(fake.echoArgsForCall)]
	fake.echoArgsForCall = append(fake.echoArgsForCall, struct {
		arg1 context.Context
		arg2 interface{}
	}{arg1, arg2})
	stub := fake.EchoStub
	fakeReturns := fake.echoReturns
	fake.recordInvocation("Echo", []interface{}{arg1, arg2})
	fake.echoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) EchoCallCount() int {
	fake.echoMutex.RLock()
	defer fake.echoMutex.RUnlock()
	return len(fake.echoArgsForCall)
}

func (fake *FakeCmdable) EchoCalls(stub func(context.Context, interface{}) *redisa.StringCmd) {
	fake.echoMutex.Lock()
	defer fake.echoMutex.Unlock()
	fake.EchoStub = stub
}

func (fake *FakeCmdable) EchoArgsForCall(i int) (context.Context, interface{}) {
	fake.echoMutex.RLock()
	defer fake.echoMutex.RUnlock()
	argsForCall := fake.echoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) EchoReturns(result1 *redisa.StringCmd) {
	fake.echoMutex.Lock()
	defer fake.echoMutex.Unlock()
	fake.EchoStub = nil
	fake.echoReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) EchoReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.echoMutex.Lock()
	defer fake.echoMutex.Unlock()
	fake.EchoStub = nil
	if fake.echoReturnsOnCall == nil {
		fake.echoReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.echoReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) Eval(arg1 context.Context, arg2 string, arg3 []string, arg4 ...interface{}) *redisa.Cmd {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.evalMutex.Lock()
	ret, specificReturn := fake.evalReturnsOnCall[len(fake.evalArgsForCall)]
	fake.evalArgsForCall = append(fake.evalArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.EvalStub
	fakeReturns := fake.evalReturns
	fake.recordInvocation("Eval", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.evalMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) EvalCallCount() int {
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	return len(fake.evalArgsForCall)
}

func (fake *FakeCmdable) EvalCalls(stub func(context.Context, string, []string, ...interface{}) *redisa.Cmd) {
	fake.evalMutex.Lock()
	defer fake.evalMutex.Unlock()
	fake.EvalStub = stub
}

func (fake *FakeCmdable) EvalArgsForCall(i int) (context.Context, string, []string, []interface{}) {
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	argsForCall := fake.evalArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) EvalReturns(result1 *redisa.Cmd) {
	fake.evalMutex.Lock()
	defer fake.evalMutex.Unlock()
	fake.EvalStub = nil
	fake.evalReturns = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) EvalReturnsOnCall(i int, result1 *redisa.Cmd) {
	fake.evalMutex.Lock()
	defer fake.evalMutex.Unlock()
	fake.EvalStub = nil
	if fake.evalReturnsOnCall == nil {
		fake.evalReturnsOnCall = make(map[int]struct {
			result1 *redisa.Cmd
		})
	}
	fake.evalReturnsOnCall[i] = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) EvalRO(arg1 context.Context, arg2 string, arg3 []string, arg4 ...interface{}) *redisa.Cmd {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.evalROMutex.Lock()
	ret, specificReturn := fake.evalROReturnsOnCall[len(fake.evalROArgsForCall)]
	fake.evalROArgsForCall = append(fake.evalROArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.EvalROStub
	fakeReturns := fake.evalROReturns
	fake.recordInvocation("EvalRO", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.evalROMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) EvalROCallCount() int {
	fake.evalROMutex.RLock()
	defer fake.evalROMutex.RUnlock()
	return len(fake.evalROArgsForCall)
}

func (fake *FakeCmdable) EvalROCalls(stub func(context.Context, string, []string, ...interface{}) *redisa.Cmd) {
	fake.evalROMutex.Lock()
	defer fake.evalROMutex.Unlock()
	fake.EvalROStub = stub
}

func (fake *FakeCmdable) EvalROArgsForCall(i int) (context.Context, string, []string, []interface{}) {
	fake.evalROMutex.RLock()
	defer fake.evalROMutex.RUnlock()
	argsForCall := fake.evalROArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) EvalROReturns(result1 *redisa.Cmd) {
	fake.evalROMutex.Lock()
	defer fake.evalROMutex.Unlock()
	fake.EvalROStub = nil
	fake.evalROReturns = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) EvalROReturnsOnCall(i int, result1 *redisa.Cmd) {
	fake.evalROMutex.Lock()
	defer fake.evalROMutex.Unlock()
	fake.EvalROStub = nil
	if fake.evalROReturnsOnCall == nil {
		fake.evalROReturnsOnCall = make(map[int]struct {
			result1 *redisa.Cmd
		})
	}
	fake.evalROReturnsOnCall[i] = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) EvalSha(arg1 context.Context, arg2 string, arg3 []string, arg4 ...interface{}) *redisa.Cmd {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.evalShaMutex.Lock()
	ret, specificReturn := fake.evalShaReturnsOnCall[len(fake.evalShaArgsForCall)]
	fake.evalShaArgsForCall = append(fake.evalShaArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.EvalShaStub
	fakeReturns := fake.evalShaReturns
	fake.recordInvocation("EvalSha", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.evalShaMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) EvalShaCallCount() int {
	fake.evalShaMutex.RLock()
	defer fake.evalShaMutex.RUnlock()
	return len(fake.evalShaArgsForCall)
}

func (fake *FakeCmdable) EvalShaCalls(stub func(context.Context, string, []string, ...interface{}) *redisa.Cmd) {
	fake.evalShaMutex.Lock()
	defer fake.evalShaMutex.Unlock()
	fake.EvalShaStub = stub
}

func (fake *FakeCmdable) EvalShaArgsForCall(i int) (context.Context, string, []string, []interface{}) {
	fake.evalShaMutex.RLock()
	defer fake.evalShaMutex.RUnlock()
	argsForCall := fake.evalShaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) EvalShaReturns(result1 *redisa.Cmd) {
	fake.evalShaMutex.Lock()
	defer fake.evalShaMutex.Unlock()
	fake.EvalShaStub = nil
	fake.evalShaReturns = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) EvalShaReturnsOnCall(i int, result1 *redisa.Cmd) {
	fake.evalShaMutex.Lock()
	defer fake.evalShaMutex.Unlock()
	fake.EvalShaStub = nil
	if fake.evalShaReturnsOnCall == nil {
		fake.evalShaReturnsOnCall = make(map[int]struct {
			result1 *redisa.Cmd
		})
	}
	fake.evalShaReturnsOnCall[i] = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) EvalShaRO(arg1 context.Context, arg2 string, arg3 []string, arg4 ...interface{}) *redisa.Cmd {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.evalShaROMutex.Lock()
	ret, specificReturn := fake.evalShaROReturnsOnCall[len(fake.evalShaROArgsForCall)]
	fake.evalShaROArgsForCall = append(fake.evalShaROArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.EvalShaROStub
	fakeReturns := fake.evalShaROReturns
	fake.recordInvocation("EvalShaRO", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.evalShaROMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) EvalShaROCallCount() int {
	fake.evalShaROMutex.RLock()
	defer fake.evalShaROMutex.RUnlock()
	return len(fake.evalShaROArgsForCall)
}

func (fake *FakeCmdable) EvalShaROCalls(stub func(context.Context, string, []string, ...interface{}) *redisa.Cmd) {
	fake.evalShaROMutex.Lock()
	defer fake.evalShaROMutex.Unlock()
	fake.EvalShaROStub = stub
}

func (fake *FakeCmdable) EvalShaROArgsForCall(i int) (context.Context, string, []string, []interface{}) {
	fake.evalShaROMutex.RLock()
	defer fake.evalShaROMutex.RUnlock()
	argsForCall := fake.evalShaROArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) EvalShaROReturns(result1 *redisa.Cmd) {
	fake.evalShaROMutex.Lock()
	defer fake.evalShaROMutex.Unlock()
	fake.EvalShaROStub = nil
	fake.evalShaROReturns = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) EvalShaROReturnsOnCall(i int, result1 *redisa.Cmd) {
	fake.evalShaROMutex.Lock()
	defer fake.evalShaROMutex.Unlock()
	fake.EvalShaROStub = nil
	if fake.evalShaROReturnsOnCall == nil {
		fake.evalShaROReturnsOnCall = make(map[int]struct {
			result1 *redisa.Cmd
		})
	}
	fake.evalShaROReturnsOnCall[i] = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) Exists(arg1 context.Context, arg2 ...string) *redisa.IntCmd {
	fake.existsMutex.Lock()
	ret, specificReturn := fake.existsReturnsOnCall[len(fake.existsArgsForCall)]
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.ExistsStub
	fakeReturns := fake.existsReturns
	fake.recordInvocation("Exists", []interface{}{arg1, arg2})
	fake.existsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeCmdable) ExistsCalls(stub func(context.Context, ...string) *redisa.IntCmd) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = stub
}

func (fake *FakeCmdable) ExistsArgsForCall(i int) (context.Context, []string) {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	argsForCall := fake.existsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ExistsReturns(result1 *redisa.IntCmd) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ExistsReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	if fake.existsReturnsOnCall == nil {
		fake.existsReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.existsReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) Expire(arg1 context.Context, arg2 string, arg3 time.Duration) *redisa.BoolCmd {
	fake.expireMutex.Lock()
	ret, specificReturn := fake.expireReturnsOnCall[len(fake.expireArgsForCall)]
	fake.expireArgsForCall = append(fake.expireArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}{arg1, arg2, arg3})
	stub := fake.ExpireStub
	fakeReturns := fake.expireReturns
	fake.recordInvocation("Expire", []interface{}{arg1, arg2, arg3})
	fake.expireMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ExpireCallCount() int {
	fake.expireMutex.RLock()
	defer fake.expireMutex.RUnlock()
	return len(fake.expireArgsForCall)
}

func (fake *FakeCmdable) ExpireCalls(stub func(context.Context, string, time.Duration) *redisa.BoolCmd) {
	fake.expireMutex.Lock()
	defer fake.expireMutex.Unlock()
	fake.ExpireStub = stub
}

func (fake *FakeCmdable) ExpireArgsForCall(i int) (context.Context, string, time.Duration) {
	fake.expireMutex.RLock()
	defer fake.expireMutex.RUnlock()
	argsForCall := fake.expireArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ExpireReturns(result1 *redisa.BoolCmd) {
	fake.expireMutex.Lock()
	defer fake.expireMutex.Unlock()
	fake.ExpireStub = nil
	fake.expireReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.expireMutex.Lock()
	defer fake.expireMutex.Unlock()
	fake.ExpireStub = nil
	if fake.expireReturnsOnCall == nil {
		fake.expireReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.expireReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireAt(arg1 context.Context, arg2 string, arg3 time.Time) *redisa.BoolCmd {
	fake.expireAtMutex.Lock()
	ret, specificReturn := fake.expireAtReturnsOnCall[len(fake.expireAtArgsForCall)]
	fake.expireAtArgsForCall = append(fake.expireAtArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
	}{arg1, arg2, arg3})
	stub := fake.ExpireAtStub
	fakeReturns := fake.expireAtReturns
	fake.recordInvocation("ExpireAt", []interface{}{arg1, arg2, arg3})
	fake.expireAtMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ExpireAtCallCount() int {
	fake.expireAtMutex.RLock()
	defer fake.expireAtMutex.RUnlock()
	return len(fake.expireAtArgsForCall)
}

func (fake *FakeCmdable) ExpireAtCalls(stub func(context.Context, string, time.Time) *redisa.BoolCmd) {
	fake.expireAtMutex.Lock()
	defer fake.expireAtMutex.Unlock()
	fake.ExpireAtStub = stub
}

func (fake *FakeCmdable) ExpireAtArgsForCall(i int) (context.Context, string, time.Time) {
	fake.expireAtMutex.RLock()
	defer fake.expireAtMutex.RUnlock()
	argsForCall := fake.expireAtArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ExpireAtReturns(result1 *redisa.BoolCmd) {
	fake.expireAtMutex.Lock()
	defer fake.expireAtMutex.Unlock()
	fake.ExpireAtStub = nil
	fake.expireAtReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireAtReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.expireAtMutex.Lock()
	defer fake.expireAtMutex.Unlock()
	fake.ExpireAtStub = nil
	if fake.expireAtReturnsOnCall == nil {
		fake.expireAtReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.expireAtReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireGT(arg1 context.Context, arg2 string, arg3 time.Duration) *redisa.BoolCmd {
	fake.expireGTMutex.Lock()
	ret, specificReturn := fake.expireGTReturnsOnCall[len(fake.expireGTArgsForCall)]
	fake.expireGTArgsForCall = append(fake.expireGTArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}{arg1, arg2, arg3})
	stub := fake.ExpireGTStub
	fakeReturns := fake.expireGTReturns
	fake.recordInvocation("ExpireGT", []interface{}{arg1, arg2, arg3})
	fake.expireGTMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ExpireGTCallCount() int {
	fake.expireGTMutex.RLock()
	defer fake.expireGTMutex.RUnlock()
	return len(fake.expireGTArgsForCall)
}

func (fake *FakeCmdable) ExpireGTCalls(stub func(context.Context, string, time.Duration) *redisa.BoolCmd) {
	fake.expireGTMutex.Lock()
	defer fake.expireGTMutex.Unlock()
	fake.ExpireGTStub = stub
}

func (fake *FakeCmdable) ExpireGTArgsForCall(i int) (context.Context, string, time.Duration) {
	fake.expireGTMutex.RLock()
	defer fake.expireGTMutex.RUnlock()
	argsForCall := fake.expireGTArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ExpireGTReturns(result1 *redisa.BoolCmd) {
	fake.expireGTMutex.Lock()
	defer fake.expireGTMutex.Unlock()
	fake.ExpireGTStub = nil
	fake.expireGTReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireGTReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.expireGTMutex.Lock()
	defer fake.expireGTMutex.Unlock()
	fake.ExpireGTStub = nil
	if fake.expireGTReturnsOnCall == nil {
		fake.expireGTReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.expireGTReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireLT(arg1 context.Context, arg2 string, arg3 time.Duration) *redisa.BoolCmd {
	fake.expireLTMutex.Lock()
	ret, specificReturn := fake.expireLTReturnsOnCall[len(fake.expireLTArgsForCall)]
	fake.expireLTArgsForCall = append(fake.expireLTArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}{arg1, arg2, arg3})
	stub := fake.ExpireLTStub
	fakeReturns := fake.expireLTReturns
	fake.recordInvocation("ExpireLT", []interface{}{arg1, arg2, arg3})
	fake.expireLTMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ExpireLTCallCount() int {
	fake.expireLTMutex.RLock()
	defer fake.expireLTMutex.RUnlock()
	return len(fake.expireLTArgsForCall)
}

func (fake *FakeCmdable) ExpireLTCalls(stub func(context.Context, string, time.Duration) *redisa.BoolCmd) {
	fake.expireLTMutex.Lock()
	defer fake.expireLTMutex.Unlock()
	fake.ExpireLTStub = stub
}

func (fake *FakeCmdable) ExpireLTArgsForCall(i int) (context.Context, string, time.Duration) {
	fake.expireLTMutex.RLock()
	defer fake.expireLTMutex.RUnlock()
	argsForCall := fake.expireLTArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ExpireLTReturns(result1 *redisa.BoolCmd) {
	fake.expireLTMutex.Lock()
	defer fake.expireLTMutex.Unlock()
	fake.ExpireLTStub = nil
	fake.expireLTReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireLTReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.expireLTMutex.Lock()
	defer fake.expireLTMutex.Unlock()
	fake.ExpireLTStub = nil
	if fake.expireLTReturnsOnCall == nil {
		fake.expireLTReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.expireLTReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireNX(arg1 context.Context, arg2 string, arg3 time.Duration) *redisa.BoolCmd {
	fake.expireNXMutex.Lock()
	ret, specificReturn := fake.expireNXReturnsOnCall[len(fake.expireNXArgsForCall)]
	fake.expireNXArgsForCall = append(fake.expireNXArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}{arg1, arg2, arg3})
	stub := fake.ExpireNXStub
	fakeReturns := fake.expireNXReturns
	fake.recordInvocation("ExpireNX", []interface{}{arg1, arg2, arg3})
	fake.expireNXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ExpireNXCallCount() int {
	fake.expireNXMutex.RLock()
	defer fake.expireNXMutex.RUnlock()
	return len(fake.expireNXArgsForCall)
}

func (fake *FakeCmdable) ExpireNXCalls(stub func(context.Context, string, time.Duration) *redisa.BoolCmd) {
	fake.expireNXMutex.Lock()
	defer fake.expireNXMutex.Unlock()
	fake.ExpireNXStub = stub
}

func (fake *FakeCmdable) ExpireNXArgsForCall(i int) (context.Context, string, time.Duration) {
	fake.expireNXMutex.RLock()
	defer fake.expireNXMutex.RUnlock()
	argsForCall := fake.expireNXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ExpireNXReturns(result1 *redisa.BoolCmd) {
	fake.expireNXMutex.Lock()
	defer fake.expireNXMutex.Unlock()
	fake.ExpireNXStub = nil
	fake.expireNXReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireNXReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.expireNXMutex.Lock()
	defer fake.expireNXMutex.Unlock()
	fake.ExpireNXStub = nil
	if fake.expireNXReturnsOnCall == nil {
		fake.expireNXReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.expireNXReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireTime(arg1 context.Context, arg2 string) *redisa.DurationCmd {
	fake.expireTimeMutex.Lock()
	ret, specificReturn := fake.expireTimeReturnsOnCall[len(fake.expireTimeArgsForCall)]
	fake.expireTimeArgsForCall = append(fake.expireTimeArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ExpireTimeStub
	fakeReturns := fake.expireTimeReturns
	fake.recordInvocation("ExpireTime", []interface{}{arg1, arg2})
	fake.expireTimeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ExpireTimeCallCount() int {
	fake.expireTimeMutex.RLock()
	defer fake.expireTimeMutex.RUnlock()
	return len(fake.expireTimeArgsForCall)
}

func (fake *FakeCmdable) ExpireTimeCalls(stub func(context.Context, string) *redisa.DurationCmd) {
	fake.expireTimeMutex.Lock()
	defer fake.expireTimeMutex.Unlock()
	fake.ExpireTimeStub = stub
}

func (fake *FakeCmdable) ExpireTimeArgsForCall(i int) (context.Context, string) {
	fake.expireTimeMutex.RLock()
	defer fake.expireTimeMutex.RUnlock()
	argsForCall := fake.expireTimeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ExpireTimeReturns(result1 *redisa.DurationCmd) {
	fake.expireTimeMutex.Lock()
	defer fake.expireTimeMutex.Unlock()
	fake.ExpireTimeStub = nil
	fake.expireTimeReturns = struct {
		result1 *redisa.DurationCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireTimeReturnsOnCall(i int, result1 *redisa.DurationCmd) {
	fake.expireTimeMutex.Lock()
	defer fake.expireTimeMutex.Unlock()
	fake.ExpireTimeStub = nil
	if fake.expireTimeReturnsOnCall == nil {
		fake.expireTimeReturnsOnCall = make(map[int]struct {
			result1 *redisa.DurationCmd
		})
	}
	fake.expireTimeReturnsOnCall[i] = struct {
		result1 *redisa.DurationCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireXX(arg1 context.Context, arg2 string, arg3 time.Duration) *redisa.BoolCmd {
	fake.expireXXMutex.Lock()
	ret, specificReturn := fake.expireXXReturnsOnCall[len(fake.expireXXArgsForCall)]
	fake.expireXXArgsForCall = append(fake.expireXXArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}{arg1, arg2, arg3})
	stub := fake.ExpireXXStub
	fakeReturns := fake.expireXXReturns
	fake.recordInvocation("ExpireXX", []interface{}{arg1, arg2, arg3})
	fake.expireXXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ExpireXXCallCount() int {
	fake.expireXXMutex.RLock()
	defer fake.expireXXMutex.RUnlock()
	return len(fake.expireXXArgsForCall)
}

func (fake *FakeCmdable) ExpireXXCalls(stub func(context.Context, string, time.Duration) *redisa.BoolCmd) {
	fake.expireXXMutex.Lock()
	defer fake.expireXXMutex.Unlock()
	fake.ExpireXXStub = stub
}

func (fake *FakeCmdable) ExpireXXArgsForCall(i int) (context.Context, string, time.Duration) {
	fake.expireXXMutex.RLock()
	defer fake.expireXXMutex.RUnlock()
	argsForCall := fake.expireXXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ExpireXXReturns(result1 *redisa.BoolCmd) {
	fake.expireXXMutex.Lock()
	defer fake.expireXXMutex.Unlock()
	fake.ExpireXXStub = nil
	fake.expireXXReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ExpireXXReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.expireXXMutex.Lock()
	defer fake.expireXXMutex.Unlock()
	fake.ExpireXXStub = nil
	if fake.expireXXReturnsOnCall == nil {
		fake.expireXXReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.expireXXReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) FCall(arg1 context.Context, arg2 string, arg3 []string, arg4 ...interface{}) *redisa.Cmd {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.fCallMutex.Lock()
	ret, specificReturn := fake.fCallReturnsOnCall[len(fake.fCallArgsForCall)]
	fake.fCallArgsForCall = append(fake.fCallArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.FCallStub
	fakeReturns := fake.fCallReturns
	fake.recordInvocation("FCall", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.fCallMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FCallCallCount() int {
	fake.fCallMutex.RLock()
	defer fake.fCallMutex.RUnlock()
	return len(fake.fCallArgsForCall)
}

func (fake *FakeCmdable) FCallCalls(stub func(context.Context, string, []string, ...interface{}) *redisa.Cmd) {
	fake.fCallMutex.Lock()
	defer fake.fCallMutex.Unlock()
	fake.FCallStub = stub
}

func (fake *FakeCmdable) FCallArgsForCall(i int) (context.Context, string, []string, []interface{}) {
	fake.fCallMutex.RLock()
	defer fake.fCallMutex.RUnlock()
	argsForCall := fake.fCallArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) FCallReturns(result1 *redisa.Cmd) {
	fake.fCallMutex.Lock()
	defer fake.fCallMutex.Unlock()
	fake.FCallStub = nil
	fake.fCallReturns = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) FCallReturnsOnCall(i int, result1 *redisa.Cmd) {
	fake.fCallMutex.Lock()
	defer fake.fCallMutex.Unlock()
	fake.FCallStub = nil
	if fake.fCallReturnsOnCall == nil {
		fake.fCallReturnsOnCall = make(map[int]struct {
			result1 *redisa.Cmd
		})
	}
	fake.fCallReturnsOnCall[i] = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) FCallRO(arg1 context.Context, arg2 string, arg3 []string, arg4 ...interface{}) *redisa.Cmd {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.fCallROMutex.Lock()
	ret, specificReturn := fake.fCallROReturnsOnCall[len(fake.fCallROArgsForCall)]
	fake.fCallROArgsForCall = append(fake.fCallROArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.FCallROStub
	fakeReturns := fake.fCallROReturns
	fake.recordInvocation("FCallRO", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.fCallROMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FCallROCallCount() int {
	fake.fCallROMutex.RLock()
	defer fake.fCallROMutex.RUnlock()
	return len(fake.fCallROArgsForCall)
}

func (fake *FakeCmdable) FCallROCalls(stub func(context.Context, string, []string, ...interface{}) *redisa.Cmd) {
	fake.fCallROMutex.Lock()
	defer fake.fCallROMutex.Unlock()
	fake.FCallROStub = stub
}

func (fake *FakeCmdable) FCallROArgsForCall(i int) (context.Context, string, []string, []interface{}) {
	fake.fCallROMutex.RLock()
	defer fake.fCallROMutex.RUnlock()
	argsForCall := fake.fCallROArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) FCallROReturns(result1 *redisa.Cmd) {
	fake.fCallROMutex.Lock()
	defer fake.fCallROMutex.Unlock()
	fake.FCallROStub = nil
	fake.fCallROReturns = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) FCallROReturnsOnCall(i int, result1 *redisa.Cmd) {
	fake.fCallROMutex.Lock()
	defer fake.fCallROMutex.Unlock()
	fake.FCallROStub = nil
	if fake.fCallROReturnsOnCall == nil {
		fake.fCallROReturnsOnCall = make(map[int]struct {
			result1 *redisa.Cmd
		})
	}
	fake.fCallROReturnsOnCall[i] = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) FCallRo(arg1 context.Context, arg2 string, arg3 []string, arg4 ...interface{}) *redisa.Cmd {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.fCallRoMutex.Lock()
	ret, specificReturn := fake.fCallRoReturnsOnCall[len(fake.fCallRoArgsForCall)]
	fake.fCallRoArgsForCall = append(fake.fCallRoArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
		arg4 []interface{}
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.FCallRoStub
	fakeReturns := fake.fCallRoReturns
	fake.recordInvocation("FCallRo", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.fCallRoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FCallRoCallCount() int {
	fake.fCallRoMutex.RLock()
	defer fake.fCallRoMutex.RUnlock()
	return len(fake.fCallRoArgsForCall)
}

func (fake *FakeCmdable) FCallRoCalls(stub func(context.Context, string, []string, ...interface{}) *redisa.Cmd) {
	fake.fCallRoMutex.Lock()
	defer fake.fCallRoMutex.Unlock()
	fake.FCallRoStub = stub
}

func (fake *FakeCmdable) FCallRoArgsForCall(i int) (context.Context, string, []string, []interface{}) {
	fake.fCallRoMutex.RLock()
	defer fake.fCallRoMutex.RUnlock()
	argsForCall := fake.fCallRoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) FCallRoReturns(result1 *redisa.Cmd) {
	fake.fCallRoMutex.Lock()
	defer fake.fCallRoMutex.Unlock()
	fake.FCallRoStub = nil
	fake.fCallRoReturns = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) FCallRoReturnsOnCall(i int, result1 *redisa.Cmd) {
	fake.fCallRoMutex.Lock()
	defer fake.fCallRoMutex.Unlock()
	fake.FCallRoStub = nil
	if fake.fCallRoReturnsOnCall == nil {
		fake.fCallRoReturnsOnCall = make(map[int]struct {
			result1 *redisa.Cmd
		})
	}
	fake.fCallRoReturnsOnCall[i] = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) FTAggregate(arg1 context.Context, arg2 string, arg3 string) *redisa.MapStringInterfaceCmd {
	fake.fTAggregateMutex.Lock()
	ret, specificReturn := fake.fTAggregateReturnsOnCall[len(fake.fTAggregateArgsForCall)]
	fake.fTAggregateArgsForCall = append(fake.fTAggregateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FTAggregateStub
	fakeReturns := fake.fTAggregateReturns
	fake.recordInvocation("FTAggregate", []interface{}{arg1, arg2, arg3})
	fake.fTAggregateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTAggregateCallCount() int {
	fake.fTAggregateMutex.RLock()
	defer fake.fTAggregateMutex.RUnlock()
	return len(fake.fTAggregateArgsForCall)
}

func (fake *FakeCmdable) FTAggregateCalls(stub func(context.Context, string, string) *redisa.MapStringInterfaceCmd) {
	fake.fTAggregateMutex.Lock()
	defer fake.fTAggregateMutex.Unlock()
	fake.FTAggregateStub = stub
}

func (fake *FakeCmdable) FTAggregateArgsForCall(i int) (context.Context, string, string) {
	fake.fTAggregateMutex.RLock()
	defer fake.fTAggregateMutex.RUnlock()
	argsForCall := fake.fTAggregateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) FTAggregateReturns(result1 *redisa.MapStringInterfaceCmd) {
	fake.fTAggregateMutex.Lock()
	defer fake.fTAggregateMutex.Unlock()
	fake.FTAggregateStub = nil
	fake.fTAggregateReturns = struct {
		result1 *redisa.MapStringInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) FTAggregateReturnsOnCall(i int, result1 *redisa.MapStringInterfaceCmd) {
	fake.fTAggregateMutex.Lock()
	defer fake.fTAggregateMutex.Unlock()
	fake.FTAggregateStub = nil
	if fake.fTAggregateReturnsOnCall == nil {
		fake.fTAggregateReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringInterfaceCmd
		})
	}
	fake.fTAggregateReturnsOnCall[i] = struct {
		result1 *redisa.MapStringInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) FTAggregateWithArgs(arg1 context.Context, arg2 string, arg3 string, arg4 *redisa.FTAggregateOptions) *redisa.AggregateCmd {
	fake.fTAggregateWithArgsMutex.Lock()
	ret, specificReturn := fake.fTAggregateWithArgsReturnsOnCall[len(fake.fTAggregateWithArgsArgsForCall)]
	fake.fTAggregateWithArgsArgsForCall = append(fake.fTAggregateWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.FTAggregateOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.FTAggregateWithArgsStub
	fakeReturns := fake.fTAggregateWithArgsReturns
	fake.recordInvocation("FTAggregateWithArgs", []interface{}{arg1, arg2, arg3, arg4})
	fake.fTAggregateWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTAggregateWithArgsCallCount() int {
	fake.fTAggregateWithArgsMutex.RLock()
	defer fake.fTAggregateWithArgsMutex.RUnlock()
	return len(fake.fTAggregateWithArgsArgsForCall)
}

func (fake *FakeCmdable) FTAggregateWithArgsCalls(stub func(context.Context, string, string, *redisa.FTAggregateOptions) *redisa.AggregateCmd) {
	fake.fTAggregateWithArgsMutex.Lock()
	defer fake.fTAggregateWithArgsMutex.Unlock()
	fake.FTAggregateWithArgsStub = stub
}

func (fake *FakeCmdable) FTAggregateWithArgsArgsForCall(i int) (context.Context, string, string, *redisa.FTAggregateOptions) {
	fake.fTAggregateWithArgsMutex.RLock()
	defer fake.fTAggregateWithArgsMutex.RUnlock()
	argsForCall := fake.fTAggregateWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) FTAggregateWithArgsReturns(result1 *redisa.AggregateCmd) {
	fake.fTAggregateWithArgsMutex.Lock()
	defer fake.fTAggregateWithArgsMutex.Unlock()
	fake.FTAggregateWithArgsStub = nil
	fake.fTAggregateWithArgsReturns = struct {
		result1 *redisa.AggregateCmd
	}{result1}
}

func (fake *FakeCmdable) FTAggregateWithArgsReturnsOnCall(i int, result1 *redisa.AggregateCmd) {
	fake.fTAggregateWithArgsMutex.Lock()
	defer fake.fTAggregateWithArgsMutex.Unlock()
	fake.FTAggregateWithArgsStub = nil
	if fake.fTAggregateWithArgsReturnsOnCall == nil {
		fake.fTAggregateWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.AggregateCmd
		})
	}
	fake.fTAggregateWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.AggregateCmd
	}{result1}
}

func (fake *FakeCmdable) FTAliasAdd(arg1 context.Context, arg2 string, arg3 string) *redisa.StatusCmd {
	fake.fTAliasAddMutex.Lock()
	ret, specificReturn := fake.fTAliasAddReturnsOnCall[len(fake.fTAliasAddArgsForCall)]
	fake.fTAliasAddArgsForCall = append(fake.fTAliasAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FTAliasAddStub
	fakeReturns := fake.fTAliasAddReturns
	fake.recordInvocation("FTAliasAdd", []interface{}{arg1, arg2, arg3})
	fake.fTAliasAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTAliasAddCallCount() int {
	fake.fTAliasAddMutex.RLock()
	defer fake.fTAliasAddMutex.RUnlock()
	return len(fake.fTAliasAddArgsForCall)
}

func (fake *FakeCmdable) FTAliasAddCalls(stub func(context.Context, string, string) *redisa.StatusCmd) {
	fake.fTAliasAddMutex.Lock()
	defer fake.fTAliasAddMutex.Unlock()
	fake.FTAliasAddStub = stub
}

func (fake *FakeCmdable) FTAliasAddArgsForCall(i int) (context.Context, string, string) {
	fake.fTAliasAddMutex.RLock()
	defer fake.fTAliasAddMutex.RUnlock()
	argsForCall := fake.fTAliasAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) FTAliasAddReturns(result1 *redisa.StatusCmd) {
	fake.fTAliasAddMutex.Lock()
	defer fake.fTAliasAddMutex.Unlock()
	fake.FTAliasAddStub = nil
	fake.fTAliasAddReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTAliasAddReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.fTAliasAddMutex.Lock()
	defer fake.fTAliasAddMutex.Unlock()
	fake.FTAliasAddStub = nil
	if fake.fTAliasAddReturnsOnCall == nil {
		fake.fTAliasAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.fTAliasAddReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTAliasDel(arg1 context.Context, arg2 string) *redisa.StatusCmd {
	fake.fTAliasDelMutex.Lock()
	ret, specificReturn := fake.fTAliasDelReturnsOnCall[len(fake.fTAliasDelArgsForCall)]
	fake.fTAliasDelArgsForCall = append(fake.fTAliasDelArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FTAliasDelStub
	fakeReturns := fake.fTAliasDelReturns
	fake.recordInvocation("FTAliasDel", []interface{}{arg1, arg2})
	fake.fTAliasDelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTAliasDelCallCount() int {
	fake.fTAliasDelMutex.RLock()
	defer fake.fTAliasDelMutex.RUnlock()
	return len(fake.fTAliasDelArgsForCall)
}

func (fake *FakeCmdable) FTAliasDelCalls(stub func(context.Context, string) *redisa.StatusCmd) {
	fake.fTAliasDelMutex.Lock()
	defer fake.fTAliasDelMutex.Unlock()
	fake.FTAliasDelStub = stub
}

func (fake *FakeCmdable) FTAliasDelArgsForCall(i int) (context.Context, string) {
	fake.fTAliasDelMutex.RLock()
	defer fake.fTAliasDelMutex.RUnlock()
	argsForCall := fake.fTAliasDelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) FTAliasDelReturns(result1 *redisa.StatusCmd) {
	fake.fTAliasDelMutex.Lock()
	defer fake.fTAliasDelMutex.Unlock()
	fake.FTAliasDelStub = nil
	fake.fTAliasDelReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTAliasDelReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.fTAliasDelMutex.Lock()
	defer fake.fTAliasDelMutex.Unlock()
	fake.FTAliasDelStub = nil
	if fake.fTAliasDelReturnsOnCall == nil {
		fake.fTAliasDelReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.fTAliasDelReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTAliasUpdate(arg1 context.Context, arg2 string, arg3 string) *redisa.StatusCmd {
	fake.fTAliasUpdateMutex.Lock()
	ret, specificReturn := fake.fTAliasUpdateReturnsOnCall[len(fake.fTAliasUpdateArgsForCall)]
	fake.fTAliasUpdateArgsForCall = append(fake.fTAliasUpdateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FTAliasUpdateStub
	fakeReturns := fake.fTAliasUpdateReturns
	fake.recordInvocation("FTAliasUpdate", []interface{}{arg1, arg2, arg3})
	fake.fTAliasUpdateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTAliasUpdateCallCount() int {
	fake.fTAliasUpdateMutex.RLock()
	defer fake.fTAliasUpdateMutex.RUnlock()
	return len(fake.fTAliasUpdateArgsForCall)
}

func (fake *FakeCmdable) FTAliasUpdateCalls(stub func(context.Context, string, string) *redisa.StatusCmd) {
	fake.fTAliasUpdateMutex.Lock()
	defer fake.fTAliasUpdateMutex.Unlock()
	fake.FTAliasUpdateStub = stub
}

func (fake *FakeCmdable) FTAliasUpdateArgsForCall(i int) (context.Context, string, string) {
	fake.fTAliasUpdateMutex.RLock()
	defer fake.fTAliasUpdateMutex.RUnlock()
	argsForCall := fake.fTAliasUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) FTAliasUpdateReturns(result1 *redisa.StatusCmd) {
	fake.fTAliasUpdateMutex.Lock()
	defer fake.fTAliasUpdateMutex.Unlock()
	fake.FTAliasUpdateStub = nil
	fake.fTAliasUpdateReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTAliasUpdateReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.fTAliasUpdateMutex.Lock()
	defer fake.fTAliasUpdateMutex.Unlock()
	fake.FTAliasUpdateStub = nil
	if fake.fTAliasUpdateReturnsOnCall == nil {
		fake.fTAliasUpdateReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.fTAliasUpdateReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTAlter(arg1 context.Context, arg2 string, arg3 bool, arg4 []interface{}) *redisa.StatusCmd {
	var arg4Copy []interface{}
	if arg4 != nil {
		arg4Copy = make([]interface{}, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.fTAlterMutex.Lock()
	ret, specificReturn := fake.fTAlterReturnsOnCall[len(fake.fTAlterArgsForCall)]
	fake.fTAlterArgsForCall = append(fake.fTAlterArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 bool
		arg4 []interface{}
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.FTAlterStub
	fakeReturns := fake.fTAlterReturns
	fake.recordInvocation("FTAlter", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.fTAlterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTAlterCallCount() int {
	fake.fTAlterMutex.RLock()
	defer fake.fTAlterMutex.RUnlock()
	return len(fake.fTAlterArgsForCall)
}

func (fake *FakeCmdable) FTAlterCalls(stub func(context.Context, string, bool, []interface{}) *redisa.StatusCmd) {
	fake.fTAlterMutex.Lock()
	defer fake.fTAlterMutex.Unlock()
	fake.FTAlterStub = stub
}

func (fake *FakeCmdable) FTAlterArgsForCall(i int) (context.Context, string, bool, []interface{}) {
	fake.fTAlterMutex.RLock()
	defer fake.fTAlterMutex.RUnlock()
	argsForCall := fake.fTAlterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) FTAlterReturns(result1 *redisa.StatusCmd) {
	fake.fTAlterMutex.Lock()
	defer fake.fTAlterMutex.Unlock()
	fake.FTAlterStub = nil
	fake.fTAlterReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTAlterReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.fTAlterMutex.Lock()
	defer fake.fTAlterMutex.Unlock()
	fake.FTAlterStub = nil
	if fake.fTAlterReturnsOnCall == nil {
		fake.fTAlterReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.fTAlterReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTConfigGet(arg1 context.Context, arg2 string) *redisa.MapMapStringInterfaceCmd {
	fake.fTConfigGetMutex.Lock()
	ret, specificReturn := fake.fTConfigGetReturnsOnCall[len(fake.fTConfigGetArgsForCall)]
	fake.fTConfigGetArgsForCall = append(fake.fTConfigGetArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FTConfigGetStub
	fakeReturns := fake.fTConfigGetReturns
	fake.recordInvocation("FTConfigGet", []interface{}{arg1, arg2})
	fake.fTConfigGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTConfigGetCallCount() int {
	fake.fTConfigGetMutex.RLock()
	defer fake.fTConfigGetMutex.RUnlock()
	return len(fake.fTConfigGetArgsForCall)
}

func (fake *FakeCmdable) FTConfigGetCalls(stub func(context.Context, string) *redisa.MapMapStringInterfaceCmd) {
	fake.fTConfigGetMutex.Lock()
	defer fake.fTConfigGetMutex.Unlock()
	fake.FTConfigGetStub = stub
}

func (fake *FakeCmdable) FTConfigGetArgsForCall(i int) (context.Context, string) {
	fake.fTConfigGetMutex.RLock()
	defer fake.fTConfigGetMutex.RUnlock()
	argsForCall := fake.fTConfigGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) FTConfigGetReturns(result1 *redisa.MapMapStringInterfaceCmd) {
	fake.fTConfigGetMutex.Lock()
	defer fake.fTConfigGetMutex.Unlock()
	fake.FTConfigGetStub = nil
	fake.fTConfigGetReturns = struct {
		result1 *redisa.MapMapStringInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) FTConfigGetReturnsOnCall(i int, result1 *redisa.MapMapStringInterfaceCmd) {
	fake.fTConfigGetMutex.Lock()
	defer fake.fTConfigGetMutex.Unlock()
	fake.FTConfigGetStub = nil
	if fake.fTConfigGetReturnsOnCall == nil {
		fake.fTConfigGetReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapMapStringInterfaceCmd
		})
	}
	fake.fTConfigGetReturnsOnCall[i] = struct {
		result1 *redisa.MapMapStringInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) FTConfigSet(arg1 context.Context, arg2 string, arg3 interface{}) *redisa.StatusCmd {
	fake.fTConfigSetMutex.Lock()
	ret, specificReturn := fake.fTConfigSetReturnsOnCall[len(fake.fTConfigSetArgsForCall)]
	fake.fTConfigSetArgsForCall = append(fake.fTConfigSetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.FTConfigSetStub
	fakeReturns := fake.fTConfigSetReturns
	fake.recordInvocation("FTConfigSet", []interface{}{arg1, arg2, arg3})
	fake.fTConfigSetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTConfigSetCallCount() int {
	fake.fTConfigSetMutex.RLock()
	defer fake.fTConfigSetMutex.RUnlock()
	return len(fake.fTConfigSetArgsForCall)
}

func (fake *FakeCmdable) FTConfigSetCalls(stub func(context.Context, string, interface{}) *redisa.StatusCmd) {
	fake.fTConfigSetMutex.Lock()
	defer fake.fTConfigSetMutex.Unlock()
	fake.FTConfigSetStub = stub
}

func (fake *FakeCmdable) FTConfigSetArgsForCall(i int) (context.Context, string, interface{}) {
	fake.fTConfigSetMutex.RLock()
	defer fake.fTConfigSetMutex.RUnlock()
	argsForCall := fake.fTConfigSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) FTConfigSetReturns(result1 *redisa.StatusCmd) {
	fake.fTConfigSetMutex.Lock()
	defer fake.fTConfigSetMutex.Unlock()
	fake.FTConfigSetStub = nil
	fake.fTConfigSetReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTConfigSetReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.fTConfigSetMutex.Lock()
	defer fake.fTConfigSetMutex.Unlock()
	fake.FTConfigSetStub = nil
	if fake.fTConfigSetReturnsOnCall == nil {
		fake.fTConfigSetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.fTConfigSetReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTCreate(arg1 context.Context, arg2 string, arg3 *redisa.FTCreateOptions, arg4 ...*redisa.FieldSchema) *redisa.StatusCmd {
	fake.fTCreateMutex.Lock()
	ret, specificReturn := fake.fTCreateReturnsOnCall[len(fake.fTCreateArgsForCall)]
	fake.fTCreateArgsForCall = append(fake.fTCreateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.FTCreateOptions
		arg4 []*redisa.FieldSchema
	}{arg1, arg2, arg3, arg4})
	stub := fake.FTCreateStub
	fakeReturns := fake.fTCreateReturns
	fake.recordInvocation("FTCreate", []interface{}{arg1, arg2, arg3, arg4})
	fake.fTCreateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTCreateCallCount() int {
	fake.fTCreateMutex.RLock()
	defer fake.fTCreateMutex.RUnlock()
	return len(fake.fTCreateArgsForCall)
}

func (fake *FakeCmdable) FTCreateCalls(stub func(context.Context, string, *redisa.FTCreateOptions, ...*redisa.FieldSchema) *redisa.StatusCmd) {
	fake.fTCreateMutex.Lock()
	defer fake.fTCreateMutex.Unlock()
	fake.FTCreateStub = stub
}

func (fake *FakeCmdable) FTCreateArgsForCall(i int) (context.Context, string, *redisa.FTCreateOptions, []*redisa.FieldSchema) {
	fake.fTCreateMutex.RLock()
	defer fake.fTCreateMutex.RUnlock()
	argsForCall := fake.fTCreateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) FTCreateReturns(result1 *redisa.StatusCmd) {
	fake.fTCreateMutex.Lock()
	defer fake.fTCreateMutex.Unlock()
	fake.FTCreateStub = nil
	fake.fTCreateReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTCreateReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.fTCreateMutex.Lock()
	defer fake.fTCreateMutex.Unlock()
	fake.FTCreateStub = nil
	if fake.fTCreateReturnsOnCall == nil {
		fake.fTCreateReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.fTCreateReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTCursorDel(arg1 context.Context, arg2 string, arg3 int) *redisa.StatusCmd {
	fake.fTCursorDelMutex.Lock()
	ret, specificReturn := fake.fTCursorDelReturnsOnCall[len(fake.fTCursorDelArgsForCall)]
	fake.fTCursorDelArgsForCall = append(fake.fTCursorDelArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.FTCursorDelStub
	fakeReturns := fake.fTCursorDelReturns
	fake.recordInvocation("FTCursorDel", []interface{}{arg1, arg2, arg3})
	fake.fTCursorDelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTCursorDelCallCount() int {
	fake.fTCursorDelMutex.RLock()
	defer fake.fTCursorDelMutex.RUnlock()
	return len(fake.fTCursorDelArgsForCall)
}

func (fake *FakeCmdable) FTCursorDelCalls(stub func(context.Context, string, int) *redisa.StatusCmd) {
	fake.fTCursorDelMutex.Lock()
	defer fake.fTCursorDelMutex.Unlock()
	fake.FTCursorDelStub = stub
}

func (fake *FakeCmdable) FTCursorDelArgsForCall(i int) (context.Context, string, int) {
	fake.fTCursorDelMutex.RLock()
	defer fake.fTCursorDelMutex.RUnlock()
	argsForCall := fake.fTCursorDelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) FTCursorDelReturns(result1 *redisa.StatusCmd) {
	fake.fTCursorDelMutex.Lock()
	defer fake.fTCursorDelMutex.Unlock()
	fake.FTCursorDelStub = nil
	fake.fTCursorDelReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTCursorDelReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.fTCursorDelMutex.Lock()
	defer fake.fTCursorDelMutex.Unlock()
	fake.FTCursorDelStub = nil
	if fake.fTCursorDelReturnsOnCall == nil {
		fake.fTCursorDelReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.fTCursorDelReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTCursorRead(arg1 context.Context, arg2 string, arg3 int, arg4 int) *redisa.MapStringInterfaceCmd {
	fake.fTCursorReadMutex.Lock()
	ret, specificReturn := fake.fTCursorReadReturnsOnCall[len(fake.fTCursorReadArgsForCall)]
	fake.fTCursorReadArgsForCall = append(fake.fTCursorReadArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.FTCursorReadStub
	fakeReturns := fake.fTCursorReadReturns
	fake.recordInvocation("FTCursorRead", []interface{}{arg1, arg2, arg3, arg4})
	fake.fTCursorReadMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTCursorReadCallCount() int {
	fake.fTCursorReadMutex.RLock()
	defer fake.fTCursorReadMutex.RUnlock()
	return len(fake.fTCursorReadArgsForCall)
}

func (fake *FakeCmdable) FTCursorReadCalls(stub func(context.Context, string, int, int) *redisa.MapStringInterfaceCmd) {
	fake.fTCursorReadMutex.Lock()
	defer fake.fTCursorReadMutex.Unlock()
	fake.FTCursorReadStub = stub
}

func (fake *FakeCmdable) FTCursorReadArgsForCall(i int) (context.Context, string, int, int) {
	fake.fTCursorReadMutex.RLock()
	defer fake.fTCursorReadMutex.RUnlock()
	argsForCall := fake.fTCursorReadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) FTCursorReadReturns(result1 *redisa.MapStringInterfaceCmd) {
	fake.fTCursorReadMutex.Lock()
	defer fake.fTCursorReadMutex.Unlock()
	fake.FTCursorReadStub = nil
	fake.fTCursorReadReturns = struct {
		result1 *redisa.MapStringInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) FTCursorReadReturnsOnCall(i int, result1 *redisa.MapStringInterfaceCmd) {
	fake.fTCursorReadMutex.Lock()
	defer fake.fTCursorReadMutex.Unlock()
	fake.FTCursorReadStub = nil
	if fake.fTCursorReadReturnsOnCall == nil {
		fake.fTCursorReadReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringInterfaceCmd
		})
	}
	fake.fTCursorReadReturnsOnCall[i] = struct {
		result1 *redisa.MapStringInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) FTDictAdd(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntCmd {
	fake.fTDictAddMutex.Lock()
	ret, specificReturn := fake.fTDictAddReturnsOnCall[len(fake.fTDictAddArgsForCall)]
	fake.fTDictAddArgsForCall = append(fake.fTDictAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.FTDictAddStub
	fakeReturns := fake.fTDictAddReturns
	fake.recordInvocation("FTDictAdd", []interface{}{arg1, arg2, arg3})
	fake.fTDictAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTDictAddCallCount() int {
	fake.fTDictAddMutex.RLock()
	defer fake.fTDictAddMutex.RUnlock()
	return len(fake.fTDictAddArgsForCall)
}

func (fake *FakeCmdable) FTDictAddCalls(stub func(context.Context, string, ...interface{}) *redisa.IntCmd) {
	fake.fTDictAddMutex.Lock()
	defer fake.fTDictAddMutex.Unlock()
	fake.FTDictAddStub = stub
}

func (fake *FakeCmdable) FTDictAddArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.fTDictAddMutex.RLock()
	defer fake.fTDictAddMutex.RUnlock()
	argsForCall := fake.fTDictAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) FTDictAddReturns(result1 *redisa.IntCmd) {
	fake.fTDictAddMutex.Lock()
	defer fake.fTDictAddMutex.Unlock()
	fake.FTDictAddStub = nil
	fake.fTDictAddReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) FTDictAddReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.fTDictAddMutex.Lock()
	defer fake.fTDictAddMutex.Unlock()
	fake.FTDictAddStub = nil
	if fake.fTDictAddReturnsOnCall == nil {
		fake.fTDictAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.fTDictAddReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) FTDictDel(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntCmd {
	fake.fTDictDelMutex.Lock()
	ret, specificReturn := fake.fTDictDelReturnsOnCall[len(fake.fTDictDelArgsForCall)]
	fake.fTDictDelArgsForCall = append(fake.fTDictDelArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.FTDictDelStub
	fakeReturns := fake.fTDictDelReturns
	fake.recordInvocation("FTDictDel", []interface{}{arg1, arg2, arg3})
	fake.fTDictDelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTDictDelCallCount() int {
	fake.fTDictDelMutex.RLock()
	defer fake.fTDictDelMutex.RUnlock()
	return len(fake.fTDictDelArgsForCall)
}

func (fake *FakeCmdable) FTDictDelCalls(stub func(context.Context, string, ...interface{}) *redisa.IntCmd) {
	fake.fTDictDelMutex.Lock()
	defer fake.fTDictDelMutex.Unlock()
	fake.FTDictDelStub = stub
}

func (fake *FakeCmdable) FTDictDelArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.fTDictDelMutex.RLock()
	defer fake.fTDictDelMutex.RUnlock()
	argsForCall := fake.fTDictDelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) FTDictDelReturns(result1 *redisa.IntCmd) {
	fake.fTDictDelMutex.Lock()
	defer fake.fTDictDelMutex.Unlock()
	fake.FTDictDelStub = nil
	fake.fTDictDelReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) FTDictDelReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.fTDictDelMutex.Lock()
	defer fake.fTDictDelMutex.Unlock()
	fake.FTDictDelStub = nil
	if fake.fTDictDelReturnsOnCall == nil {
		fake.fTDictDelReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.fTDictDelReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) FTDictDump(arg1 context.Context, arg2 string) *redisa.StringSliceCmd {
	fake.fTDictDumpMutex.Lock()
	ret, specificReturn := fake.fTDictDumpReturnsOnCall[len(fake.fTDictDumpArgsForCall)]
	fake.fTDictDumpArgsForCall = append(fake.fTDictDumpArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FTDictDumpStub
	fakeReturns := fake.fTDictDumpReturns
	fake.recordInvocation("FTDictDump", []interface{}{arg1, arg2})
	fake.fTDictDumpMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTDictDumpCallCount() int {
	fake.fTDictDumpMutex.RLock()
	defer fake.fTDictDumpMutex.RUnlock()
	return len(fake.fTDictDumpArgsForCall)
}

func (fake *FakeCmdable) FTDictDumpCalls(stub func(context.Context, string) *redisa.StringSliceCmd) {
	fake.fTDictDumpMutex.Lock()
	defer fake.fTDictDumpMutex.Unlock()
	fake.FTDictDumpStub = stub
}

func (fake *FakeCmdable) FTDictDumpArgsForCall(i int) (context.Context, string) {
	fake.fTDictDumpMutex.RLock()
	defer fake.fTDictDumpMutex.RUnlock()
	argsForCall := fake.fTDictDumpArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) FTDictDumpReturns(result1 *redisa.StringSliceCmd) {
	fake.fTDictDumpMutex.Lock()
	defer fake.fTDictDumpMutex.Unlock()
	fake.FTDictDumpStub = nil
	fake.fTDictDumpReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) FTDictDumpReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.fTDictDumpMutex.Lock()
	defer fake.fTDictDumpMutex.Unlock()
	fake.FTDictDumpStub = nil
	if fake.fTDictDumpReturnsOnCall == nil {
		fake.fTDictDumpReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.fTDictDumpReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) FTDropIndex(arg1 context.Context, arg2 string) *redisa.StatusCmd {
	fake.fTDropIndexMutex.Lock()
	ret, specificReturn := fake.fTDropIndexReturnsOnCall[len(fake.fTDropIndexArgsForCall)]
	fake.fTDropIndexArgsForCall = append(fake.fTDropIndexArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FTDropIndexStub
	fakeReturns := fake.fTDropIndexReturns
	fake.recordInvocation("FTDropIndex", []interface{}{arg1, arg2})
	fake.fTDropIndexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTDropIndexCallCount() int {
	fake.fTDropIndexMutex.RLock()
	defer fake.fTDropIndexMutex.RUnlock()
	return len(fake.fTDropIndexArgsForCall)
}

func (fake *FakeCmdable) FTDropIndexCalls(stub func(context.Context, string) *redisa.StatusCmd) {
	fake.fTDropIndexMutex.Lock()
	defer fake.fTDropIndexMutex.Unlock()
	fake.FTDropIndexStub = stub
}

func (fake *FakeCmdable) FTDropIndexArgsForCall(i int) (context.Context, string) {
	fake.fTDropIndexMutex.RLock()
	defer fake.fTDropIndexMutex.RUnlock()
	argsForCall := fake.fTDropIndexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) FTDropIndexReturns(result1 *redisa.StatusCmd) {
	fake.fTDropIndexMutex.Lock()
	defer fake.fTDropIndexMutex.Unlock()
	fake.FTDropIndexStub = nil
	fake.fTDropIndexReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTDropIndexReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.fTDropIndexMutex.Lock()
	defer fake.fTDropIndexMutex.Unlock()
	fake.FTDropIndexStub = nil
	if fake.fTDropIndexReturnsOnCall == nil {
		fake.fTDropIndexReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.fTDropIndexReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTDropIndexWithArgs(arg1 context.Context, arg2 string, arg3 *redisa.FTDropIndexOptions) *redisa.StatusCmd {
	fake.fTDropIndexWithArgsMutex.Lock()
	ret, specificReturn := fake.fTDropIndexWithArgsReturnsOnCall[len(fake.fTDropIndexWithArgsArgsForCall)]
	fake.fTDropIndexWithArgsArgsForCall = append(fake.fTDropIndexWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.FTDropIndexOptions
	}{arg1, arg2, arg3})
	stub := fake.FTDropIndexWithArgsStub
	fakeReturns := fake.fTDropIndexWithArgsReturns
	fake.recordInvocation("FTDropIndexWithArgs", []interface{}{arg1, arg2, arg3})
	fake.fTDropIndexWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTDropIndexWithArgsCallCount() int {
	fake.fTDropIndexWithArgsMutex.RLock()
	defer fake.fTDropIndexWithArgsMutex.RUnlock()
	return len(fake.fTDropIndexWithArgsArgsForCall)
}

func (fake *FakeCmdable) FTDropIndexWithArgsCalls(stub func(context.Context, string, *redisa.FTDropIndexOptions) *redisa.StatusCmd) {
	fake.fTDropIndexWithArgsMutex.Lock()
	defer fake.fTDropIndexWithArgsMutex.Unlock()
	fake.FTDropIndexWithArgsStub = stub
}

func (fake *FakeCmdable) FTDropIndexWithArgsArgsForCall(i int) (context.Context, string, *redisa.FTDropIndexOptions) {
	fake.fTDropIndexWithArgsMutex.RLock()
	defer fake.fTDropIndexWithArgsMutex.RUnlock()
	argsForCall := fake.fTDropIndexWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) FTDropIndexWithArgsReturns(result1 *redisa.StatusCmd) {
	fake.fTDropIndexWithArgsMutex.Lock()
	defer fake.fTDropIndexWithArgsMutex.Unlock()
	fake.FTDropIndexWithArgsStub = nil
	fake.fTDropIndexWithArgsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTDropIndexWithArgsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.fTDropIndexWithArgsMutex.Lock()
	defer fake.fTDropIndexWithArgsMutex.Unlock()
	fake.FTDropIndexWithArgsStub = nil
	if fake.fTDropIndexWithArgsReturnsOnCall == nil {
		fake.fTDropIndexWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.fTDropIndexWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTExplain(arg1 context.Context, arg2 string, arg3 string) *redisa.StringCmd {
	fake.fTExplainMutex.Lock()
	ret, specificReturn := fake.fTExplainReturnsOnCall[len(fake.fTExplainArgsForCall)]
	fake.fTExplainArgsForCall = append(fake.fTExplainArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FTExplainStub
	fakeReturns := fake.fTExplainReturns
	fake.recordInvocation("FTExplain", []interface{}{arg1, arg2, arg3})
	fake.fTExplainMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTExplainCallCount() int {
	fake.fTExplainMutex.RLock()
	defer fake.fTExplainMutex.RUnlock()
	return len(fake.fTExplainArgsForCall)
}

func (fake *FakeCmdable) FTExplainCalls(stub func(context.Context, string, string) *redisa.StringCmd) {
	fake.fTExplainMutex.Lock()
	defer fake.fTExplainMutex.Unlock()
	fake.FTExplainStub = stub
}

func (fake *FakeCmdable) FTExplainArgsForCall(i int) (context.Context, string, string) {
	fake.fTExplainMutex.RLock()
	defer fake.fTExplainMutex.RUnlock()
	argsForCall := fake.fTExplainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) FTExplainReturns(result1 *redisa.StringCmd) {
	fake.fTExplainMutex.Lock()
	defer fake.fTExplainMutex.Unlock()
	fake.FTExplainStub = nil
	fake.fTExplainReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FTExplainReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.fTExplainMutex.Lock()
	defer fake.fTExplainMutex.Unlock()
	fake.FTExplainStub = nil
	if fake.fTExplainReturnsOnCall == nil {
		fake.fTExplainReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.fTExplainReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FTExplainWithArgs(arg1 context.Context, arg2 string, arg3 string, arg4 *redisa.FTExplainOptions) *redisa.StringCmd {
	fake.fTExplainWithArgsMutex.Lock()
	ret, specificReturn := fake.fTExplainWithArgsReturnsOnCall[len(fake.fTExplainWithArgsArgsForCall)]
	fake.fTExplainWithArgsArgsForCall = append(fake.fTExplainWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.FTExplainOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.FTExplainWithArgsStub
	fakeReturns := fake.fTExplainWithArgsReturns
	fake.recordInvocation("FTExplainWithArgs", []interface{}{arg1, arg2, arg3, arg4})
	fake.fTExplainWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTExplainWithArgsCallCount() int {
	fake.fTExplainWithArgsMutex.RLock()
	defer fake.fTExplainWithArgsMutex.RUnlock()
	return len(fake.fTExplainWithArgsArgsForCall)
}

func (fake *FakeCmdable) FTExplainWithArgsCalls(stub func(context.Context, string, string, *redisa.FTExplainOptions) *redisa.StringCmd) {
	fake.fTExplainWithArgsMutex.Lock()
	defer fake.fTExplainWithArgsMutex.Unlock()
	fake.FTExplainWithArgsStub = stub
}

func (fake *FakeCmdable) FTExplainWithArgsArgsForCall(i int) (context.Context, string, string, *redisa.FTExplainOptions) {
	fake.fTExplainWithArgsMutex.RLock()
	defer fake.fTExplainWithArgsMutex.RUnlock()
	argsForCall := fake.fTExplainWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) FTExplainWithArgsReturns(result1 *redisa.StringCmd) {
	fake.fTExplainWithArgsMutex.Lock()
	defer fake.fTExplainWithArgsMutex.Unlock()
	fake.FTExplainWithArgsStub = nil
	fake.fTExplainWithArgsReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FTExplainWithArgsReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.fTExplainWithArgsMutex.Lock()
	defer fake.fTExplainWithArgsMutex.Unlock()
	fake.FTExplainWithArgsStub = nil
	if fake.fTExplainWithArgsReturnsOnCall == nil {
		fake.fTExplainWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.fTExplainWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FTInfo(arg1 context.Context, arg2 string) *redisa.FTInfoCmd {
	fake.fTInfoMutex.Lock()
	ret, specificReturn := fake.fTInfoReturnsOnCall[len(fake.fTInfoArgsForCall)]
	fake.fTInfoArgsForCall = append(fake.fTInfoArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FTInfoStub
	fakeReturns := fake.fTInfoReturns
	fake.recordInvocation("FTInfo", []interface{}{arg1, arg2})
	fake.fTInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTInfoCallCount() int {
	fake.fTInfoMutex.RLock()
	defer fake.fTInfoMutex.RUnlock()
	return len(fake.fTInfoArgsForCall)
}

func (fake *FakeCmdable) FTInfoCalls(stub func(context.Context, string) *redisa.FTInfoCmd) {
	fake.fTInfoMutex.Lock()
	defer fake.fTInfoMutex.Unlock()
	fake.FTInfoStub = stub
}

func (fake *FakeCmdable) FTInfoArgsForCall(i int) (context.Context, string) {
	fake.fTInfoMutex.RLock()
	defer fake.fTInfoMutex.RUnlock()
	argsForCall := fake.fTInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) FTInfoReturns(result1 *redisa.FTInfoCmd) {
	fake.fTInfoMutex.Lock()
	defer fake.fTInfoMutex.Unlock()
	fake.FTInfoStub = nil
	fake.fTInfoReturns = struct {
		result1 *redisa.FTInfoCmd
	}{result1}
}

func (fake *FakeCmdable) FTInfoReturnsOnCall(i int, result1 *redisa.FTInfoCmd) {
	fake.fTInfoMutex.Lock()
	defer fake.fTInfoMutex.Unlock()
	fake.FTInfoStub = nil
	if fake.fTInfoReturnsOnCall == nil {
		fake.fTInfoReturnsOnCall = make(map[int]struct {
			result1 *redisa.FTInfoCmd
		})
	}
	fake.fTInfoReturnsOnCall[i] = struct {
		result1 *redisa.FTInfoCmd
	}{result1}
}

func (fake *FakeCmdable) FTSearch(arg1 context.Context, arg2 string, arg3 string) *redisa.FTSearchCmd {
	fake.fTSearchMutex.Lock()
	ret, specificReturn := fake.fTSearchReturnsOnCall[len(fake.fTSearchArgsForCall)]
	fake.fTSearchArgsForCall = append(fake.fTSearchArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FTSearchStub
	fakeReturns := fake.fTSearchReturns
	fake.recordInvocation("FTSearch", []interface{}{arg1, arg2, arg3})
	fake.fTSearchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTSearchCallCount() int {
	fake.fTSearchMutex.RLock()
	defer fake.fTSearchMutex.RUnlock()
	return len(fake.fTSearchArgsForCall)
}

func (fake *FakeCmdable) FTSearchCalls(stub func(context.Context, string, string) *redisa.FTSearchCmd) {
	fake.fTSearchMutex.Lock()
	defer fake.fTSearchMutex.Unlock()
	fake.FTSearchStub = stub
}

func (fake *FakeCmdable) FTSearchArgsForCall(i int) (context.Context, string, string) {
	fake.fTSearchMutex.RLock()
	defer fake.fTSearchMutex.RUnlock()
	argsForCall := fake.fTSearchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) FTSearchReturns(result1 *redisa.FTSearchCmd) {
	fake.fTSearchMutex.Lock()
	defer fake.fTSearchMutex.Unlock()
	fake.FTSearchStub = nil
	fake.fTSearchReturns = struct {
		result1 *redisa.FTSearchCmd
	}{result1}
}

func (fake *FakeCmdable) FTSearchReturnsOnCall(i int, result1 *redisa.FTSearchCmd) {
	fake.fTSearchMutex.Lock()
	defer fake.fTSearchMutex.Unlock()
	fake.FTSearchStub = nil
	if fake.fTSearchReturnsOnCall == nil {
		fake.fTSearchReturnsOnCall = make(map[int]struct {
			result1 *redisa.FTSearchCmd
		})
	}
	fake.fTSearchReturnsOnCall[i] = struct {
		result1 *redisa.FTSearchCmd
	}{result1}
}

func (fake *FakeCmdable) FTSearchWithArgs(arg1 context.Context, arg2 string, arg3 string, arg4 *redisa.FTSearchOptions) *redisa.FTSearchCmd {
	fake.fTSearchWithArgsMutex.Lock()
	ret, specificReturn := fake.fTSearchWithArgsReturnsOnCall[len(fake.fTSearchWithArgsArgsForCall)]
	fake.fTSearchWithArgsArgsForCall = append(fake.fTSearchWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.FTSearchOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.FTSearchWithArgsStub
	fakeReturns := fake.fTSearchWithArgsReturns
	fake.recordInvocation("FTSearchWithArgs", []interface{}{arg1, arg2, arg3, arg4})
	fake.fTSearchWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTSearchWithArgsCallCount() int {
	fake.fTSearchWithArgsMutex.RLock()
	defer fake.fTSearchWithArgsMutex.RUnlock()
	return len(fake.fTSearchWithArgsArgsForCall)
}

func (fake *FakeCmdable) FTSearchWithArgsCalls(stub func(context.Context, string, string, *redisa.FTSearchOptions) *redisa.FTSearchCmd) {
	fake.fTSearchWithArgsMutex.Lock()
	defer fake.fTSearchWithArgsMutex.Unlock()
	fake.FTSearchWithArgsStub = stub
}

func (fake *FakeCmdable) FTSearchWithArgsArgsForCall(i int) (context.Context, string, string, *redisa.FTSearchOptions) {
	fake.fTSearchWithArgsMutex.RLock()
	defer fake.fTSearchWithArgsMutex.RUnlock()
	argsForCall := fake.fTSearchWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) FTSearchWithArgsReturns(result1 *redisa.FTSearchCmd) {
	fake.fTSearchWithArgsMutex.Lock()
	defer fake.fTSearchWithArgsMutex.Unlock()
	fake.FTSearchWithArgsStub = nil
	fake.fTSearchWithArgsReturns = struct {
		result1 *redisa.FTSearchCmd
	}{result1}
}

func (fake *FakeCmdable) FTSearchWithArgsReturnsOnCall(i int, result1 *redisa.FTSearchCmd) {
	fake.fTSearchWithArgsMutex.Lock()
	defer fake.fTSearchWithArgsMutex.Unlock()
	fake.FTSearchWithArgsStub = nil
	if fake.fTSearchWithArgsReturnsOnCall == nil {
		fake.fTSearchWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.FTSearchCmd
		})
	}
	fake.fTSearchWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.FTSearchCmd
	}{result1}
}

func (fake *FakeCmdable) FTSpellCheck(arg1 context.Context, arg2 string, arg3 string) *redisa.FTSpellCheckCmd {
	fake.fTSpellCheckMutex.Lock()
	ret, specificReturn := fake.fTSpellCheckReturnsOnCall[len(fake.fTSpellCheckArgsForCall)]
	fake.fTSpellCheckArgsForCall = append(fake.fTSpellCheckArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FTSpellCheckStub
	fakeReturns := fake.fTSpellCheckReturns
	fake.recordInvocation("FTSpellCheck", []interface{}{arg1, arg2, arg3})
	fake.fTSpellCheckMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTSpellCheckCallCount() int {
	fake.fTSpellCheckMutex.RLock()
	defer fake.fTSpellCheckMutex.RUnlock()
	return len(fake.fTSpellCheckArgsForCall)
}

func (fake *FakeCmdable) FTSpellCheckCalls(stub func(context.Context, string, string) *redisa.FTSpellCheckCmd) {
	fake.fTSpellCheckMutex.Lock()
	defer fake.fTSpellCheckMutex.Unlock()
	fake.FTSpellCheckStub = stub
}

func (fake *FakeCmdable) FTSpellCheckArgsForCall(i int) (context.Context, string, string) {
	fake.fTSpellCheckMutex.RLock()
	defer fake.fTSpellCheckMutex.RUnlock()
	argsForCall := fake.fTSpellCheckArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) FTSpellCheckReturns(result1 *redisa.FTSpellCheckCmd) {
	fake.fTSpellCheckMutex.Lock()
	defer fake.fTSpellCheckMutex.Unlock()
	fake.FTSpellCheckStub = nil
	fake.fTSpellCheckReturns = struct {
		result1 *redisa.FTSpellCheckCmd
	}{result1}
}

func (fake *FakeCmdable) FTSpellCheckReturnsOnCall(i int, result1 *redisa.FTSpellCheckCmd) {
	fake.fTSpellCheckMutex.Lock()
	defer fake.fTSpellCheckMutex.Unlock()
	fake.FTSpellCheckStub = nil
	if fake.fTSpellCheckReturnsOnCall == nil {
		fake.fTSpellCheckReturnsOnCall = make(map[int]struct {
			result1 *redisa.FTSpellCheckCmd
		})
	}
	fake.fTSpellCheckReturnsOnCall[i] = struct {
		result1 *redisa.FTSpellCheckCmd
	}{result1}
}

func (fake *FakeCmdable) FTSpellCheckWithArgs(arg1 context.Context, arg2 string, arg3 string, arg4 *redisa.FTSpellCheckOptions) *redisa.FTSpellCheckCmd {
	fake.fTSpellCheckWithArgsMutex.Lock()
	ret, specificReturn := fake.fTSpellCheckWithArgsReturnsOnCall[len(fake.fTSpellCheckWithArgsArgsForCall)]
	fake.fTSpellCheckWithArgsArgsForCall = append(fake.fTSpellCheckWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.FTSpellCheckOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.FTSpellCheckWithArgsStub
	fakeReturns := fake.fTSpellCheckWithArgsReturns
	fake.recordInvocation("FTSpellCheckWithArgs", []interface{}{arg1, arg2, arg3, arg4})
	fake.fTSpellCheckWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTSpellCheckWithArgsCallCount() int {
	fake.fTSpellCheckWithArgsMutex.RLock()
	defer fake.fTSpellCheckWithArgsMutex.RUnlock()
	return len(fake.fTSpellCheckWithArgsArgsForCall)
}

func (fake *FakeCmdable) FTSpellCheckWithArgsCalls(stub func(context.Context, string, string, *redisa.FTSpellCheckOptions) *redisa.FTSpellCheckCmd) {
	fake.fTSpellCheckWithArgsMutex.Lock()
	defer fake.fTSpellCheckWithArgsMutex.Unlock()
	fake.FTSpellCheckWithArgsStub = stub
}

func (fake *FakeCmdable) FTSpellCheckWithArgsArgsForCall(i int) (context.Context, string, string, *redisa.FTSpellCheckOptions) {
	fake.fTSpellCheckWithArgsMutex.RLock()
	defer fake.fTSpellCheckWithArgsMutex.RUnlock()
	argsForCall := fake.fTSpellCheckWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) FTSpellCheckWithArgsReturns(result1 *redisa.FTSpellCheckCmd) {
	fake.fTSpellCheckWithArgsMutex.Lock()
	defer fake.fTSpellCheckWithArgsMutex.Unlock()
	fake.FTSpellCheckWithArgsStub = nil
	fake.fTSpellCheckWithArgsReturns = struct {
		result1 *redisa.FTSpellCheckCmd
	}{result1}
}

func (fake *FakeCmdable) FTSpellCheckWithArgsReturnsOnCall(i int, result1 *redisa.FTSpellCheckCmd) {
	fake.fTSpellCheckWithArgsMutex.Lock()
	defer fake.fTSpellCheckWithArgsMutex.Unlock()
	fake.FTSpellCheckWithArgsStub = nil
	if fake.fTSpellCheckWithArgsReturnsOnCall == nil {
		fake.fTSpellCheckWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.FTSpellCheckCmd
		})
	}
	fake.fTSpellCheckWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.FTSpellCheckCmd
	}{result1}
}

func (fake *FakeCmdable) FTSynDump(arg1 context.Context, arg2 string) *redisa.FTSynDumpCmd {
	fake.fTSynDumpMutex.Lock()
	ret, specificReturn := fake.fTSynDumpReturnsOnCall[len(fake.fTSynDumpArgsForCall)]
	fake.fTSynDumpArgsForCall = append(fake.fTSynDumpArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FTSynDumpStub
	fakeReturns := fake.fTSynDumpReturns
	fake.recordInvocation("FTSynDump", []interface{}{arg1, arg2})
	fake.fTSynDumpMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTSynDumpCallCount() int {
	fake.fTSynDumpMutex.RLock()
	defer fake.fTSynDumpMutex.RUnlock()
	return len(fake.fTSynDumpArgsForCall)
}

func (fake *FakeCmdable) FTSynDumpCalls(stub func(context.Context, string) *redisa.FTSynDumpCmd) {
	fake.fTSynDumpMutex.Lock()
	defer fake.fTSynDumpMutex.Unlock()
	fake.FTSynDumpStub = stub
}

func (fake *FakeCmdable) FTSynDumpArgsForCall(i int) (context.Context, string) {
	fake.fTSynDumpMutex.RLock()
	defer fake.fTSynDumpMutex.RUnlock()
	argsForCall := fake.fTSynDumpArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) FTSynDumpReturns(result1 *redisa.FTSynDumpCmd) {
	fake.fTSynDumpMutex.Lock()
	defer fake.fTSynDumpMutex.Unlock()
	fake.FTSynDumpStub = nil
	fake.fTSynDumpReturns = struct {
		result1 *redisa.FTSynDumpCmd
	}{result1}
}

func (fake *FakeCmdable) FTSynDumpReturnsOnCall(i int, result1 *redisa.FTSynDumpCmd) {
	fake.fTSynDumpMutex.Lock()
	defer fake.fTSynDumpMutex.Unlock()
	fake.FTSynDumpStub = nil
	if fake.fTSynDumpReturnsOnCall == nil {
		fake.fTSynDumpReturnsOnCall = make(map[int]struct {
			result1 *redisa.FTSynDumpCmd
		})
	}
	fake.fTSynDumpReturnsOnCall[i] = struct {
		result1 *redisa.FTSynDumpCmd
	}{result1}
}

func (fake *FakeCmdable) FTSynUpdate(arg1 context.Context, arg2 string, arg3 interface{}, arg4 []interface{}) *redisa.StatusCmd {
	var arg4Copy []interface{}
	if arg4 != nil {
		arg4Copy = make([]interface{}, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.fTSynUpdateMutex.Lock()
	ret, specificReturn := fake.fTSynUpdateReturnsOnCall[len(fake.fTSynUpdateArgsForCall)]
	fake.fTSynUpdateArgsForCall = append(fake.fTSynUpdateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 []interface{}
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.FTSynUpdateStub
	fakeReturns := fake.fTSynUpdateReturns
	fake.recordInvocation("FTSynUpdate", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.fTSynUpdateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTSynUpdateCallCount() int {
	fake.fTSynUpdateMutex.RLock()
	defer fake.fTSynUpdateMutex.RUnlock()
	return len(fake.fTSynUpdateArgsForCall)
}

func (fake *FakeCmdable) FTSynUpdateCalls(stub func(context.Context, string, interface{}, []interface{}) *redisa.StatusCmd) {
	fake.fTSynUpdateMutex.Lock()
	defer fake.fTSynUpdateMutex.Unlock()
	fake.FTSynUpdateStub = stub
}

func (fake *FakeCmdable) FTSynUpdateArgsForCall(i int) (context.Context, string, interface{}, []interface{}) {
	fake.fTSynUpdateMutex.RLock()
	defer fake.fTSynUpdateMutex.RUnlock()
	argsForCall := fake.fTSynUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) FTSynUpdateReturns(result1 *redisa.StatusCmd) {
	fake.fTSynUpdateMutex.Lock()
	defer fake.fTSynUpdateMutex.Unlock()
	fake.FTSynUpdateStub = nil
	fake.fTSynUpdateReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTSynUpdateReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.fTSynUpdateMutex.Lock()
	defer fake.fTSynUpdateMutex.Unlock()
	fake.FTSynUpdateStub = nil
	if fake.fTSynUpdateReturnsOnCall == nil {
		fake.fTSynUpdateReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.fTSynUpdateReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTSynUpdateWithArgs(arg1 context.Context, arg2 string, arg3 interface{}, arg4 *redisa.FTSynUpdateOptions, arg5 []interface{}) *redisa.StatusCmd {
	var arg5Copy []interface{}
	if arg5 != nil {
		arg5Copy = make([]interface{}, len(arg5))
		copy(arg5Copy, arg5)
	}
	fake.fTSynUpdateWithArgsMutex.Lock()
	ret, specificReturn := fake.fTSynUpdateWithArgsReturnsOnCall[len(fake.fTSynUpdateWithArgsArgsForCall)]
	fake.fTSynUpdateWithArgsArgsForCall = append(fake.fTSynUpdateWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 *redisa.FTSynUpdateOptions
		arg5 []interface{}
	}{arg1, arg2, arg3, arg4, arg5Copy})
	stub := fake.FTSynUpdateWithArgsStub
	fakeReturns := fake.fTSynUpdateWithArgsReturns
	fake.recordInvocation("FTSynUpdateWithArgs", []interface{}{arg1, arg2, arg3, arg4, arg5Copy})
	fake.fTSynUpdateWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTSynUpdateWithArgsCallCount() int {
	fake.fTSynUpdateWithArgsMutex.RLock()
	defer fake.fTSynUpdateWithArgsMutex.RUnlock()
	return len(fake.fTSynUpdateWithArgsArgsForCall)
}

func (fake *FakeCmdable) FTSynUpdateWithArgsCalls(stub func(context.Context, string, interface{}, *redisa.FTSynUpdateOptions, []interface{}) *redisa.StatusCmd) {
	fake.fTSynUpdateWithArgsMutex.Lock()
	defer fake.fTSynUpdateWithArgsMutex.Unlock()
	fake.FTSynUpdateWithArgsStub = stub
}

func (fake *FakeCmdable) FTSynUpdateWithArgsArgsForCall(i int) (context.Context, string, interface{}, *redisa.FTSynUpdateOptions, []interface{}) {
	fake.fTSynUpdateWithArgsMutex.RLock()
	defer fake.fTSynUpdateWithArgsMutex.RUnlock()
	argsForCall := fake.fTSynUpdateWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) FTSynUpdateWithArgsReturns(result1 *redisa.StatusCmd) {
	fake.fTSynUpdateWithArgsMutex.Lock()
	defer fake.fTSynUpdateWithArgsMutex.Unlock()
	fake.FTSynUpdateWithArgsStub = nil
	fake.fTSynUpdateWithArgsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTSynUpdateWithArgsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.fTSynUpdateWithArgsMutex.Lock()
	defer fake.fTSynUpdateWithArgsMutex.Unlock()
	fake.FTSynUpdateWithArgsStub = nil
	if fake.fTSynUpdateWithArgsReturnsOnCall == nil {
		fake.fTSynUpdateWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.fTSynUpdateWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FTTagVals(arg1 context.Context, arg2 string, arg3 string) *redisa.StringSliceCmd {
	fake.fTTagValsMutex.Lock()
	ret, specificReturn := fake.fTTagValsReturnsOnCall[len(fake.fTTagValsArgsForCall)]
	fake.fTTagValsArgsForCall = append(fake.fTTagValsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FTTagValsStub
	fakeReturns := fake.fTTagValsReturns
	fake.recordInvocation("FTTagVals", []interface{}{arg1, arg2, arg3})
	fake.fTTagValsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FTTagValsCallCount() int {
	fake.fTTagValsMutex.RLock()
	defer fake.fTTagValsMutex.RUnlock()
	return len(fake.fTTagValsArgsForCall)
}

func (fake *FakeCmdable) FTTagValsCalls(stub func(context.Context, string, string) *redisa.StringSliceCmd) {
	fake.fTTagValsMutex.Lock()
	defer fake.fTTagValsMutex.Unlock()
	fake.FTTagValsStub = stub
}

func (fake *FakeCmdable) FTTagValsArgsForCall(i int) (context.Context, string, string) {
	fake.fTTagValsMutex.RLock()
	defer fake.fTTagValsMutex.RUnlock()
	argsForCall := fake.fTTagValsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) FTTagValsReturns(result1 *redisa.StringSliceCmd) {
	fake.fTTagValsMutex.Lock()
	defer fake.fTTagValsMutex.Unlock()
	fake.FTTagValsStub = nil
	fake.fTTagValsReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) FTTagValsReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.fTTagValsMutex.Lock()
	defer fake.fTTagValsMutex.Unlock()
	fake.FTTagValsStub = nil
	if fake.fTTagValsReturnsOnCall == nil {
		fake.fTTagValsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.fTTagValsReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) FT_List(arg1 context.Context) *redisa.StringSliceCmd {
	fake.fT_ListMutex.Lock()
	ret, specificReturn := fake.fT_ListReturnsOnCall[len(fake.fT_ListArgsForCall)]
	fake.fT_ListArgsForCall = append(fake.fT_ListArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FT_ListStub
	fakeReturns := fake.fT_ListReturns
	fake.recordInvocation("FT_List", []interface{}{arg1})
	fake.fT_ListMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FT_ListCallCount() int {
	fake.fT_ListMutex.RLock()
	defer fake.fT_ListMutex.RUnlock()
	return len(fake.fT_ListArgsForCall)
}

func (fake *FakeCmdable) FT_ListCalls(stub func(context.Context) *redisa.StringSliceCmd) {
	fake.fT_ListMutex.Lock()
	defer fake.fT_ListMutex.Unlock()
	fake.FT_ListStub = stub
}

func (fake *FakeCmdable) FT_ListArgsForCall(i int) context.Context {
	fake.fT_ListMutex.RLock()
	defer fake.fT_ListMutex.RUnlock()
	argsForCall := fake.fT_ListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) FT_ListReturns(result1 *redisa.StringSliceCmd) {
	fake.fT_ListMutex.Lock()
	defer fake.fT_ListMutex.Unlock()
	fake.FT_ListStub = nil
	fake.fT_ListReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) FT_ListReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.fT_ListMutex.Lock()
	defer fake.fT_ListMutex.Unlock()
	fake.FT_ListStub = nil
	if fake.fT_ListReturnsOnCall == nil {
		fake.fT_ListReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.fT_ListReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) FlushAll(arg1 context.Context) *redisa.StatusCmd {
	fake.flushAllMutex.Lock()
	ret, specificReturn := fake.flushAllReturnsOnCall[len(fake.flushAllArgsForCall)]
	fake.flushAllArgsForCall = append(fake.flushAllArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FlushAllStub
	fakeReturns := fake.flushAllReturns
	fake.recordInvocation("FlushAll", []interface{}{arg1})
	fake.flushAllMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FlushAllCallCount() int {
	fake.flushAllMutex.RLock()
	defer fake.flushAllMutex.RUnlock()
	return len(fake.flushAllArgsForCall)
}

func (fake *FakeCmdable) FlushAllCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.flushAllMutex.Lock()
	defer fake.flushAllMutex.Unlock()
	fake.FlushAllStub = stub
}

func (fake *FakeCmdable) FlushAllArgsForCall(i int) context.Context {
	fake.flushAllMutex.RLock()
	defer fake.flushAllMutex.RUnlock()
	argsForCall := fake.flushAllArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) FlushAllReturns(result1 *redisa.StatusCmd) {
	fake.flushAllMutex.Lock()
	defer fake.flushAllMutex.Unlock()
	fake.FlushAllStub = nil
	fake.flushAllReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FlushAllReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.flushAllMutex.Lock()
	defer fake.flushAllMutex.Unlock()
	fake.FlushAllStub = nil
	if fake.flushAllReturnsOnCall == nil {
		fake.flushAllReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.flushAllReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FlushAllAsync(arg1 context.Context) *redisa.StatusCmd {
	fake.flushAllAsyncMutex.Lock()
	ret, specificReturn := fake.flushAllAsyncReturnsOnCall[len(fake.flushAllAsyncArgsForCall)]
	fake.flushAllAsyncArgsForCall = append(fake.flushAllAsyncArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FlushAllAsyncStub
	fakeReturns := fake.flushAllAsyncReturns
	fake.recordInvocation("FlushAllAsync", []interface{}{arg1})
	fake.flushAllAsyncMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FlushAllAsyncCallCount() int {
	fake.flushAllAsyncMutex.RLock()
	defer fake.flushAllAsyncMutex.RUnlock()
	return len(fake.flushAllAsyncArgsForCall)
}

func (fake *FakeCmdable) FlushAllAsyncCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.flushAllAsyncMutex.Lock()
	defer fake.flushAllAsyncMutex.Unlock()
	fake.FlushAllAsyncStub = stub
}

func (fake *FakeCmdable) FlushAllAsyncArgsForCall(i int) context.Context {
	fake.flushAllAsyncMutex.RLock()
	defer fake.flushAllAsyncMutex.RUnlock()
	argsForCall := fake.flushAllAsyncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) FlushAllAsyncReturns(result1 *redisa.StatusCmd) {
	fake.flushAllAsyncMutex.Lock()
	defer fake.flushAllAsyncMutex.Unlock()
	fake.FlushAllAsyncStub = nil
	fake.flushAllAsyncReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FlushAllAsyncReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.flushAllAsyncMutex.Lock()
	defer fake.flushAllAsyncMutex.Unlock()
	fake.FlushAllAsyncStub = nil
	if fake.flushAllAsyncReturnsOnCall == nil {
		fake.flushAllAsyncReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.flushAllAsyncReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FlushDB(arg1 context.Context) *redisa.StatusCmd {
	fake.flushDBMutex.Lock()
	ret, specificReturn := fake.flushDBReturnsOnCall[len(fake.flushDBArgsForCall)]
	fake.flushDBArgsForCall = append(fake.flushDBArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FlushDBStub
	fakeReturns := fake.flushDBReturns
	fake.recordInvocation("FlushDB", []interface{}{arg1})
	fake.flushDBMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FlushDBCallCount() int {
	fake.flushDBMutex.RLock()
	defer fake.flushDBMutex.RUnlock()
	return len(fake.flushDBArgsForCall)
}

func (fake *FakeCmdable) FlushDBCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.flushDBMutex.Lock()
	defer fake.flushDBMutex.Unlock()
	fake.FlushDBStub = stub
}

func (fake *FakeCmdable) FlushDBArgsForCall(i int) context.Context {
	fake.flushDBMutex.RLock()
	defer fake.flushDBMutex.RUnlock()
	argsForCall := fake.flushDBArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) FlushDBReturns(result1 *redisa.StatusCmd) {
	fake.flushDBMutex.Lock()
	defer fake.flushDBMutex.Unlock()
	fake.FlushDBStub = nil
	fake.flushDBReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FlushDBReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.flushDBMutex.Lock()
	defer fake.flushDBMutex.Unlock()
	fake.FlushDBStub = nil
	if fake.flushDBReturnsOnCall == nil {
		fake.flushDBReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.flushDBReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FlushDBAsync(arg1 context.Context) *redisa.StatusCmd {
	fake.flushDBAsyncMutex.Lock()
	ret, specificReturn := fake.flushDBAsyncReturnsOnCall[len(fake.flushDBAsyncArgsForCall)]
	fake.flushDBAsyncArgsForCall = append(fake.flushDBAsyncArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FlushDBAsyncStub
	fakeReturns := fake.flushDBAsyncReturns
	fake.recordInvocation("FlushDBAsync", []interface{}{arg1})
	fake.flushDBAsyncMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FlushDBAsyncCallCount() int {
	fake.flushDBAsyncMutex.RLock()
	defer fake.flushDBAsyncMutex.RUnlock()
	return len(fake.flushDBAsyncArgsForCall)
}

func (fake *FakeCmdable) FlushDBAsyncCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.flushDBAsyncMutex.Lock()
	defer fake.flushDBAsyncMutex.Unlock()
	fake.FlushDBAsyncStub = stub
}

func (fake *FakeCmdable) FlushDBAsyncArgsForCall(i int) context.Context {
	fake.flushDBAsyncMutex.RLock()
	defer fake.flushDBAsyncMutex.RUnlock()
	argsForCall := fake.flushDBAsyncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) FlushDBAsyncReturns(result1 *redisa.StatusCmd) {
	fake.flushDBAsyncMutex.Lock()
	defer fake.flushDBAsyncMutex.Unlock()
	fake.FlushDBAsyncStub = nil
	fake.flushDBAsyncReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FlushDBAsyncReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.flushDBAsyncMutex.Lock()
	defer fake.flushDBAsyncMutex.Unlock()
	fake.FlushDBAsyncStub = nil
	if fake.flushDBAsyncReturnsOnCall == nil {
		fake.flushDBAsyncReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.flushDBAsyncReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionDelete(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.functionDeleteMutex.Lock()
	ret, specificReturn := fake.functionDeleteReturnsOnCall[len(fake.functionDeleteArgsForCall)]
	fake.functionDeleteArgsForCall = append(fake.functionDeleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FunctionDeleteStub
	fakeReturns := fake.functionDeleteReturns
	fake.recordInvocation("FunctionDelete", []interface{}{arg1, arg2})
	fake.functionDeleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FunctionDeleteCallCount() int {
	fake.functionDeleteMutex.RLock()
	defer fake.functionDeleteMutex.RUnlock()
	return len(fake.functionDeleteArgsForCall)
}

func (fake *FakeCmdable) FunctionDeleteCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.functionDeleteMutex.Lock()
	defer fake.functionDeleteMutex.Unlock()
	fake.FunctionDeleteStub = stub
}

func (fake *FakeCmdable) FunctionDeleteArgsForCall(i int) (context.Context, string) {
	fake.functionDeleteMutex.RLock()
	defer fake.functionDeleteMutex.RUnlock()
	argsForCall := fake.functionDeleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) FunctionDeleteReturns(result1 *redisa.StringCmd) {
	fake.functionDeleteMutex.Lock()
	defer fake.functionDeleteMutex.Unlock()
	fake.FunctionDeleteStub = nil
	fake.functionDeleteReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionDeleteReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.functionDeleteMutex.Lock()
	defer fake.functionDeleteMutex.Unlock()
	fake.FunctionDeleteStub = nil
	if fake.functionDeleteReturnsOnCall == nil {
		fake.functionDeleteReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.functionDeleteReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionDump(arg1 context.Context) *redisa.StringCmd {
	fake.functionDumpMutex.Lock()
	ret, specificReturn := fake.functionDumpReturnsOnCall[len(fake.functionDumpArgsForCall)]
	fake.functionDumpArgsForCall = append(fake.functionDumpArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FunctionDumpStub
	fakeReturns := fake.functionDumpReturns
	fake.recordInvocation("FunctionDump", []interface{}{arg1})
	fake.functionDumpMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FunctionDumpCallCount() int {
	fake.functionDumpMutex.RLock()
	defer fake.functionDumpMutex.RUnlock()
	return len(fake.functionDumpArgsForCall)
}

func (fake *FakeCmdable) FunctionDumpCalls(stub func(context.Context) *redisa.StringCmd) {
	fake.functionDumpMutex.Lock()
	defer fake.functionDumpMutex.Unlock()
	fake.FunctionDumpStub = stub
}

func (fake *FakeCmdable) FunctionDumpArgsForCall(i int) context.Context {
	fake.functionDumpMutex.RLock()
	defer fake.functionDumpMutex.RUnlock()
	argsForCall := fake.functionDumpArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) FunctionDumpReturns(result1 *redisa.StringCmd) {
	fake.functionDumpMutex.Lock()
	defer fake.functionDumpMutex.Unlock()
	fake.FunctionDumpStub = nil
	fake.functionDumpReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionDumpReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.functionDumpMutex.Lock()
	defer fake.functionDumpMutex.Unlock()
	fake.FunctionDumpStub = nil
	if fake.functionDumpReturnsOnCall == nil {
		fake.functionDumpReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.functionDumpReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionFlush(arg1 context.Context) *redisa.StringCmd {
	fake.functionFlushMutex.Lock()
	ret, specificReturn := fake.functionFlushReturnsOnCall[len(fake.functionFlushArgsForCall)]
	fake.functionFlushArgsForCall = append(fake.functionFlushArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FunctionFlushStub
	fakeReturns := fake.functionFlushReturns
	fake.recordInvocation("FunctionFlush", []interface{}{arg1})
	fake.functionFlushMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FunctionFlushCallCount() int {
	fake.functionFlushMutex.RLock()
	defer fake.functionFlushMutex.RUnlock()
	return len(fake.functionFlushArgsForCall)
}

func (fake *FakeCmdable) FunctionFlushCalls(stub func(context.Context) *redisa.StringCmd) {
	fake.functionFlushMutex.Lock()
	defer fake.functionFlushMutex.Unlock()
	fake.FunctionFlushStub = stub
}

func (fake *FakeCmdable) FunctionFlushArgsForCall(i int) context.Context {
	fake.functionFlushMutex.RLock()
	defer fake.functionFlushMutex.RUnlock()
	argsForCall := fake.functionFlushArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) FunctionFlushReturns(result1 *redisa.StringCmd) {
	fake.functionFlushMutex.Lock()
	defer fake.functionFlushMutex.Unlock()
	fake.FunctionFlushStub = nil
	fake.functionFlushReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionFlushReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.functionFlushMutex.Lock()
	defer fake.functionFlushMutex.Unlock()
	fake.FunctionFlushStub = nil
	if fake.functionFlushReturnsOnCall == nil {
		fake.functionFlushReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.functionFlushReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionFlushAsync(arg1 context.Context) *redisa.StringCmd {
	fake.functionFlushAsyncMutex.Lock()
	ret, specificReturn := fake.functionFlushAsyncReturnsOnCall[len(fake.functionFlushAsyncArgsForCall)]
	fake.functionFlushAsyncArgsForCall = append(fake.functionFlushAsyncArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FunctionFlushAsyncStub
	fakeReturns := fake.functionFlushAsyncReturns
	fake.recordInvocation("FunctionFlushAsync", []interface{}{arg1})
	fake.functionFlushAsyncMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FunctionFlushAsyncCallCount() int {
	fake.functionFlushAsyncMutex.RLock()
	defer fake.functionFlushAsyncMutex.RUnlock()
	return len(fake.functionFlushAsyncArgsForCall)
}

func (fake *FakeCmdable) FunctionFlushAsyncCalls(stub func(context.Context) *redisa.StringCmd) {
	fake.functionFlushAsyncMutex.Lock()
	defer fake.functionFlushAsyncMutex.Unlock()
	fake.FunctionFlushAsyncStub = stub
}

func (fake *FakeCmdable) FunctionFlushAsyncArgsForCall(i int) context.Context {
	fake.functionFlushAsyncMutex.RLock()
	defer fake.functionFlushAsyncMutex.RUnlock()
	argsForCall := fake.functionFlushAsyncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) FunctionFlushAsyncReturns(result1 *redisa.StringCmd) {
	fake.functionFlushAsyncMutex.Lock()
	defer fake.functionFlushAsyncMutex.Unlock()
	fake.FunctionFlushAsyncStub = nil
	fake.functionFlushAsyncReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionFlushAsyncReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.functionFlushAsyncMutex.Lock()
	defer fake.functionFlushAsyncMutex.Unlock()
	fake.FunctionFlushAsyncStub = nil
	if fake.functionFlushAsyncReturnsOnCall == nil {
		fake.functionFlushAsyncReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.functionFlushAsyncReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionKill(arg1 context.Context) *redisa.StringCmd {
	fake.functionKillMutex.Lock()
	ret, specificReturn := fake.functionKillReturnsOnCall[len(fake.functionKillArgsForCall)]
	fake.functionKillArgsForCall = append(fake.functionKillArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FunctionKillStub
	fakeReturns := fake.functionKillReturns
	fake.recordInvocation("FunctionKill", []interface{}{arg1})
	fake.functionKillMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FunctionKillCallCount() int {
	fake.functionKillMutex.RLock()
	defer fake.functionKillMutex.RUnlock()
	return len(fake.functionKillArgsForCall)
}

func (fake *FakeCmdable) FunctionKillCalls(stub func(context.Context) *redisa.StringCmd) {
	fake.functionKillMutex.Lock()
	defer fake.functionKillMutex.Unlock()
	fake.FunctionKillStub = stub
}

func (fake *FakeCmdable) FunctionKillArgsForCall(i int) context.Context {
	fake.functionKillMutex.RLock()
	defer fake.functionKillMutex.RUnlock()
	argsForCall := fake.functionKillArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) FunctionKillReturns(result1 *redisa.StringCmd) {
	fake.functionKillMutex.Lock()
	defer fake.functionKillMutex.Unlock()
	fake.FunctionKillStub = nil
	fake.functionKillReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionKillReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.functionKillMutex.Lock()
	defer fake.functionKillMutex.Unlock()
	fake.FunctionKillStub = nil
	if fake.functionKillReturnsOnCall == nil {
		fake.functionKillReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.functionKillReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionList(arg1 context.Context, arg2 redisa.FunctionListQuery) *redisa.FunctionListCmd {
	fake.functionListMutex.Lock()
	ret, specificReturn := fake.functionListReturnsOnCall[len(fake.functionListArgsForCall)]
	fake.functionListArgsForCall = append(fake.functionListArgsForCall, struct {
		arg1 context.Context
		arg2 redisa.FunctionListQuery
	}{arg1, arg2})
	stub := fake.FunctionListStub
	fakeReturns := fake.functionListReturns
	fake.recordInvocation("FunctionList", []interface{}{arg1, arg2})
	fake.functionListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FunctionListCallCount() int {
	fake.functionListMutex.RLock()
	defer fake.functionListMutex.RUnlock()
	return len(fake.functionListArgsForCall)
}

func (fake *FakeCmdable) FunctionListCalls(stub func(context.Context, redisa.FunctionListQuery) *redisa.FunctionListCmd) {
	fake.functionListMutex.Lock()
	defer fake.functionListMutex.Unlock()
	fake.FunctionListStub = stub
}

func (fake *FakeCmdable) FunctionListArgsForCall(i int) (context.Context, redisa.FunctionListQuery) {
	fake.functionListMutex.RLock()
	defer fake.functionListMutex.RUnlock()
	argsForCall := fake.functionListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) FunctionListReturns(result1 *redisa.FunctionListCmd) {
	fake.functionListMutex.Lock()
	defer fake.functionListMutex.Unlock()
	fake.FunctionListStub = nil
	fake.functionListReturns = struct {
		result1 *redisa.FunctionListCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionListReturnsOnCall(i int, result1 *redisa.FunctionListCmd) {
	fake.functionListMutex.Lock()
	defer fake.functionListMutex.Unlock()
	fake.FunctionListStub = nil
	if fake.functionListReturnsOnCall == nil {
		fake.functionListReturnsOnCall = make(map[int]struct {
			result1 *redisa.FunctionListCmd
		})
	}
	fake.functionListReturnsOnCall[i] = struct {
		result1 *redisa.FunctionListCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionLoad(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.functionLoadMutex.Lock()
	ret, specificReturn := fake.functionLoadReturnsOnCall[len(fake.functionLoadArgsForCall)]
	fake.functionLoadArgsForCall = append(fake.functionLoadArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FunctionLoadStub
	fakeReturns := fake.functionLoadReturns
	fake.recordInvocation("FunctionLoad", []interface{}{arg1, arg2})
	fake.functionLoadMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FunctionLoadCallCount() int {
	fake.functionLoadMutex.RLock()
	defer fake.functionLoadMutex.RUnlock()
	return len(fake.functionLoadArgsForCall)
}

func (fake *FakeCmdable) FunctionLoadCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.functionLoadMutex.Lock()
	defer fake.functionLoadMutex.Unlock()
	fake.FunctionLoadStub = stub
}

func (fake *FakeCmdable) FunctionLoadArgsForCall(i int) (context.Context, string) {
	fake.functionLoadMutex.RLock()
	defer fake.functionLoadMutex.RUnlock()
	argsForCall := fake.functionLoadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) FunctionLoadReturns(result1 *redisa.StringCmd) {
	fake.functionLoadMutex.Lock()
	defer fake.functionLoadMutex.Unlock()
	fake.FunctionLoadStub = nil
	fake.functionLoadReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionLoadReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.functionLoadMutex.Lock()
	defer fake.functionLoadMutex.Unlock()
	fake.FunctionLoadStub = nil
	if fake.functionLoadReturnsOnCall == nil {
		fake.functionLoadReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.functionLoadReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionLoadReplace(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.functionLoadReplaceMutex.Lock()
	ret, specificReturn := fake.functionLoadReplaceReturnsOnCall[len(fake.functionLoadReplaceArgsForCall)]
	fake.functionLoadReplaceArgsForCall = append(fake.functionLoadReplaceArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FunctionLoadReplaceStub
	fakeReturns := fake.functionLoadReplaceReturns
	fake.recordInvocation("FunctionLoadReplace", []interface{}{arg1, arg2})
	fake.functionLoadReplaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FunctionLoadReplaceCallCount() int {
	fake.functionLoadReplaceMutex.RLock()
	defer fake.functionLoadReplaceMutex.RUnlock()
	return len(fake.functionLoadReplaceArgsForCall)
}

func (fake *FakeCmdable) FunctionLoadReplaceCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.functionLoadReplaceMutex.Lock()
	defer fake.functionLoadReplaceMutex.Unlock()
	fake.FunctionLoadReplaceStub = stub
}

func (fake *FakeCmdable) FunctionLoadReplaceArgsForCall(i int) (context.Context, string) {
	fake.functionLoadReplaceMutex.RLock()
	defer fake.functionLoadReplaceMutex.RUnlock()
	argsForCall := fake.functionLoadReplaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) FunctionLoadReplaceReturns(result1 *redisa.StringCmd) {
	fake.functionLoadReplaceMutex.Lock()
	defer fake.functionLoadReplaceMutex.Unlock()
	fake.FunctionLoadReplaceStub = nil
	fake.functionLoadReplaceReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionLoadReplaceReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.functionLoadReplaceMutex.Lock()
	defer fake.functionLoadReplaceMutex.Unlock()
	fake.FunctionLoadReplaceStub = nil
	if fake.functionLoadReplaceReturnsOnCall == nil {
		fake.functionLoadReplaceReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.functionLoadReplaceReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionRestore(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.functionRestoreMutex.Lock()
	ret, specificReturn := fake.functionRestoreReturnsOnCall[len(fake.functionRestoreArgsForCall)]
	fake.functionRestoreArgsForCall = append(fake.functionRestoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FunctionRestoreStub
	fakeReturns := fake.functionRestoreReturns
	fake.recordInvocation("FunctionRestore", []interface{}{arg1, arg2})
	fake.functionRestoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FunctionRestoreCallCount() int {
	fake.functionRestoreMutex.RLock()
	defer fake.functionRestoreMutex.RUnlock()
	return len(fake.functionRestoreArgsForCall)
}

func (fake *FakeCmdable) FunctionRestoreCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.functionRestoreMutex.Lock()
	defer fake.functionRestoreMutex.Unlock()
	fake.FunctionRestoreStub = stub
}

func (fake *FakeCmdable) FunctionRestoreArgsForCall(i int) (context.Context, string) {
	fake.functionRestoreMutex.RLock()
	defer fake.functionRestoreMutex.RUnlock()
	argsForCall := fake.functionRestoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) FunctionRestoreReturns(result1 *redisa.StringCmd) {
	fake.functionRestoreMutex.Lock()
	defer fake.functionRestoreMutex.Unlock()
	fake.FunctionRestoreStub = nil
	fake.functionRestoreReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionRestoreReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.functionRestoreMutex.Lock()
	defer fake.functionRestoreMutex.Unlock()
	fake.FunctionRestoreStub = nil
	if fake.functionRestoreReturnsOnCall == nil {
		fake.functionRestoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.functionRestoreReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionStats(arg1 context.Context) *redisa.FunctionStatsCmd {
	fake.functionStatsMutex.Lock()
	ret, specificReturn := fake.functionStatsReturnsOnCall[len(fake.functionStatsArgsForCall)]
	fake.functionStatsArgsForCall = append(fake.functionStatsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.FunctionStatsStub
	fakeReturns := fake.functionStatsReturns
	fake.recordInvocation("FunctionStats", []interface{}{arg1})
	fake.functionStatsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) FunctionStatsCallCount() int {
	fake.functionStatsMutex.RLock()
	defer fake.functionStatsMutex.RUnlock()
	return len(fake.functionStatsArgsForCall)
}

func (fake *FakeCmdable) FunctionStatsCalls(stub func(context.Context) *redisa.FunctionStatsCmd) {
	fake.functionStatsMutex.Lock()
	defer fake.functionStatsMutex.Unlock()
	fake.FunctionStatsStub = stub
}

func (fake *FakeCmdable) FunctionStatsArgsForCall(i int) context.Context {
	fake.functionStatsMutex.RLock()
	defer fake.functionStatsMutex.RUnlock()
	argsForCall := fake.functionStatsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) FunctionStatsReturns(result1 *redisa.FunctionStatsCmd) {
	fake.functionStatsMutex.Lock()
	defer fake.functionStatsMutex.Unlock()
	fake.FunctionStatsStub = nil
	fake.functionStatsReturns = struct {
		result1 *redisa.FunctionStatsCmd
	}{result1}
}

func (fake *FakeCmdable) FunctionStatsReturnsOnCall(i int, result1 *redisa.FunctionStatsCmd) {
	fake.functionStatsMutex.Lock()
	defer fake.functionStatsMutex.Unlock()
	fake.FunctionStatsStub = nil
	if fake.functionStatsReturnsOnCall == nil {
		fake.functionStatsReturnsOnCall = make(map[int]struct {
			result1 *redisa.FunctionStatsCmd
		})
	}
	fake.functionStatsReturnsOnCall[i] = struct {
		result1 *redisa.FunctionStatsCmd
	}{result1}
}

func (fake *FakeCmdable) GeoAdd(arg1 context.Context, arg2 string, arg3 ...*redisa.GeoLocation) *redisa.IntCmd {
	fake.geoAddMutex.Lock()
	ret, specificReturn := fake.geoAddReturnsOnCall[len(fake.geoAddArgsForCall)]
	fake.geoAddArgsForCall = append(fake.geoAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []*redisa.GeoLocation
	}{arg1, arg2, arg3})
	stub := fake.GeoAddStub
	fakeReturns := fake.geoAddReturns
	fake.recordInvocation("GeoAdd", []interface{}{arg1, arg2, arg3})
	fake.geoAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GeoAddCallCount() int {
	fake.geoAddMutex.RLock()
	defer fake.geoAddMutex.RUnlock()
	return len(fake.geoAddArgsForCall)
}

func (fake *FakeCmdable) GeoAddCalls(stub func(context.Context, string, ...*redisa.GeoLocation) *redisa.IntCmd) {
	fake.geoAddMutex.Lock()
	defer fake.geoAddMutex.Unlock()
	fake.GeoAddStub = stub
}

func (fake *FakeCmdable) GeoAddArgsForCall(i int) (context.Context, string, []*redisa.GeoLocation) {
	fake.geoAddMutex.RLock()
	defer fake.geoAddMutex.RUnlock()
	argsForCall := fake.geoAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) GeoAddReturns(result1 *redisa.IntCmd) {
	fake.geoAddMutex.Lock()
	defer fake.geoAddMutex.Unlock()
	fake.GeoAddStub = nil
	fake.geoAddReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) GeoAddReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.geoAddMutex.Lock()
	defer fake.geoAddMutex.Unlock()
	fake.GeoAddStub = nil
	if fake.geoAddReturnsOnCall == nil {
		fake.geoAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.geoAddReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) GeoDist(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 string) *redisa.FloatCmd {
	fake.geoDistMutex.Lock()
	ret, specificReturn := fake.geoDistReturnsOnCall[len(fake.geoDistArgsForCall)]
	fake.geoDistArgsForCall = append(fake.geoDistArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.GeoDistStub
	fakeReturns := fake.geoDistReturns
	fake.recordInvocation("GeoDist", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.geoDistMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GeoDistCallCount() int {
	fake.geoDistMutex.RLock()
	defer fake.geoDistMutex.RUnlock()
	return len(fake.geoDistArgsForCall)
}

func (fake *FakeCmdable) GeoDistCalls(stub func(context.Context, string, string, string, string) *redisa.FloatCmd) {
	fake.geoDistMutex.Lock()
	defer fake.geoDistMutex.Unlock()
	fake.GeoDistStub = stub
}

func (fake *FakeCmdable) GeoDistArgsForCall(i int) (context.Context, string, string, string, string) {
	fake.geoDistMutex.RLock()
	defer fake.geoDistMutex.RUnlock()
	argsForCall := fake.geoDistArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) GeoDistReturns(result1 *redisa.FloatCmd) {
	fake.geoDistMutex.Lock()
	defer fake.geoDistMutex.Unlock()
	fake.GeoDistStub = nil
	fake.geoDistReturns = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) GeoDistReturnsOnCall(i int, result1 *redisa.FloatCmd) {
	fake.geoDistMutex.Lock()
	defer fake.geoDistMutex.Unlock()
	fake.GeoDistStub = nil
	if fake.geoDistReturnsOnCall == nil {
		fake.geoDistReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatCmd
		})
	}
	fake.geoDistReturnsOnCall[i] = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) GeoHash(arg1 context.Context, arg2 string, arg3 ...string) *redisa.StringSliceCmd {
	fake.geoHashMutex.Lock()
	ret, specificReturn := fake.geoHashReturnsOnCall[len(fake.geoHashArgsForCall)]
	fake.geoHashArgsForCall = append(fake.geoHashArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.GeoHashStub
	fakeReturns := fake.geoHashReturns
	fake.recordInvocation("GeoHash", []interface{}{arg1, arg2, arg3})
	fake.geoHashMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GeoHashCallCount() int {
	fake.geoHashMutex.RLock()
	defer fake.geoHashMutex.RUnlock()
	return len(fake.geoHashArgsForCall)
}

func (fake *FakeCmdable) GeoHashCalls(stub func(context.Context, string, ...string) *redisa.StringSliceCmd) {
	fake.geoHashMutex.Lock()
	defer fake.geoHashMutex.Unlock()
	fake.GeoHashStub = stub
}

func (fake *FakeCmdable) GeoHashArgsForCall(i int) (context.Context, string, []string) {
	fake.geoHashMutex.RLock()
	defer fake.geoHashMutex.RUnlock()
	argsForCall := fake.geoHashArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) GeoHashReturns(result1 *redisa.StringSliceCmd) {
	fake.geoHashMutex.Lock()
	defer fake.geoHashMutex.Unlock()
	fake.GeoHashStub = nil
	fake.geoHashReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) GeoHashReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.geoHashMutex.Lock()
	defer fake.geoHashMutex.Unlock()
	fake.GeoHashStub = nil
	if fake.geoHashReturnsOnCall == nil {
		fake.geoHashReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.geoHashReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) GeoPos(arg1 context.Context, arg2 string, arg3 ...string) *redisa.GeoPosCmd {
	fake.geoPosMutex.Lock()
	ret, specificReturn := fake.geoPosReturnsOnCall[len(fake.geoPosArgsForCall)]
	fake.geoPosArgsForCall = append(fake.geoPosArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.GeoPosStub
	fakeReturns := fake.geoPosReturns
	fake.recordInvocation("GeoPos", []interface{}{arg1, arg2, arg3})
	fake.geoPosMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GeoPosCallCount() int {
	fake.geoPosMutex.RLock()
	defer fake.geoPosMutex.RUnlock()
	return len(fake.geoPosArgsForCall)
}

func (fake *FakeCmdable) GeoPosCalls(stub func(context.Context, string, ...string) *redisa.GeoPosCmd) {
	fake.geoPosMutex.Lock()
	defer fake.geoPosMutex.Unlock()
	fake.GeoPosStub = stub
}

func (fake *FakeCmdable) GeoPosArgsForCall(i int) (context.Context, string, []string) {
	fake.geoPosMutex.RLock()
	defer fake.geoPosMutex.RUnlock()
	argsForCall := fake.geoPosArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) GeoPosReturns(result1 *redisa.GeoPosCmd) {
	fake.geoPosMutex.Lock()
	defer fake.geoPosMutex.Unlock()
	fake.GeoPosStub = nil
	fake.geoPosReturns = struct {
		result1 *redisa.GeoPosCmd
	}{result1}
}

func (fake *FakeCmdable) GeoPosReturnsOnCall(i int, result1 *redisa.GeoPosCmd) {
	fake.geoPosMutex.Lock()
	defer fake.geoPosMutex.Unlock()
	fake.GeoPosStub = nil
	if fake.geoPosReturnsOnCall == nil {
		fake.geoPosReturnsOnCall = make(map[int]struct {
			result1 *redisa.GeoPosCmd
		})
	}
	fake.geoPosReturnsOnCall[i] = struct {
		result1 *redisa.GeoPosCmd
	}{result1}
}

func (fake *FakeCmdable) GeoRadius(arg1 context.Context, arg2 string, arg3 float64, arg4 float64, arg5 *redisa.GeoRadiusQuery) *redisa.GeoLocationCmd {
	fake.geoRadiusMutex.Lock()
	ret, specificReturn := fake.geoRadiusReturnsOnCall[len(fake.geoRadiusArgsForCall)]
	fake.geoRadiusArgsForCall = append(fake.geoRadiusArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 float64
		arg5 *redisa.GeoRadiusQuery
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.GeoRadiusStub
	fakeReturns := fake.geoRadiusReturns
	fake.recordInvocation("GeoRadius", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.geoRadiusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GeoRadiusCallCount() int {
	fake.geoRadiusMutex.RLock()
	defer fake.geoRadiusMutex.RUnlock()
	return len(fake.geoRadiusArgsForCall)
}

func (fake *FakeCmdable) GeoRadiusCalls(stub func(context.Context, string, float64, float64, *redisa.GeoRadiusQuery) *redisa.GeoLocationCmd) {
	fake.geoRadiusMutex.Lock()
	defer fake.geoRadiusMutex.Unlock()
	fake.GeoRadiusStub = stub
}

func (fake *FakeCmdable) GeoRadiusArgsForCall(i int) (context.Context, string, float64, float64, *redisa.GeoRadiusQuery) {
	fake.geoRadiusMutex.RLock()
	defer fake.geoRadiusMutex.RUnlock()
	argsForCall := fake.geoRadiusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) GeoRadiusReturns(result1 *redisa.GeoLocationCmd) {
	fake.geoRadiusMutex.Lock()
	defer fake.geoRadiusMutex.Unlock()
	fake.GeoRadiusStub = nil
	fake.geoRadiusReturns = struct {
		result1 *redisa.GeoLocationCmd
	}{result1}
}

func (fake *FakeCmdable) GeoRadiusReturnsOnCall(i int, result1 *redisa.GeoLocationCmd) {
	fake.geoRadiusMutex.Lock()
	defer fake.geoRadiusMutex.Unlock()
	fake.GeoRadiusStub = nil
	if fake.geoRadiusReturnsOnCall == nil {
		fake.geoRadiusReturnsOnCall = make(map[int]struct {
			result1 *redisa.GeoLocationCmd
		})
	}
	fake.geoRadiusReturnsOnCall[i] = struct {
		result1 *redisa.GeoLocationCmd
	}{result1}
}

func (fake *FakeCmdable) GeoRadiusByMember(arg1 context.Context, arg2 string, arg3 string, arg4 *redisa.GeoRadiusQuery) *redisa.GeoLocationCmd {
	fake.geoRadiusByMemberMutex.Lock()
	ret, specificReturn := fake.geoRadiusByMemberReturnsOnCall[len(fake.geoRadiusByMemberArgsForCall)]
	fake.geoRadiusByMemberArgsForCall = append(fake.geoRadiusByMemberArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.GeoRadiusQuery
	}{arg1, arg2, arg3, arg4})
	stub := fake.GeoRadiusByMemberStub
	fakeReturns := fake.geoRadiusByMemberReturns
	fake.recordInvocation("GeoRadiusByMember", []interface{}{arg1, arg2, arg3, arg4})
	fake.geoRadiusByMemberMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GeoRadiusByMemberCallCount() int {
	fake.geoRadiusByMemberMutex.RLock()
	defer fake.geoRadiusByMemberMutex.RUnlock()
	return len(fake.geoRadiusByMemberArgsForCall)
}

func (fake *FakeCmdable) GeoRadiusByMemberCalls(stub func(context.Context, string, string, *redisa.GeoRadiusQuery) *redisa.GeoLocationCmd) {
	fake.geoRadiusByMemberMutex.Lock()
	defer fake.geoRadiusByMemberMutex.Unlock()
	fake.GeoRadiusByMemberStub = stub
}

func (fake *FakeCmdable) GeoRadiusByMemberArgsForCall(i int) (context.Context, string, string, *redisa.GeoRadiusQuery) {
	fake.geoRadiusByMemberMutex.RLock()
	defer fake.geoRadiusByMemberMutex.RUnlock()
	argsForCall := fake.geoRadiusByMemberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) GeoRadiusByMemberReturns(result1 *redisa.GeoLocationCmd) {
	fake.geoRadiusByMemberMutex.Lock()
	defer fake.geoRadiusByMemberMutex.Unlock()
	fake.GeoRadiusByMemberStub = nil
	fake.geoRadiusByMemberReturns = struct {
		result1 *redisa.GeoLocationCmd
	}{result1}
}

func (fake *FakeCmdable) GeoRadiusByMemberReturnsOnCall(i int, result1 *redisa.GeoLocationCmd) {
	fake.geoRadiusByMemberMutex.Lock()
	defer fake.geoRadiusByMemberMutex.Unlock()
	fake.GeoRadiusByMemberStub = nil
	if fake.geoRadiusByMemberReturnsOnCall == nil {
		fake.geoRadiusByMemberReturnsOnCall = make(map[int]struct {
			result1 *redisa.GeoLocationCmd
		})
	}
	fake.geoRadiusByMemberReturnsOnCall[i] = struct {
		result1 *redisa.GeoLocationCmd
	}{result1}
}

func (fake *FakeCmdable) GeoRadiusByMemberStore(arg1 context.Context, arg2 string, arg3 string, arg4 *redisa.GeoRadiusQuery) *redisa.IntCmd {
	fake.geoRadiusByMemberStoreMutex.Lock()
	ret, specificReturn := fake.geoRadiusByMemberStoreReturnsOnCall[len(fake.geoRadiusByMemberStoreArgsForCall)]
	fake.geoRadiusByMemberStoreArgsForCall = append(fake.geoRadiusByMemberStoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.GeoRadiusQuery
	}{arg1, arg2, arg3, arg4})
	stub := fake.GeoRadiusByMemberStoreStub
	fakeReturns := fake.geoRadiusByMemberStoreReturns
	fake.recordInvocation("GeoRadiusByMemberStore", []interface{}{arg1, arg2, arg3, arg4})
	fake.geoRadiusByMemberStoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GeoRadiusByMemberStoreCallCount() int {
	fake.geoRadiusByMemberStoreMutex.RLock()
	defer fake.geoRadiusByMemberStoreMutex.RUnlock()
	return len(fake.geoRadiusByMemberStoreArgsForCall)
}

func (fake *FakeCmdable) GeoRadiusByMemberStoreCalls(stub func(context.Context, string, string, *redisa.GeoRadiusQuery) *redisa.IntCmd) {
	fake.geoRadiusByMemberStoreMutex.Lock()
	defer fake.geoRadiusByMemberStoreMutex.Unlock()
	fake.GeoRadiusByMemberStoreStub = stub
}

func (fake *FakeCmdable) GeoRadiusByMemberStoreArgsForCall(i int) (context.Context, string, string, *redisa.GeoRadiusQuery) {
	fake.geoRadiusByMemberStoreMutex.RLock()
	defer fake.geoRadiusByMemberStoreMutex.RUnlock()
	argsForCall := fake.geoRadiusByMemberStoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) GeoRadiusByMemberStoreReturns(result1 *redisa.IntCmd) {
	fake.geoRadiusByMemberStoreMutex.Lock()
	defer fake.geoRadiusByMemberStoreMutex.Unlock()
	fake.GeoRadiusByMemberStoreStub = nil
	fake.geoRadiusByMemberStoreReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) GeoRadiusByMemberStoreReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.geoRadiusByMemberStoreMutex.Lock()
	defer fake.geoRadiusByMemberStoreMutex.Unlock()
	fake.GeoRadiusByMemberStoreStub = nil
	if fake.geoRadiusByMemberStoreReturnsOnCall == nil {
		fake.geoRadiusByMemberStoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.geoRadiusByMemberStoreReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) GeoRadiusStore(arg1 context.Context, arg2 string, arg3 float64, arg4 float64, arg5 *redisa.GeoRadiusQuery) *redisa.IntCmd {
	fake.geoRadiusStoreMutex.Lock()
	ret, specificReturn := fake.geoRadiusStoreReturnsOnCall[len(fake.geoRadiusStoreArgsForCall)]
	fake.geoRadiusStoreArgsForCall = append(fake.geoRadiusStoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 float64
		arg5 *redisa.GeoRadiusQuery
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.GeoRadiusStoreStub
	fakeReturns := fake.geoRadiusStoreReturns
	fake.recordInvocation("GeoRadiusStore", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.geoRadiusStoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GeoRadiusStoreCallCount() int {
	fake.geoRadiusStoreMutex.RLock()
	defer fake.geoRadiusStoreMutex.RUnlock()
	return len(fake.geoRadiusStoreArgsForCall)
}

func (fake *FakeCmdable) GeoRadiusStoreCalls(stub func(context.Context, string, float64, float64, *redisa.GeoRadiusQuery) *redisa.IntCmd) {
	fake.geoRadiusStoreMutex.Lock()
	defer fake.geoRadiusStoreMutex.Unlock()
	fake.GeoRadiusStoreStub = stub
}

func (fake *FakeCmdable) GeoRadiusStoreArgsForCall(i int) (context.Context, string, float64, float64, *redisa.GeoRadiusQuery) {
	fake.geoRadiusStoreMutex.RLock()
	defer fake.geoRadiusStoreMutex.RUnlock()
	argsForCall := fake.geoRadiusStoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) GeoRadiusStoreReturns(result1 *redisa.IntCmd) {
	fake.geoRadiusStoreMutex.Lock()
	defer fake.geoRadiusStoreMutex.Unlock()
	fake.GeoRadiusStoreStub = nil
	fake.geoRadiusStoreReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) GeoRadiusStoreReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.geoRadiusStoreMutex.Lock()
	defer fake.geoRadiusStoreMutex.Unlock()
	fake.GeoRadiusStoreStub = nil
	if fake.geoRadiusStoreReturnsOnCall == nil {
		fake.geoRadiusStoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.geoRadiusStoreReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) GeoSearch(arg1 context.Context, arg2 string, arg3 *redisa.GeoSearchQuery) *redisa.StringSliceCmd {
	fake.geoSearchMutex.Lock()
	ret, specificReturn := fake.geoSearchReturnsOnCall[len(fake.geoSearchArgsForCall)]
	fake.geoSearchArgsForCall = append(fake.geoSearchArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.GeoSearchQuery
	}{arg1, arg2, arg3})
	stub := fake.GeoSearchStub
	fakeReturns := fake.geoSearchReturns
	fake.recordInvocation("GeoSearch", []interface{}{arg1, arg2, arg3})
	fake.geoSearchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GeoSearchCallCount() int {
	fake.geoSearchMutex.RLock()
	defer fake.geoSearchMutex.RUnlock()
	return len(fake.geoSearchArgsForCall)
}

func (fake *FakeCmdable) GeoSearchCalls(stub func(context.Context, string, *redisa.GeoSearchQuery) *redisa.StringSliceCmd) {
	fake.geoSearchMutex.Lock()
	defer fake.geoSearchMutex.Unlock()
	fake.GeoSearchStub = stub
}

func (fake *FakeCmdable) GeoSearchArgsForCall(i int) (context.Context, string, *redisa.GeoSearchQuery) {
	fake.geoSearchMutex.RLock()
	defer fake.geoSearchMutex.RUnlock()
	argsForCall := fake.geoSearchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) GeoSearchReturns(result1 *redisa.StringSliceCmd) {
	fake.geoSearchMutex.Lock()
	defer fake.geoSearchMutex.Unlock()
	fake.GeoSearchStub = nil
	fake.geoSearchReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) GeoSearchReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.geoSearchMutex.Lock()
	defer fake.geoSearchMutex.Unlock()
	fake.GeoSearchStub = nil
	if fake.geoSearchReturnsOnCall == nil {
		fake.geoSearchReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.geoSearchReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) GeoSearchLocation(arg1 context.Context, arg2 string, arg3 *redisa.GeoSearchLocationQuery) *redisa.GeoSearchLocationCmd {
	fake.geoSearchLocationMutex.Lock()
	ret, specificReturn := fake.geoSearchLocationReturnsOnCall[len(fake.geoSearchLocationArgsForCall)]
	fake.geoSearchLocationArgsForCall = append(fake.geoSearchLocationArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.GeoSearchLocationQuery
	}{arg1, arg2, arg3})
	stub := fake.GeoSearchLocationStub
	fakeReturns := fake.geoSearchLocationReturns
	fake.recordInvocation("GeoSearchLocation", []interface{}{arg1, arg2, arg3})
	fake.geoSearchLocationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GeoSearchLocationCallCount() int {
	fake.geoSearchLocationMutex.RLock()
	defer fake.geoSearchLocationMutex.RUnlock()
	return len(fake.geoSearchLocationArgsForCall)
}

func (fake *FakeCmdable) GeoSearchLocationCalls(stub func(context.Context, string, *redisa.GeoSearchLocationQuery) *redisa.GeoSearchLocationCmd) {
	fake.geoSearchLocationMutex.Lock()
	defer fake.geoSearchLocationMutex.Unlock()
	fake.GeoSearchLocationStub = stub
}

func (fake *FakeCmdable) GeoSearchLocationArgsForCall(i int) (context.Context, string, *redisa.GeoSearchLocationQuery) {
	fake.geoSearchLocationMutex.RLock()
	defer fake.geoSearchLocationMutex.RUnlock()
	argsForCall := fake.geoSearchLocationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) GeoSearchLocationReturns(result1 *redisa.GeoSearchLocationCmd) {
	fake.geoSearchLocationMutex.Lock()
	defer fake.geoSearchLocationMutex.Unlock()
	fake.GeoSearchLocationStub = nil
	fake.geoSearchLocationReturns = struct {
		result1 *redisa.GeoSearchLocationCmd
	}{result1}
}

func (fake *FakeCmdable) GeoSearchLocationReturnsOnCall(i int, result1 *redisa.GeoSearchLocationCmd) {
	fake.geoSearchLocationMutex.Lock()
	defer fake.geoSearchLocationMutex.Unlock()
	fake.GeoSearchLocationStub = nil
	if fake.geoSearchLocationReturnsOnCall == nil {
		fake.geoSearchLocationReturnsOnCall = make(map[int]struct {
			result1 *redisa.GeoSearchLocationCmd
		})
	}
	fake.geoSearchLocationReturnsOnCall[i] = struct {
		result1 *redisa.GeoSearchLocationCmd
	}{result1}
}

func (fake *FakeCmdable) GeoSearchStore(arg1 context.Context, arg2 string, arg3 string, arg4 *redisa.GeoSearchStoreQuery) *redisa.IntCmd {
	fake.geoSearchStoreMutex.Lock()
	ret, specificReturn := fake.geoSearchStoreReturnsOnCall[len(fake.geoSearchStoreArgsForCall)]
	fake.geoSearchStoreArgsForCall = append(fake.geoSearchStoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.GeoSearchStoreQuery
	}{arg1, arg2, arg3, arg4})
	stub := fake.GeoSearchStoreStub
	fakeReturns := fake.geoSearchStoreReturns
	fake.recordInvocation("GeoSearchStore", []interface{}{arg1, arg2, arg3, arg4})
	fake.geoSearchStoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GeoSearchStoreCallCount() int {
	fake.geoSearchStoreMutex.RLock()
	defer fake.geoSearchStoreMutex.RUnlock()
	return len(fake.geoSearchStoreArgsForCall)
}

func (fake *FakeCmdable) GeoSearchStoreCalls(stub func(context.Context, string, string, *redisa.GeoSearchStoreQuery) *redisa.IntCmd) {
	fake.geoSearchStoreMutex.Lock()
	defer fake.geoSearchStoreMutex.Unlock()
	fake.GeoSearchStoreStub = stub
}

func (fake *FakeCmdable) GeoSearchStoreArgsForCall(i int) (context.Context, string, string, *redisa.GeoSearchStoreQuery) {
	fake.geoSearchStoreMutex.RLock()
	defer fake.geoSearchStoreMutex.RUnlock()
	argsForCall := fake.geoSearchStoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) GeoSearchStoreReturns(result1 *redisa.IntCmd) {
	fake.geoSearchStoreMutex.Lock()
	defer fake.geoSearchStoreMutex.Unlock()
	fake.GeoSearchStoreStub = nil
	fake.geoSearchStoreReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) GeoSearchStoreReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.geoSearchStoreMutex.Lock()
	defer fake.geoSearchStoreMutex.Unlock()
	fake.GeoSearchStoreStub = nil
	if fake.geoSearchStoreReturnsOnCall == nil {
		fake.geoSearchStoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.geoSearchStoreReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) Get(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeCmdable) GetCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeCmdable) GetArgsForCall(i int) (context.Context, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) GetReturns(result1 *redisa.StringCmd) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) GetReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) GetBit(arg1 context.Context, arg2 string, arg3 int64) *redisa.IntCmd {
	fake.getBitMutex.Lock()
	ret, specificReturn := fake.getBitReturnsOnCall[len(fake.getBitArgsForCall)]
	fake.getBitArgsForCall = append(fake.getBitArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.GetBitStub
	fakeReturns := fake.getBitReturns
	fake.recordInvocation("GetBit", []interface{}{arg1, arg2, arg3})
	fake.getBitMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GetBitCallCount() int {
	fake.getBitMutex.RLock()
	defer fake.getBitMutex.RUnlock()
	return len(fake.getBitArgsForCall)
}

func (fake *FakeCmdable) GetBitCalls(stub func(context.Context, string, int64) *redisa.IntCmd) {
	fake.getBitMutex.Lock()
	defer fake.getBitMutex.Unlock()
	fake.GetBitStub = stub
}

func (fake *FakeCmdable) GetBitArgsForCall(i int) (context.Context, string, int64) {
	fake.getBitMutex.RLock()
	defer fake.getBitMutex.RUnlock()
	argsForCall := fake.getBitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) GetBitReturns(result1 *redisa.IntCmd) {
	fake.getBitMutex.Lock()
	defer fake.getBitMutex.Unlock()
	fake.GetBitStub = nil
	fake.getBitReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) GetBitReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.getBitMutex.Lock()
	defer fake.getBitMutex.Unlock()
	fake.GetBitStub = nil
	if fake.getBitReturnsOnCall == nil {
		fake.getBitReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.getBitReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) GetDel(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.getDelMutex.Lock()
	ret, specificReturn := fake.getDelReturnsOnCall[len(fake.getDelArgsForCall)]
	fake.getDelArgsForCall = append(fake.getDelArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetDelStub
	fakeReturns := fake.getDelReturns
	fake.recordInvocation("GetDel", []interface{}{arg1, arg2})
	fake.getDelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GetDelCallCount() int {
	fake.getDelMutex.RLock()
	defer fake.getDelMutex.RUnlock()
	return len(fake.getDelArgsForCall)
}

func (fake *FakeCmdable) GetDelCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.getDelMutex.Lock()
	defer fake.getDelMutex.Unlock()
	fake.GetDelStub = stub
}

func (fake *FakeCmdable) GetDelArgsForCall(i int) (context.Context, string) {
	fake.getDelMutex.RLock()
	defer fake.getDelMutex.RUnlock()
	argsForCall := fake.getDelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) GetDelReturns(result1 *redisa.StringCmd) {
	fake.getDelMutex.Lock()
	defer fake.getDelMutex.Unlock()
	fake.GetDelStub = nil
	fake.getDelReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) GetDelReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.getDelMutex.Lock()
	defer fake.getDelMutex.Unlock()
	fake.GetDelStub = nil
	if fake.getDelReturnsOnCall == nil {
		fake.getDelReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.getDelReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) GetEx(arg1 context.Context, arg2 string, arg3 time.Duration) *redisa.StringCmd {
	fake.getExMutex.Lock()
	ret, specificReturn := fake.getExReturnsOnCall[len(fake.getExArgsForCall)]
	fake.getExArgsForCall = append(fake.getExArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}{arg1, arg2, arg3})
	stub := fake.GetExStub
	fakeReturns := fake.getExReturns
	fake.recordInvocation("GetEx", []interface{}{arg1, arg2, arg3})
	fake.getExMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GetExCallCount() int {
	fake.getExMutex.RLock()
	defer fake.getExMutex.RUnlock()
	return len(fake.getExArgsForCall)
}

func (fake *FakeCmdable) GetExCalls(stub func(context.Context, string, time.Duration) *redisa.StringCmd) {
	fake.getExMutex.Lock()
	defer fake.getExMutex.Unlock()
	fake.GetExStub = stub
}

func (fake *FakeCmdable) GetExArgsForCall(i int) (context.Context, string, time.Duration) {
	fake.getExMutex.RLock()
	defer fake.getExMutex.RUnlock()
	argsForCall := fake.getExArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) GetExReturns(result1 *redisa.StringCmd) {
	fake.getExMutex.Lock()
	defer fake.getExMutex.Unlock()
	fake.GetExStub = nil
	fake.getExReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) GetExReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.getExMutex.Lock()
	defer fake.getExMutex.Unlock()
	fake.GetExStub = nil
	if fake.getExReturnsOnCall == nil {
		fake.getExReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.getExReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) GetRange(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.StringCmd {
	fake.getRangeMutex.Lock()
	ret, specificReturn := fake.getRangeReturnsOnCall[len(fake.getRangeArgsForCall)]
	fake.getRangeArgsForCall = append(fake.getRangeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetRangeStub
	fakeReturns := fake.getRangeReturns
	fake.recordInvocation("GetRange", []interface{}{arg1, arg2, arg3, arg4})
	fake.getRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GetRangeCallCount() int {
	fake.getRangeMutex.RLock()
	defer fake.getRangeMutex.RUnlock()
	return len(fake.getRangeArgsForCall)
}

func (fake *FakeCmdable) GetRangeCalls(stub func(context.Context, string, int64, int64) *redisa.StringCmd) {
	fake.getRangeMutex.Lock()
	defer fake.getRangeMutex.Unlock()
	fake.GetRangeStub = stub
}

func (fake *FakeCmdable) GetRangeArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.getRangeMutex.RLock()
	defer fake.getRangeMutex.RUnlock()
	argsForCall := fake.getRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) GetRangeReturns(result1 *redisa.StringCmd) {
	fake.getRangeMutex.Lock()
	defer fake.getRangeMutex.Unlock()
	fake.GetRangeStub = nil
	fake.getRangeReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) GetRangeReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.getRangeMutex.Lock()
	defer fake.getRangeMutex.Unlock()
	fake.GetRangeStub = nil
	if fake.getRangeReturnsOnCall == nil {
		fake.getRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.getRangeReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) GetSet(arg1 context.Context, arg2 string, arg3 interface{}) *redisa.StringCmd {
	fake.getSetMutex.Lock()
	ret, specificReturn := fake.getSetReturnsOnCall[len(fake.getSetArgsForCall)]
	fake.getSetArgsForCall = append(fake.getSetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.GetSetStub
	fakeReturns := fake.getSetReturns
	fake.recordInvocation("GetSet", []interface{}{arg1, arg2, arg3})
	fake.getSetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) GetSetCallCount() int {
	fake.getSetMutex.RLock()
	defer fake.getSetMutex.RUnlock()
	return len(fake.getSetArgsForCall)
}

func (fake *FakeCmdable) GetSetCalls(stub func(context.Context, string, interface{}) *redisa.StringCmd) {
	fake.getSetMutex.Lock()
	defer fake.getSetMutex.Unlock()
	fake.GetSetStub = stub
}

func (fake *FakeCmdable) GetSetArgsForCall(i int) (context.Context, string, interface{}) {
	fake.getSetMutex.RLock()
	defer fake.getSetMutex.RUnlock()
	argsForCall := fake.getSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) GetSetReturns(result1 *redisa.StringCmd) {
	fake.getSetMutex.Lock()
	defer fake.getSetMutex.Unlock()
	fake.GetSetStub = nil
	fake.getSetReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) GetSetReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.getSetMutex.Lock()
	defer fake.getSetMutex.Unlock()
	fake.GetSetStub = nil
	if fake.getSetReturnsOnCall == nil {
		fake.getSetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.getSetReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) HDel(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntCmd {
	fake.hDelMutex.Lock()
	ret, specificReturn := fake.hDelReturnsOnCall[len(fake.hDelArgsForCall)]
	fake.hDelArgsForCall = append(fake.hDelArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.HDelStub
	fakeReturns := fake.hDelReturns
	fake.recordInvocation("HDel", []interface{}{arg1, arg2, arg3})
	fake.hDelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HDelCallCount() int {
	fake.hDelMutex.RLock()
	defer fake.hDelMutex.RUnlock()
	return len(fake.hDelArgsForCall)
}

func (fake *FakeCmdable) HDelCalls(stub func(context.Context, string, ...string) *redisa.IntCmd) {
	fake.hDelMutex.Lock()
	defer fake.hDelMutex.Unlock()
	fake.HDelStub = stub
}

func (fake *FakeCmdable) HDelArgsForCall(i int) (context.Context, string, []string) {
	fake.hDelMutex.RLock()
	defer fake.hDelMutex.RUnlock()
	argsForCall := fake.hDelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HDelReturns(result1 *redisa.IntCmd) {
	fake.hDelMutex.Lock()
	defer fake.hDelMutex.Unlock()
	fake.HDelStub = nil
	fake.hDelReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) HDelReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.hDelMutex.Lock()
	defer fake.hDelMutex.Unlock()
	fake.HDelStub = nil
	if fake.hDelReturnsOnCall == nil {
		fake.hDelReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.hDelReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) HExists(arg1 context.Context, arg2 string, arg3 string) *redisa.BoolCmd {
	fake.hExistsMutex.Lock()
	ret, specificReturn := fake.hExistsReturnsOnCall[len(fake.hExistsArgsForCall)]
	fake.hExistsArgsForCall = append(fake.hExistsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.HExistsStub
	fakeReturns := fake.hExistsReturns
	fake.recordInvocation("HExists", []interface{}{arg1, arg2, arg3})
	fake.hExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HExistsCallCount() int {
	fake.hExistsMutex.RLock()
	defer fake.hExistsMutex.RUnlock()
	return len(fake.hExistsArgsForCall)
}

func (fake *FakeCmdable) HExistsCalls(stub func(context.Context, string, string) *redisa.BoolCmd) {
	fake.hExistsMutex.Lock()
	defer fake.hExistsMutex.Unlock()
	fake.HExistsStub = stub
}

func (fake *FakeCmdable) HExistsArgsForCall(i int) (context.Context, string, string) {
	fake.hExistsMutex.RLock()
	defer fake.hExistsMutex.RUnlock()
	argsForCall := fake.hExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HExistsReturns(result1 *redisa.BoolCmd) {
	fake.hExistsMutex.Lock()
	defer fake.hExistsMutex.Unlock()
	fake.HExistsStub = nil
	fake.hExistsReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) HExistsReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.hExistsMutex.Lock()
	defer fake.hExistsMutex.Unlock()
	fake.HExistsStub = nil
	if fake.hExistsReturnsOnCall == nil {
		fake.hExistsReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.hExistsReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) HExpire(arg1 context.Context, arg2 string, arg3 time.Duration, arg4 ...string) *redisa.IntSliceCmd {
	fake.hExpireMutex.Lock()
	ret, specificReturn := fake.hExpireReturnsOnCall[len(fake.hExpireArgsForCall)]
	fake.hExpireArgsForCall = append(fake.hExpireArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	stub := fake.HExpireStub
	fakeReturns := fake.hExpireReturns
	fake.recordInvocation("HExpire", []interface{}{arg1, arg2, arg3, arg4})
	fake.hExpireMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HExpireCallCount() int {
	fake.hExpireMutex.RLock()
	defer fake.hExpireMutex.RUnlock()
	return len(fake.hExpireArgsForCall)
}

func (fake *FakeCmdable) HExpireCalls(stub func(context.Context, string, time.Duration, ...string) *redisa.IntSliceCmd) {
	fake.hExpireMutex.Lock()
	defer fake.hExpireMutex.Unlock()
	fake.HExpireStub = stub
}

func (fake *FakeCmdable) HExpireArgsForCall(i int) (context.Context, string, time.Duration, []string) {
	fake.hExpireMutex.RLock()
	defer fake.hExpireMutex.RUnlock()
	argsForCall := fake.hExpireArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) HExpireReturns(result1 *redisa.IntSliceCmd) {
	fake.hExpireMutex.Lock()
	defer fake.hExpireMutex.Unlock()
	fake.HExpireStub = nil
	fake.hExpireReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HExpireReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hExpireMutex.Lock()
	defer fake.hExpireMutex.Unlock()
	fake.HExpireStub = nil
	if fake.hExpireReturnsOnCall == nil {
		fake.hExpireReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hExpireReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HExpireAt(arg1 context.Context, arg2 string, arg3 time.Time, arg4 ...string) *redisa.IntSliceCmd {
	fake.hExpireAtMutex.Lock()
	ret, specificReturn := fake.hExpireAtReturnsOnCall[len(fake.hExpireAtArgsForCall)]
	fake.hExpireAtArgsForCall = append(fake.hExpireAtArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	stub := fake.HExpireAtStub
	fakeReturns := fake.hExpireAtReturns
	fake.recordInvocation("HExpireAt", []interface{}{arg1, arg2, arg3, arg4})
	fake.hExpireAtMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HExpireAtCallCount() int {
	fake.hExpireAtMutex.RLock()
	defer fake.hExpireAtMutex.RUnlock()
	return len(fake.hExpireAtArgsForCall)
}

func (fake *FakeCmdable) HExpireAtCalls(stub func(context.Context, string, time.Time, ...string) *redisa.IntSliceCmd) {
	fake.hExpireAtMutex.Lock()
	defer fake.hExpireAtMutex.Unlock()
	fake.HExpireAtStub = stub
}

func (fake *FakeCmdable) HExpireAtArgsForCall(i int) (context.Context, string, time.Time, []string) {
	fake.hExpireAtMutex.RLock()
	defer fake.hExpireAtMutex.RUnlock()
	argsForCall := fake.hExpireAtArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) HExpireAtReturns(result1 *redisa.IntSliceCmd) {
	fake.hExpireAtMutex.Lock()
	defer fake.hExpireAtMutex.Unlock()
	fake.HExpireAtStub = nil
	fake.hExpireAtReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HExpireAtReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hExpireAtMutex.Lock()
	defer fake.hExpireAtMutex.Unlock()
	fake.HExpireAtStub = nil
	if fake.hExpireAtReturnsOnCall == nil {
		fake.hExpireAtReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hExpireAtReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HExpireAtWithArgs(arg1 context.Context, arg2 string, arg3 time.Time, arg4 redisa.HExpireArgs, arg5 ...string) *redisa.IntSliceCmd {
	fake.hExpireAtWithArgsMutex.Lock()
	ret, specificReturn := fake.hExpireAtWithArgsReturnsOnCall[len(fake.hExpireAtWithArgsArgsForCall)]
	fake.hExpireAtWithArgsArgsForCall = append(fake.hExpireAtWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
		arg4 redisa.HExpireArgs
		arg5 []string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.HExpireAtWithArgsStub
	fakeReturns := fake.hExpireAtWithArgsReturns
	fake.recordInvocation("HExpireAtWithArgs", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.hExpireAtWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HExpireAtWithArgsCallCount() int {
	fake.hExpireAtWithArgsMutex.RLock()
	defer fake.hExpireAtWithArgsMutex.RUnlock()
	return len(fake.hExpireAtWithArgsArgsForCall)
}

func (fake *FakeCmdable) HExpireAtWithArgsCalls(stub func(context.Context, string, time.Time, redisa.HExpireArgs, ...string) *redisa.IntSliceCmd) {
	fake.hExpireAtWithArgsMutex.Lock()
	defer fake.hExpireAtWithArgsMutex.Unlock()
	fake.HExpireAtWithArgsStub = stub
}

func (fake *FakeCmdable) HExpireAtWithArgsArgsForCall(i int) (context.Context, string, time.Time, redisa.HExpireArgs, []string) {
	fake.hExpireAtWithArgsMutex.RLock()
	defer fake.hExpireAtWithArgsMutex.RUnlock()
	argsForCall := fake.hExpireAtWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) HExpireAtWithArgsReturns(result1 *redisa.IntSliceCmd) {
	fake.hExpireAtWithArgsMutex.Lock()
	defer fake.hExpireAtWithArgsMutex.Unlock()
	fake.HExpireAtWithArgsStub = nil
	fake.hExpireAtWithArgsReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HExpireAtWithArgsReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hExpireAtWithArgsMutex.Lock()
	defer fake.hExpireAtWithArgsMutex.Unlock()
	fake.HExpireAtWithArgsStub = nil
	if fake.hExpireAtWithArgsReturnsOnCall == nil {
		fake.hExpireAtWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hExpireAtWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HExpireTime(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntSliceCmd {
	fake.hExpireTimeMutex.Lock()
	ret, specificReturn := fake.hExpireTimeReturnsOnCall[len(fake.hExpireTimeArgsForCall)]
	fake.hExpireTimeArgsForCall = append(fake.hExpireTimeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.HExpireTimeStub
	fakeReturns := fake.hExpireTimeReturns
	fake.recordInvocation("HExpireTime", []interface{}{arg1, arg2, arg3})
	fake.hExpireTimeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HExpireTimeCallCount() int {
	fake.hExpireTimeMutex.RLock()
	defer fake.hExpireTimeMutex.RUnlock()
	return len(fake.hExpireTimeArgsForCall)
}

func (fake *FakeCmdable) HExpireTimeCalls(stub func(context.Context, string, ...string) *redisa.IntSliceCmd) {
	fake.hExpireTimeMutex.Lock()
	defer fake.hExpireTimeMutex.Unlock()
	fake.HExpireTimeStub = stub
}

func (fake *FakeCmdable) HExpireTimeArgsForCall(i int) (context.Context, string, []string) {
	fake.hExpireTimeMutex.RLock()
	defer fake.hExpireTimeMutex.RUnlock()
	argsForCall := fake.hExpireTimeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HExpireTimeReturns(result1 *redisa.IntSliceCmd) {
	fake.hExpireTimeMutex.Lock()
	defer fake.hExpireTimeMutex.Unlock()
	fake.HExpireTimeStub = nil
	fake.hExpireTimeReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HExpireTimeReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hExpireTimeMutex.Lock()
	defer fake.hExpireTimeMutex.Unlock()
	fake.HExpireTimeStub = nil
	if fake.hExpireTimeReturnsOnCall == nil {
		fake.hExpireTimeReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hExpireTimeReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HExpireWithArgs(arg1 context.Context, arg2 string, arg3 time.Duration, arg4 redisa.HExpireArgs, arg5 ...string) *redisa.IntSliceCmd {
	fake.hExpireWithArgsMutex.Lock()
	ret, specificReturn := fake.hExpireWithArgsReturnsOnCall[len(fake.hExpireWithArgsArgsForCall)]
	fake.hExpireWithArgsArgsForCall = append(fake.hExpireWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
		arg4 redisa.HExpireArgs
		arg5 []string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.HExpireWithArgsStub
	fakeReturns := fake.hExpireWithArgsReturns
	fake.recordInvocation("HExpireWithArgs", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.hExpireWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HExpireWithArgsCallCount() int {
	fake.hExpireWithArgsMutex.RLock()
	defer fake.hExpireWithArgsMutex.RUnlock()
	return len(fake.hExpireWithArgsArgsForCall)
}

func (fake *FakeCmdable) HExpireWithArgsCalls(stub func(context.Context, string, time.Duration, redisa.HExpireArgs, ...string) *redisa.IntSliceCmd) {
	fake.hExpireWithArgsMutex.Lock()
	defer fake.hExpireWithArgsMutex.Unlock()
	fake.HExpireWithArgsStub = stub
}

func (fake *FakeCmdable) HExpireWithArgsArgsForCall(i int) (context.Context, string, time.Duration, redisa.HExpireArgs, []string) {
	fake.hExpireWithArgsMutex.RLock()
	defer fake.hExpireWithArgsMutex.RUnlock()
	argsForCall := fake.hExpireWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) HExpireWithArgsReturns(result1 *redisa.IntSliceCmd) {
	fake.hExpireWithArgsMutex.Lock()
	defer fake.hExpireWithArgsMutex.Unlock()
	fake.HExpireWithArgsStub = nil
	fake.hExpireWithArgsReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HExpireWithArgsReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hExpireWithArgsMutex.Lock()
	defer fake.hExpireWithArgsMutex.Unlock()
	fake.HExpireWithArgsStub = nil
	if fake.hExpireWithArgsReturnsOnCall == nil {
		fake.hExpireWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hExpireWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HGet(arg1 context.Context, arg2 string, arg3 string) *redisa.StringCmd {
	fake.hGetMutex.Lock()
	ret, specificReturn := fake.hGetReturnsOnCall[len(fake.hGetArgsForCall)]
	fake.hGetArgsForCall = append(fake.hGetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.HGetStub
	fakeReturns := fake.hGetReturns
	fake.recordInvocation("HGet", []interface{}{arg1, arg2, arg3})
	fake.hGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HGetCallCount() int {
	fake.hGetMutex.RLock()
	defer fake.hGetMutex.RUnlock()
	return len(fake.hGetArgsForCall)
}

func (fake *FakeCmdable) HGetCalls(stub func(context.Context, string, string) *redisa.StringCmd) {
	fake.hGetMutex.Lock()
	defer fake.hGetMutex.Unlock()
	fake.HGetStub = stub
}

func (fake *FakeCmdable) HGetArgsForCall(i int) (context.Context, string, string) {
	fake.hGetMutex.RLock()
	defer fake.hGetMutex.RUnlock()
	argsForCall := fake.hGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HGetReturns(result1 *redisa.StringCmd) {
	fake.hGetMutex.Lock()
	defer fake.hGetMutex.Unlock()
	fake.HGetStub = nil
	fake.hGetReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) HGetReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.hGetMutex.Lock()
	defer fake.hGetMutex.Unlock()
	fake.HGetStub = nil
	if fake.hGetReturnsOnCall == nil {
		fake.hGetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.hGetReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) HGetAll(arg1 context.Context, arg2 string) *redisa.MapStringStringCmd {
	fake.hGetAllMutex.Lock()
	ret, specificReturn := fake.hGetAllReturnsOnCall[len(fake.hGetAllArgsForCall)]
	fake.hGetAllArgsForCall = append(fake.hGetAllArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.HGetAllStub
	fakeReturns := fake.hGetAllReturns
	fake.recordInvocation("HGetAll", []interface{}{arg1, arg2})
	fake.hGetAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HGetAllCallCount() int {
	fake.hGetAllMutex.RLock()
	defer fake.hGetAllMutex.RUnlock()
	return len(fake.hGetAllArgsForCall)
}

func (fake *FakeCmdable) HGetAllCalls(stub func(context.Context, string) *redisa.MapStringStringCmd) {
	fake.hGetAllMutex.Lock()
	defer fake.hGetAllMutex.Unlock()
	fake.HGetAllStub = stub
}

func (fake *FakeCmdable) HGetAllArgsForCall(i int) (context.Context, string) {
	fake.hGetAllMutex.RLock()
	defer fake.hGetAllMutex.RUnlock()
	argsForCall := fake.hGetAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) HGetAllReturns(result1 *redisa.MapStringStringCmd) {
	fake.hGetAllMutex.Lock()
	defer fake.hGetAllMutex.Unlock()
	fake.HGetAllStub = nil
	fake.hGetAllReturns = struct {
		result1 *redisa.MapStringStringCmd
	}{result1}
}

func (fake *FakeCmdable) HGetAllReturnsOnCall(i int, result1 *redisa.MapStringStringCmd) {
	fake.hGetAllMutex.Lock()
	defer fake.hGetAllMutex.Unlock()
	fake.HGetAllStub = nil
	if fake.hGetAllReturnsOnCall == nil {
		fake.hGetAllReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringStringCmd
		})
	}
	fake.hGetAllReturnsOnCall[i] = struct {
		result1 *redisa.MapStringStringCmd
	}{result1}
}

func (fake *FakeCmdable) HIncrBy(arg1 context.Context, arg2 string, arg3 string, arg4 int64) *redisa.IntCmd {
	fake.hIncrByMutex.Lock()
	ret, specificReturn := fake.hIncrByReturnsOnCall[len(fake.hIncrByArgsForCall)]
	fake.hIncrByArgsForCall = append(fake.hIncrByArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.HIncrByStub
	fakeReturns := fake.hIncrByReturns
	fake.recordInvocation("HIncrBy", []interface{}{arg1, arg2, arg3, arg4})
	fake.hIncrByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HIncrByCallCount() int {
	fake.hIncrByMutex.RLock()
	defer fake.hIncrByMutex.RUnlock()
	return len(fake.hIncrByArgsForCall)
}

func (fake *FakeCmdable) HIncrByCalls(stub func(context.Context, string, string, int64) *redisa.IntCmd) {
	fake.hIncrByMutex.Lock()
	defer fake.hIncrByMutex.Unlock()
	fake.HIncrByStub = stub
}

func (fake *FakeCmdable) HIncrByArgsForCall(i int) (context.Context, string, string, int64) {
	fake.hIncrByMutex.RLock()
	defer fake.hIncrByMutex.RUnlock()
	argsForCall := fake.hIncrByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) HIncrByReturns(result1 *redisa.IntCmd) {
	fake.hIncrByMutex.Lock()
	defer fake.hIncrByMutex.Unlock()
	fake.HIncrByStub = nil
	fake.hIncrByReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) HIncrByReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.hIncrByMutex.Lock()
	defer fake.hIncrByMutex.Unlock()
	fake.HIncrByStub = nil
	if fake.hIncrByReturnsOnCall == nil {
		fake.hIncrByReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.hIncrByReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) HIncrByFloat(arg1 context.Context, arg2 string, arg3 string, arg4 float64) *redisa.FloatCmd {
	fake.hIncrByFloatMutex.Lock()
	ret, specificReturn := fake.hIncrByFloatReturnsOnCall[len(fake.hIncrByFloatArgsForCall)]
	fake.hIncrByFloatArgsForCall = append(fake.hIncrByFloatArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 float64
	}{arg1, arg2, arg3, arg4})
	stub := fake.HIncrByFloatStub
	fakeReturns := fake.hIncrByFloatReturns
	fake.recordInvocation("HIncrByFloat", []interface{}{arg1, arg2, arg3, arg4})
	fake.hIncrByFloatMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HIncrByFloatCallCount() int {
	fake.hIncrByFloatMutex.RLock()
	defer fake.hIncrByFloatMutex.RUnlock()
	return len(fake.hIncrByFloatArgsForCall)
}

func (fake *FakeCmdable) HIncrByFloatCalls(stub func(context.Context, string, string, float64) *redisa.FloatCmd) {
	fake.hIncrByFloatMutex.Lock()
	defer fake.hIncrByFloatMutex.Unlock()
	fake.HIncrByFloatStub = stub
}

func (fake *FakeCmdable) HIncrByFloatArgsForCall(i int) (context.Context, string, string, float64) {
	fake.hIncrByFloatMutex.RLock()
	defer fake.hIncrByFloatMutex.RUnlock()
	argsForCall := fake.hIncrByFloatArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) HIncrByFloatReturns(result1 *redisa.FloatCmd) {
	fake.hIncrByFloatMutex.Lock()
	defer fake.hIncrByFloatMutex.Unlock()
	fake.HIncrByFloatStub = nil
	fake.hIncrByFloatReturns = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) HIncrByFloatReturnsOnCall(i int, result1 *redisa.FloatCmd) {
	fake.hIncrByFloatMutex.Lock()
	defer fake.hIncrByFloatMutex.Unlock()
	fake.HIncrByFloatStub = nil
	if fake.hIncrByFloatReturnsOnCall == nil {
		fake.hIncrByFloatReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatCmd
		})
	}
	fake.hIncrByFloatReturnsOnCall[i] = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) HKeys(arg1 context.Context, arg2 string) *redisa.StringSliceCmd {
	fake.hKeysMutex.Lock()
	ret, specificReturn := fake.hKeysReturnsOnCall[len(fake.hKeysArgsForCall)]
	fake.hKeysArgsForCall = append(fake.hKeysArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.HKeysStub
	fakeReturns := fake.hKeysReturns
	fake.recordInvocation("HKeys", []interface{}{arg1, arg2})
	fake.hKeysMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HKeysCallCount() int {
	fake.hKeysMutex.RLock()
	defer fake.hKeysMutex.RUnlock()
	return len(fake.hKeysArgsForCall)
}

func (fake *FakeCmdable) HKeysCalls(stub func(context.Context, string) *redisa.StringSliceCmd) {
	fake.hKeysMutex.Lock()
	defer fake.hKeysMutex.Unlock()
	fake.HKeysStub = stub
}

func (fake *FakeCmdable) HKeysArgsForCall(i int) (context.Context, string) {
	fake.hKeysMutex.RLock()
	defer fake.hKeysMutex.RUnlock()
	argsForCall := fake.hKeysArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) HKeysReturns(result1 *redisa.StringSliceCmd) {
	fake.hKeysMutex.Lock()
	defer fake.hKeysMutex.Unlock()
	fake.HKeysStub = nil
	fake.hKeysReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HKeysReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.hKeysMutex.Lock()
	defer fake.hKeysMutex.Unlock()
	fake.HKeysStub = nil
	if fake.hKeysReturnsOnCall == nil {
		fake.hKeysReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.hKeysReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HLen(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.hLenMutex.Lock()
	ret, specificReturn := fake.hLenReturnsOnCall[len(fake.hLenArgsForCall)]
	fake.hLenArgsForCall = append(fake.hLenArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.HLenStub
	fakeReturns := fake.hLenReturns
	fake.recordInvocation("HLen", []interface{}{arg1, arg2})
	fake.hLenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HLenCallCount() int {
	fake.hLenMutex.RLock()
	defer fake.hLenMutex.RUnlock()
	return len(fake.hLenArgsForCall)
}

func (fake *FakeCmdable) HLenCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.hLenMutex.Lock()
	defer fake.hLenMutex.Unlock()
	fake.HLenStub = stub
}

func (fake *FakeCmdable) HLenArgsForCall(i int) (context.Context, string) {
	fake.hLenMutex.RLock()
	defer fake.hLenMutex.RUnlock()
	argsForCall := fake.hLenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) HLenReturns(result1 *redisa.IntCmd) {
	fake.hLenMutex.Lock()
	defer fake.hLenMutex.Unlock()
	fake.HLenStub = nil
	fake.hLenReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) HLenReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.hLenMutex.Lock()
	defer fake.hLenMutex.Unlock()
	fake.HLenStub = nil
	if fake.hLenReturnsOnCall == nil {
		fake.hLenReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.hLenReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) HMGet(arg1 context.Context, arg2 string, arg3 ...string) *redisa.SliceCmd {
	fake.hMGetMutex.Lock()
	ret, specificReturn := fake.hMGetReturnsOnCall[len(fake.hMGetArgsForCall)]
	fake.hMGetArgsForCall = append(fake.hMGetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.HMGetStub
	fakeReturns := fake.hMGetReturns
	fake.recordInvocation("HMGet", []interface{}{arg1, arg2, arg3})
	fake.hMGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HMGetCallCount() int {
	fake.hMGetMutex.RLock()
	defer fake.hMGetMutex.RUnlock()
	return len(fake.hMGetArgsForCall)
}

func (fake *FakeCmdable) HMGetCalls(stub func(context.Context, string, ...string) *redisa.SliceCmd) {
	fake.hMGetMutex.Lock()
	defer fake.hMGetMutex.Unlock()
	fake.HMGetStub = stub
}

func (fake *FakeCmdable) HMGetArgsForCall(i int) (context.Context, string, []string) {
	fake.hMGetMutex.RLock()
	defer fake.hMGetMutex.RUnlock()
	argsForCall := fake.hMGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HMGetReturns(result1 *redisa.SliceCmd) {
	fake.hMGetMutex.Lock()
	defer fake.hMGetMutex.Unlock()
	fake.HMGetStub = nil
	fake.hMGetReturns = struct {
		result1 *redisa.SliceCmd
	}{result1}
}

func (fake *FakeCmdable) HMGetReturnsOnCall(i int, result1 *redisa.SliceCmd) {
	fake.hMGetMutex.Lock()
	defer fake.hMGetMutex.Unlock()
	fake.HMGetStub = nil
	if fake.hMGetReturnsOnCall == nil {
		fake.hMGetReturnsOnCall = make(map[int]struct {
			result1 *redisa.SliceCmd
		})
	}
	fake.hMGetReturnsOnCall[i] = struct {
		result1 *redisa.SliceCmd
	}{result1}
}

func (fake *FakeCmdable) HMSet(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.BoolCmd {
	fake.hMSetMutex.Lock()
	ret, specificReturn := fake.hMSetReturnsOnCall[len(fake.hMSetArgsForCall)]
	fake.hMSetArgsForCall = append(fake.hMSetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.HMSetStub
	fakeReturns := fake.hMSetReturns
	fake.recordInvocation("HMSet", []interface{}{arg1, arg2, arg3})
	fake.hMSetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HMSetCallCount() int {
	fake.hMSetMutex.RLock()
	defer fake.hMSetMutex.RUnlock()
	return len(fake.hMSetArgsForCall)
}

func (fake *FakeCmdable) HMSetCalls(stub func(context.Context, string, ...interface{}) *redisa.BoolCmd) {
	fake.hMSetMutex.Lock()
	defer fake.hMSetMutex.Unlock()
	fake.HMSetStub = stub
}

func (fake *FakeCmdable) HMSetArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.hMSetMutex.RLock()
	defer fake.hMSetMutex.RUnlock()
	argsForCall := fake.hMSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HMSetReturns(result1 *redisa.BoolCmd) {
	fake.hMSetMutex.Lock()
	defer fake.hMSetMutex.Unlock()
	fake.HMSetStub = nil
	fake.hMSetReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) HMSetReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.hMSetMutex.Lock()
	defer fake.hMSetMutex.Unlock()
	fake.HMSetStub = nil
	if fake.hMSetReturnsOnCall == nil {
		fake.hMSetReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.hMSetReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) HPExpire(arg1 context.Context, arg2 string, arg3 time.Duration, arg4 ...string) *redisa.IntSliceCmd {
	fake.hPExpireMutex.Lock()
	ret, specificReturn := fake.hPExpireReturnsOnCall[len(fake.hPExpireArgsForCall)]
	fake.hPExpireArgsForCall = append(fake.hPExpireArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	stub := fake.HPExpireStub
	fakeReturns := fake.hPExpireReturns
	fake.recordInvocation("HPExpire", []interface{}{arg1, arg2, arg3, arg4})
	fake.hPExpireMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HPExpireCallCount() int {
	fake.hPExpireMutex.RLock()
	defer fake.hPExpireMutex.RUnlock()
	return len(fake.hPExpireArgsForCall)
}

func (fake *FakeCmdable) HPExpireCalls(stub func(context.Context, string, time.Duration, ...string) *redisa.IntSliceCmd) {
	fake.hPExpireMutex.Lock()
	defer fake.hPExpireMutex.Unlock()
	fake.HPExpireStub = stub
}

func (fake *FakeCmdable) HPExpireArgsForCall(i int) (context.Context, string, time.Duration, []string) {
	fake.hPExpireMutex.RLock()
	defer fake.hPExpireMutex.RUnlock()
	argsForCall := fake.hPExpireArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) HPExpireReturns(result1 *redisa.IntSliceCmd) {
	fake.hPExpireMutex.Lock()
	defer fake.hPExpireMutex.Unlock()
	fake.HPExpireStub = nil
	fake.hPExpireReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPExpireReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hPExpireMutex.Lock()
	defer fake.hPExpireMutex.Unlock()
	fake.HPExpireStub = nil
	if fake.hPExpireReturnsOnCall == nil {
		fake.hPExpireReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hPExpireReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPExpireAt(arg1 context.Context, arg2 string, arg3 time.Time, arg4 ...string) *redisa.IntSliceCmd {
	fake.hPExpireAtMutex.Lock()
	ret, specificReturn := fake.hPExpireAtReturnsOnCall[len(fake.hPExpireAtArgsForCall)]
	fake.hPExpireAtArgsForCall = append(fake.hPExpireAtArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	stub := fake.HPExpireAtStub
	fakeReturns := fake.hPExpireAtReturns
	fake.recordInvocation("HPExpireAt", []interface{}{arg1, arg2, arg3, arg4})
	fake.hPExpireAtMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HPExpireAtCallCount() int {
	fake.hPExpireAtMutex.RLock()
	defer fake.hPExpireAtMutex.RUnlock()
	return len(fake.hPExpireAtArgsForCall)
}

func (fake *FakeCmdable) HPExpireAtCalls(stub func(context.Context, string, time.Time, ...string) *redisa.IntSliceCmd) {
	fake.hPExpireAtMutex.Lock()
	defer fake.hPExpireAtMutex.Unlock()
	fake.HPExpireAtStub = stub
}

func (fake *FakeCmdable) HPExpireAtArgsForCall(i int) (context.Context, string, time.Time, []string) {
	fake.hPExpireAtMutex.RLock()
	defer fake.hPExpireAtMutex.RUnlock()
	argsForCall := fake.hPExpireAtArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) HPExpireAtReturns(result1 *redisa.IntSliceCmd) {
	fake.hPExpireAtMutex.Lock()
	defer fake.hPExpireAtMutex.Unlock()
	fake.HPExpireAtStub = nil
	fake.hPExpireAtReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPExpireAtReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hPExpireAtMutex.Lock()
	defer fake.hPExpireAtMutex.Unlock()
	fake.HPExpireAtStub = nil
	if fake.hPExpireAtReturnsOnCall == nil {
		fake.hPExpireAtReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hPExpireAtReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPExpireAtWithArgs(arg1 context.Context, arg2 string, arg3 time.Time, arg4 redisa.HExpireArgs, arg5 ...string) *redisa.IntSliceCmd {
	fake.hPExpireAtWithArgsMutex.Lock()
	ret, specificReturn := fake.hPExpireAtWithArgsReturnsOnCall[len(fake.hPExpireAtWithArgsArgsForCall)]
	fake.hPExpireAtWithArgsArgsForCall = append(fake.hPExpireAtWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
		arg4 redisa.HExpireArgs
		arg5 []string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.HPExpireAtWithArgsStub
	fakeReturns := fake.hPExpireAtWithArgsReturns
	fake.recordInvocation("HPExpireAtWithArgs", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.hPExpireAtWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HPExpireAtWithArgsCallCount() int {
	fake.hPExpireAtWithArgsMutex.RLock()
	defer fake.hPExpireAtWithArgsMutex.RUnlock()
	return len(fake.hPExpireAtWithArgsArgsForCall)
}

func (fake *FakeCmdable) HPExpireAtWithArgsCalls(stub func(context.Context, string, time.Time, redisa.HExpireArgs, ...string) *redisa.IntSliceCmd) {
	fake.hPExpireAtWithArgsMutex.Lock()
	defer fake.hPExpireAtWithArgsMutex.Unlock()
	fake.HPExpireAtWithArgsStub = stub
}

func (fake *FakeCmdable) HPExpireAtWithArgsArgsForCall(i int) (context.Context, string, time.Time, redisa.HExpireArgs, []string) {
	fake.hPExpireAtWithArgsMutex.RLock()
	defer fake.hPExpireAtWithArgsMutex.RUnlock()
	argsForCall := fake.hPExpireAtWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) HPExpireAtWithArgsReturns(result1 *redisa.IntSliceCmd) {
	fake.hPExpireAtWithArgsMutex.Lock()
	defer fake.hPExpireAtWithArgsMutex.Unlock()
	fake.HPExpireAtWithArgsStub = nil
	fake.hPExpireAtWithArgsReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPExpireAtWithArgsReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hPExpireAtWithArgsMutex.Lock()
	defer fake.hPExpireAtWithArgsMutex.Unlock()
	fake.HPExpireAtWithArgsStub = nil
	if fake.hPExpireAtWithArgsReturnsOnCall == nil {
		fake.hPExpireAtWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hPExpireAtWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPExpireTime(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntSliceCmd {
	fake.hPExpireTimeMutex.Lock()
	ret, specificReturn := fake.hPExpireTimeReturnsOnCall[len(fake.hPExpireTimeArgsForCall)]
	fake.hPExpireTimeArgsForCall = append(fake.hPExpireTimeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.HPExpireTimeStub
	fakeReturns := fake.hPExpireTimeReturns
	fake.recordInvocation("HPExpireTime", []interface{}{arg1, arg2, arg3})
	fake.hPExpireTimeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HPExpireTimeCallCount() int {
	fake.hPExpireTimeMutex.RLock()
	defer fake.hPExpireTimeMutex.RUnlock()
	return len(fake.hPExpireTimeArgsForCall)
}

func (fake *FakeCmdable) HPExpireTimeCalls(stub func(context.Context, string, ...string) *redisa.IntSliceCmd) {
	fake.hPExpireTimeMutex.Lock()
	defer fake.hPExpireTimeMutex.Unlock()
	fake.HPExpireTimeStub = stub
}

func (fake *FakeCmdable) HPExpireTimeArgsForCall(i int) (context.Context, string, []string) {
	fake.hPExpireTimeMutex.RLock()
	defer fake.hPExpireTimeMutex.RUnlock()
	argsForCall := fake.hPExpireTimeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HPExpireTimeReturns(result1 *redisa.IntSliceCmd) {
	fake.hPExpireTimeMutex.Lock()
	defer fake.hPExpireTimeMutex.Unlock()
	fake.HPExpireTimeStub = nil
	fake.hPExpireTimeReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPExpireTimeReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hPExpireTimeMutex.Lock()
	defer fake.hPExpireTimeMutex.Unlock()
	fake.HPExpireTimeStub = nil
	if fake.hPExpireTimeReturnsOnCall == nil {
		fake.hPExpireTimeReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hPExpireTimeReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPExpireWithArgs(arg1 context.Context, arg2 string, arg3 time.Duration, arg4 redisa.HExpireArgs, arg5 ...string) *redisa.IntSliceCmd {
	fake.hPExpireWithArgsMutex.Lock()
	ret, specificReturn := fake.hPExpireWithArgsReturnsOnCall[len(fake.hPExpireWithArgsArgsForCall)]
	fake.hPExpireWithArgsArgsForCall = append(fake.hPExpireWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
		arg4 redisa.HExpireArgs
		arg5 []string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.HPExpireWithArgsStub
	fakeReturns := fake.hPExpireWithArgsReturns
	fake.recordInvocation("HPExpireWithArgs", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.hPExpireWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HPExpireWithArgsCallCount() int {
	fake.hPExpireWithArgsMutex.RLock()
	defer fake.hPExpireWithArgsMutex.RUnlock()
	return len(fake.hPExpireWithArgsArgsForCall)
}

func (fake *FakeCmdable) HPExpireWithArgsCalls(stub func(context.Context, string, time.Duration, redisa.HExpireArgs, ...string) *redisa.IntSliceCmd) {
	fake.hPExpireWithArgsMutex.Lock()
	defer fake.hPExpireWithArgsMutex.Unlock()
	fake.HPExpireWithArgsStub = stub
}

func (fake *FakeCmdable) HPExpireWithArgsArgsForCall(i int) (context.Context, string, time.Duration, redisa.HExpireArgs, []string) {
	fake.hPExpireWithArgsMutex.RLock()
	defer fake.hPExpireWithArgsMutex.RUnlock()
	argsForCall := fake.hPExpireWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) HPExpireWithArgsReturns(result1 *redisa.IntSliceCmd) {
	fake.hPExpireWithArgsMutex.Lock()
	defer fake.hPExpireWithArgsMutex.Unlock()
	fake.HPExpireWithArgsStub = nil
	fake.hPExpireWithArgsReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPExpireWithArgsReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hPExpireWithArgsMutex.Lock()
	defer fake.hPExpireWithArgsMutex.Unlock()
	fake.HPExpireWithArgsStub = nil
	if fake.hPExpireWithArgsReturnsOnCall == nil {
		fake.hPExpireWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hPExpireWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPTTL(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntSliceCmd {
	fake.hPTTLMutex.Lock()
	ret, specificReturn := fake.hPTTLReturnsOnCall[len(fake.hPTTLArgsForCall)]
	fake.hPTTLArgsForCall = append(fake.hPTTLArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.HPTTLStub
	fakeReturns := fake.hPTTLReturns
	fake.recordInvocation("HPTTL", []interface{}{arg1, arg2, arg3})
	fake.hPTTLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HPTTLCallCount() int {
	fake.hPTTLMutex.RLock()
	defer fake.hPTTLMutex.RUnlock()
	return len(fake.hPTTLArgsForCall)
}

func (fake *FakeCmdable) HPTTLCalls(stub func(context.Context, string, ...string) *redisa.IntSliceCmd) {
	fake.hPTTLMutex.Lock()
	defer fake.hPTTLMutex.Unlock()
	fake.HPTTLStub = stub
}

func (fake *FakeCmdable) HPTTLArgsForCall(i int) (context.Context, string, []string) {
	fake.hPTTLMutex.RLock()
	defer fake.hPTTLMutex.RUnlock()
	argsForCall := fake.hPTTLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HPTTLReturns(result1 *redisa.IntSliceCmd) {
	fake.hPTTLMutex.Lock()
	defer fake.hPTTLMutex.Unlock()
	fake.HPTTLStub = nil
	fake.hPTTLReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPTTLReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hPTTLMutex.Lock()
	defer fake.hPTTLMutex.Unlock()
	fake.HPTTLStub = nil
	if fake.hPTTLReturnsOnCall == nil {
		fake.hPTTLReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hPTTLReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPersist(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntSliceCmd {
	fake.hPersistMutex.Lock()
	ret, specificReturn := fake.hPersistReturnsOnCall[len(fake.hPersistArgsForCall)]
	fake.hPersistArgsForCall = append(fake.hPersistArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.HPersistStub
	fakeReturns := fake.hPersistReturns
	fake.recordInvocation("HPersist", []interface{}{arg1, arg2, arg3})
	fake.hPersistMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HPersistCallCount() int {
	fake.hPersistMutex.RLock()
	defer fake.hPersistMutex.RUnlock()
	return len(fake.hPersistArgsForCall)
}

func (fake *FakeCmdable) HPersistCalls(stub func(context.Context, string, ...string) *redisa.IntSliceCmd) {
	fake.hPersistMutex.Lock()
	defer fake.hPersistMutex.Unlock()
	fake.HPersistStub = stub
}

func (fake *FakeCmdable) HPersistArgsForCall(i int) (context.Context, string, []string) {
	fake.hPersistMutex.RLock()
	defer fake.hPersistMutex.RUnlock()
	argsForCall := fake.hPersistArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HPersistReturns(result1 *redisa.IntSliceCmd) {
	fake.hPersistMutex.Lock()
	defer fake.hPersistMutex.Unlock()
	fake.HPersistStub = nil
	fake.hPersistReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HPersistReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hPersistMutex.Lock()
	defer fake.hPersistMutex.Unlock()
	fake.HPersistStub = nil
	if fake.hPersistReturnsOnCall == nil {
		fake.hPersistReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hPersistReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HRandField(arg1 context.Context, arg2 string, arg3 int) *redisa.StringSliceCmd {
	fake.hRandFieldMutex.Lock()
	ret, specificReturn := fake.hRandFieldReturnsOnCall[len(fake.hRandFieldArgsForCall)]
	fake.hRandFieldArgsForCall = append(fake.hRandFieldArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.HRandFieldStub
	fakeReturns := fake.hRandFieldReturns
	fake.recordInvocation("HRandField", []interface{}{arg1, arg2, arg3})
	fake.hRandFieldMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HRandFieldCallCount() int {
	fake.hRandFieldMutex.RLock()
	defer fake.hRandFieldMutex.RUnlock()
	return len(fake.hRandFieldArgsForCall)
}

func (fake *FakeCmdable) HRandFieldCalls(stub func(context.Context, string, int) *redisa.StringSliceCmd) {
	fake.hRandFieldMutex.Lock()
	defer fake.hRandFieldMutex.Unlock()
	fake.HRandFieldStub = stub
}

func (fake *FakeCmdable) HRandFieldArgsForCall(i int) (context.Context, string, int) {
	fake.hRandFieldMutex.RLock()
	defer fake.hRandFieldMutex.RUnlock()
	argsForCall := fake.hRandFieldArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HRandFieldReturns(result1 *redisa.StringSliceCmd) {
	fake.hRandFieldMutex.Lock()
	defer fake.hRandFieldMutex.Unlock()
	fake.HRandFieldStub = nil
	fake.hRandFieldReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HRandFieldReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.hRandFieldMutex.Lock()
	defer fake.hRandFieldMutex.Unlock()
	fake.HRandFieldStub = nil
	if fake.hRandFieldReturnsOnCall == nil {
		fake.hRandFieldReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.hRandFieldReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HRandFieldWithValues(arg1 context.Context, arg2 string, arg3 int) *redisa.KeyValueSliceCmd {
	fake.hRandFieldWithValuesMutex.Lock()
	ret, specificReturn := fake.hRandFieldWithValuesReturnsOnCall[len(fake.hRandFieldWithValuesArgsForCall)]
	fake.hRandFieldWithValuesArgsForCall = append(fake.hRandFieldWithValuesArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.HRandFieldWithValuesStub
	fakeReturns := fake.hRandFieldWithValuesReturns
	fake.recordInvocation("HRandFieldWithValues", []interface{}{arg1, arg2, arg3})
	fake.hRandFieldWithValuesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HRandFieldWithValuesCallCount() int {
	fake.hRandFieldWithValuesMutex.RLock()
	defer fake.hRandFieldWithValuesMutex.RUnlock()
	return len(fake.hRandFieldWithValuesArgsForCall)
}

func (fake *FakeCmdable) HRandFieldWithValuesCalls(stub func(context.Context, string, int) *redisa.KeyValueSliceCmd) {
	fake.hRandFieldWithValuesMutex.Lock()
	defer fake.hRandFieldWithValuesMutex.Unlock()
	fake.HRandFieldWithValuesStub = stub
}

func (fake *FakeCmdable) HRandFieldWithValuesArgsForCall(i int) (context.Context, string, int) {
	fake.hRandFieldWithValuesMutex.RLock()
	defer fake.hRandFieldWithValuesMutex.RUnlock()
	argsForCall := fake.hRandFieldWithValuesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HRandFieldWithValuesReturns(result1 *redisa.KeyValueSliceCmd) {
	fake.hRandFieldWithValuesMutex.Lock()
	defer fake.hRandFieldWithValuesMutex.Unlock()
	fake.HRandFieldWithValuesStub = nil
	fake.hRandFieldWithValuesReturns = struct {
		result1 *redisa.KeyValueSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HRandFieldWithValuesReturnsOnCall(i int, result1 *redisa.KeyValueSliceCmd) {
	fake.hRandFieldWithValuesMutex.Lock()
	defer fake.hRandFieldWithValuesMutex.Unlock()
	fake.HRandFieldWithValuesStub = nil
	if fake.hRandFieldWithValuesReturnsOnCall == nil {
		fake.hRandFieldWithValuesReturnsOnCall = make(map[int]struct {
			result1 *redisa.KeyValueSliceCmd
		})
	}
	fake.hRandFieldWithValuesReturnsOnCall[i] = struct {
		result1 *redisa.KeyValueSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HScan(arg1 context.Context, arg2 string, arg3 uint64, arg4 string, arg5 int64) *redisa.ScanCmd {
	fake.hScanMutex.Lock()
	ret, specificReturn := fake.hScanReturnsOnCall[len(fake.hScanArgsForCall)]
	fake.hScanArgsForCall = append(fake.hScanArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 uint64
		arg4 string
		arg5 int64
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.HScanStub
	fakeReturns := fake.hScanReturns
	fake.recordInvocation("HScan", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.hScanMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HScanCallCount() int {
	fake.hScanMutex.RLock()
	defer fake.hScanMutex.RUnlock()
	return len(fake.hScanArgsForCall)
}

func (fake *FakeCmdable) HScanCalls(stub func(context.Context, string, uint64, string, int64) *redisa.ScanCmd) {
	fake.hScanMutex.Lock()
	defer fake.hScanMutex.Unlock()
	fake.HScanStub = stub
}

func (fake *FakeCmdable) HScanArgsForCall(i int) (context.Context, string, uint64, string, int64) {
	fake.hScanMutex.RLock()
	defer fake.hScanMutex.RUnlock()
	argsForCall := fake.hScanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) HScanReturns(result1 *redisa.ScanCmd) {
	fake.hScanMutex.Lock()
	defer fake.hScanMutex.Unlock()
	fake.HScanStub = nil
	fake.hScanReturns = struct {
		result1 *redisa.ScanCmd
	}{result1}
}

func (fake *FakeCmdable) HScanReturnsOnCall(i int, result1 *redisa.ScanCmd) {
	fake.hScanMutex.Lock()
	defer fake.hScanMutex.Unlock()
	fake.HScanStub = nil
	if fake.hScanReturnsOnCall == nil {
		fake.hScanReturnsOnCall = make(map[int]struct {
			result1 *redisa.ScanCmd
		})
	}
	fake.hScanReturnsOnCall[i] = struct {
		result1 *redisa.ScanCmd
	}{result1}
}

func (fake *FakeCmdable) HScanNoValues(arg1 context.Context, arg2 string, arg3 uint64, arg4 string, arg5 int64) *redisa.ScanCmd {
	fake.hScanNoValuesMutex.Lock()
	ret, specificReturn := fake.hScanNoValuesReturnsOnCall[len(fake.hScanNoValuesArgsForCall)]
	fake.hScanNoValuesArgsForCall = append(fake.hScanNoValuesArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 uint64
		arg4 string
		arg5 int64
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.HScanNoValuesStub
	fakeReturns := fake.hScanNoValuesReturns
	fake.recordInvocation("HScanNoValues", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.hScanNoValuesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HScanNoValuesCallCount() int {
	fake.hScanNoValuesMutex.RLock()
	defer fake.hScanNoValuesMutex.RUnlock()
	return len(fake.hScanNoValuesArgsForCall)
}

func (fake *FakeCmdable) HScanNoValuesCalls(stub func(context.Context, string, uint64, string, int64) *redisa.ScanCmd) {
	fake.hScanNoValuesMutex.Lock()
	defer fake.hScanNoValuesMutex.Unlock()
	fake.HScanNoValuesStub = stub
}

func (fake *FakeCmdable) HScanNoValuesArgsForCall(i int) (context.Context, string, uint64, string, int64) {
	fake.hScanNoValuesMutex.RLock()
	defer fake.hScanNoValuesMutex.RUnlock()
	argsForCall := fake.hScanNoValuesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) HScanNoValuesReturns(result1 *redisa.ScanCmd) {
	fake.hScanNoValuesMutex.Lock()
	defer fake.hScanNoValuesMutex.Unlock()
	fake.HScanNoValuesStub = nil
	fake.hScanNoValuesReturns = struct {
		result1 *redisa.ScanCmd
	}{result1}
}

func (fake *FakeCmdable) HScanNoValuesReturnsOnCall(i int, result1 *redisa.ScanCmd) {
	fake.hScanNoValuesMutex.Lock()
	defer fake.hScanNoValuesMutex.Unlock()
	fake.HScanNoValuesStub = nil
	if fake.hScanNoValuesReturnsOnCall == nil {
		fake.hScanNoValuesReturnsOnCall = make(map[int]struct {
			result1 *redisa.ScanCmd
		})
	}
	fake.hScanNoValuesReturnsOnCall[i] = struct {
		result1 *redisa.ScanCmd
	}{result1}
}

func (fake *FakeCmdable) HSet(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntCmd {
	fake.hSetMutex.Lock()
	ret, specificReturn := fake.hSetReturnsOnCall[len(fake.hSetArgsForCall)]
	fake.hSetArgsForCall = append(fake.hSetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.HSetStub
	fakeReturns := fake.hSetReturns
	fake.recordInvocation("HSet", []interface{}{arg1, arg2, arg3})
	fake.hSetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HSetCallCount() int {
	fake.hSetMutex.RLock()
	defer fake.hSetMutex.RUnlock()
	return len(fake.hSetArgsForCall)
}

func (fake *FakeCmdable) HSetCalls(stub func(context.Context, string, ...interface{}) *redisa.IntCmd) {
	fake.hSetMutex.Lock()
	defer fake.hSetMutex.Unlock()
	fake.HSetStub = stub
}

func (fake *FakeCmdable) HSetArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.hSetMutex.RLock()
	defer fake.hSetMutex.RUnlock()
	argsForCall := fake.hSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HSetReturns(result1 *redisa.IntCmd) {
	fake.hSetMutex.Lock()
	defer fake.hSetMutex.Unlock()
	fake.HSetStub = nil
	fake.hSetReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) HSetReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.hSetMutex.Lock()
	defer fake.hSetMutex.Unlock()
	fake.HSetStub = nil
	if fake.hSetReturnsOnCall == nil {
		fake.hSetReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.hSetReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) HSetNX(arg1 context.Context, arg2 string, arg3 string, arg4 interface{}) *redisa.BoolCmd {
	fake.hSetNXMutex.Lock()
	ret, specificReturn := fake.hSetNXReturnsOnCall[len(fake.hSetNXArgsForCall)]
	fake.hSetNXArgsForCall = append(fake.hSetNXArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.HSetNXStub
	fakeReturns := fake.hSetNXReturns
	fake.recordInvocation("HSetNX", []interface{}{arg1, arg2, arg3, arg4})
	fake.hSetNXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HSetNXCallCount() int {
	fake.hSetNXMutex.RLock()
	defer fake.hSetNXMutex.RUnlock()
	return len(fake.hSetNXArgsForCall)
}

func (fake *FakeCmdable) HSetNXCalls(stub func(context.Context, string, string, interface{}) *redisa.BoolCmd) {
	fake.hSetNXMutex.Lock()
	defer fake.hSetNXMutex.Unlock()
	fake.HSetNXStub = stub
}

func (fake *FakeCmdable) HSetNXArgsForCall(i int) (context.Context, string, string, interface{}) {
	fake.hSetNXMutex.RLock()
	defer fake.hSetNXMutex.RUnlock()
	argsForCall := fake.hSetNXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) HSetNXReturns(result1 *redisa.BoolCmd) {
	fake.hSetNXMutex.Lock()
	defer fake.hSetNXMutex.Unlock()
	fake.HSetNXStub = nil
	fake.hSetNXReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) HSetNXReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.hSetNXMutex.Lock()
	defer fake.hSetNXMutex.Unlock()
	fake.HSetNXStub = nil
	if fake.hSetNXReturnsOnCall == nil {
		fake.hSetNXReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.hSetNXReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) HTTL(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntSliceCmd {
	fake.hTTLMutex.Lock()
	ret, specificReturn := fake.hTTLReturnsOnCall[len(fake.hTTLArgsForCall)]
	fake.hTTLArgsForCall = append(fake.hTTLArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.HTTLStub
	fakeReturns := fake.hTTLReturns
	fake.recordInvocation("HTTL", []interface{}{arg1, arg2, arg3})
	fake.hTTLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HTTLCallCount() int {
	fake.hTTLMutex.RLock()
	defer fake.hTTLMutex.RUnlock()
	return len(fake.hTTLArgsForCall)
}

func (fake *FakeCmdable) HTTLCalls(stub func(context.Context, string, ...string) *redisa.IntSliceCmd) {
	fake.hTTLMutex.Lock()
	defer fake.hTTLMutex.Unlock()
	fake.HTTLStub = stub
}

func (fake *FakeCmdable) HTTLArgsForCall(i int) (context.Context, string, []string) {
	fake.hTTLMutex.RLock()
	defer fake.hTTLMutex.RUnlock()
	argsForCall := fake.hTTLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) HTTLReturns(result1 *redisa.IntSliceCmd) {
	fake.hTTLMutex.Lock()
	defer fake.hTTLMutex.Unlock()
	fake.HTTLStub = nil
	fake.hTTLReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HTTLReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.hTTLMutex.Lock()
	defer fake.hTTLMutex.Unlock()
	fake.HTTLStub = nil
	if fake.hTTLReturnsOnCall == nil {
		fake.hTTLReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.hTTLReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HVals(arg1 context.Context, arg2 string) *redisa.StringSliceCmd {
	fake.hValsMutex.Lock()
	ret, specificReturn := fake.hValsReturnsOnCall[len(fake.hValsArgsForCall)]
	fake.hValsArgsForCall = append(fake.hValsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.HValsStub
	fakeReturns := fake.hValsReturns
	fake.recordInvocation("HVals", []interface{}{arg1, arg2})
	fake.hValsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) HValsCallCount() int {
	fake.hValsMutex.RLock()
	defer fake.hValsMutex.RUnlock()
	return len(fake.hValsArgsForCall)
}

func (fake *FakeCmdable) HValsCalls(stub func(context.Context, string) *redisa.StringSliceCmd) {
	fake.hValsMutex.Lock()
	defer fake.hValsMutex.Unlock()
	fake.HValsStub = stub
}

func (fake *FakeCmdable) HValsArgsForCall(i int) (context.Context, string) {
	fake.hValsMutex.RLock()
	defer fake.hValsMutex.RUnlock()
	argsForCall := fake.hValsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) HValsReturns(result1 *redisa.StringSliceCmd) {
	fake.hValsMutex.Lock()
	defer fake.hValsMutex.Unlock()
	fake.HValsStub = nil
	fake.hValsReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) HValsReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.hValsMutex.Lock()
	defer fake.hValsMutex.Unlock()
	fake.HValsStub = nil
	if fake.hValsReturnsOnCall == nil {
		fake.hValsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.hValsReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) Incr(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.incrMutex.Lock()
	ret, specificReturn := fake.incrReturnsOnCall[len(fake.incrArgsForCall)]
	fake.incrArgsForCall = append(fake.incrArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.IncrStub
	fakeReturns := fake.incrReturns
	fake.recordInvocation("Incr", []interface{}{arg1, arg2})
	fake.incrMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) IncrCallCount() int {
	fake.incrMutex.RLock()
	defer fake.incrMutex.RUnlock()
	return len(fake.incrArgsForCall)
}

func (fake *FakeCmdable) IncrCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.incrMutex.Lock()
	defer fake.incrMutex.Unlock()
	fake.IncrStub = stub
}

func (fake *FakeCmdable) IncrArgsForCall(i int) (context.Context, string) {
	fake.incrMutex.RLock()
	defer fake.incrMutex.RUnlock()
	argsForCall := fake.incrArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) IncrReturns(result1 *redisa.IntCmd) {
	fake.incrMutex.Lock()
	defer fake.incrMutex.Unlock()
	fake.IncrStub = nil
	fake.incrReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) IncrReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.incrMutex.Lock()
	defer fake.incrMutex.Unlock()
	fake.IncrStub = nil
	if fake.incrReturnsOnCall == nil {
		fake.incrReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.incrReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) IncrBy(arg1 context.Context, arg2 string, arg3 int64) *redisa.IntCmd {
	fake.incrByMutex.Lock()
	ret, specificReturn := fake.incrByReturnsOnCall[len(fake.incrByArgsForCall)]
	fake.incrByArgsForCall = append(fake.incrByArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.IncrByStub
	fakeReturns := fake.incrByReturns
	fake.recordInvocation("IncrBy", []interface{}{arg1, arg2, arg3})
	fake.incrByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) IncrByCallCount() int {
	fake.incrByMutex.RLock()
	defer fake.incrByMutex.RUnlock()
	return len(fake.incrByArgsForCall)
}

func (fake *FakeCmdable) IncrByCalls(stub func(context.Context, string, int64) *redisa.IntCmd) {
	fake.incrByMutex.Lock()
	defer fake.incrByMutex.Unlock()
	fake.IncrByStub = stub
}

func (fake *FakeCmdable) IncrByArgsForCall(i int) (context.Context, string, int64) {
	fake.incrByMutex.RLock()
	defer fake.incrByMutex.RUnlock()
	argsForCall := fake.incrByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) IncrByReturns(result1 *redisa.IntCmd) {
	fake.incrByMutex.Lock()
	defer fake.incrByMutex.Unlock()
	fake.IncrByStub = nil
	fake.incrByReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) IncrByReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.incrByMutex.Lock()
	defer fake.incrByMutex.Unlock()
	fake.IncrByStub = nil
	if fake.incrByReturnsOnCall == nil {
		fake.incrByReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.incrByReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) IncrByFloat(arg1 context.Context, arg2 string, arg3 float64) *redisa.FloatCmd {
	fake.incrByFloatMutex.Lock()
	ret, specificReturn := fake.incrByFloatReturnsOnCall[len(fake.incrByFloatArgsForCall)]
	fake.incrByFloatArgsForCall = append(fake.incrByFloatArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
	}{arg1, arg2, arg3})
	stub := fake.IncrByFloatStub
	fakeReturns := fake.incrByFloatReturns
	fake.recordInvocation("IncrByFloat", []interface{}{arg1, arg2, arg3})
	fake.incrByFloatMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) IncrByFloatCallCount() int {
	fake.incrByFloatMutex.RLock()
	defer fake.incrByFloatMutex.RUnlock()
	return len(fake.incrByFloatArgsForCall)
}

func (fake *FakeCmdable) IncrByFloatCalls(stub func(context.Context, string, float64) *redisa.FloatCmd) {
	fake.incrByFloatMutex.Lock()
	defer fake.incrByFloatMutex.Unlock()
	fake.IncrByFloatStub = stub
}

func (fake *FakeCmdable) IncrByFloatArgsForCall(i int) (context.Context, string, float64) {
	fake.incrByFloatMutex.RLock()
	defer fake.incrByFloatMutex.RUnlock()
	argsForCall := fake.incrByFloatArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) IncrByFloatReturns(result1 *redisa.FloatCmd) {
	fake.incrByFloatMutex.Lock()
	defer fake.incrByFloatMutex.Unlock()
	fake.IncrByFloatStub = nil
	fake.incrByFloatReturns = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) IncrByFloatReturnsOnCall(i int, result1 *redisa.FloatCmd) {
	fake.incrByFloatMutex.Lock()
	defer fake.incrByFloatMutex.Unlock()
	fake.IncrByFloatStub = nil
	if fake.incrByFloatReturnsOnCall == nil {
		fake.incrByFloatReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatCmd
		})
	}
	fake.incrByFloatReturnsOnCall[i] = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) Info(arg1 context.Context, arg2 ...string) *redisa.StringCmd {
	fake.infoMutex.Lock()
	ret, specificReturn := fake.infoReturnsOnCall[len(fake.infoArgsForCall)]
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.InfoStub
	fakeReturns := fake.infoReturns
	fake.recordInvocation("Info", []interface{}{arg1, arg2})
	fake.infoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *FakeCmdable) InfoCalls(stub func(context.Context, ...string) *redisa.StringCmd) {
	fake.infoMutex.Lock()
	defer fake.infoMutex.Unlock()
	fake.InfoStub = stub
}

func (fake *FakeCmdable) InfoArgsForCall(i int) (context.Context, []string) {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	argsForCall := fake.infoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) InfoReturns(result1 *redisa.StringCmd) {
	fake.infoMutex.Lock()
	defer fake.infoMutex.Unlock()
	fake.InfoStub = nil
	fake.infoReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) InfoReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.infoMutex.Lock()
	defer fake.infoMutex.Unlock()
	fake.InfoStub = nil
	if fake.infoReturnsOnCall == nil {
		fake.infoReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.infoReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrAppend(arg1 context.Context, arg2 string, arg3 string, arg4 ...interface{}) *redisa.IntSliceCmd {
	fake.jSONArrAppendMutex.Lock()
	ret, specificReturn := fake.jSONArrAppendReturnsOnCall[len(fake.jSONArrAppendArgsForCall)]
	fake.jSONArrAppendArgsForCall = append(fake.jSONArrAppendArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 []interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.JSONArrAppendStub
	fakeReturns := fake.jSONArrAppendReturns
	fake.recordInvocation("JSONArrAppend", []interface{}{arg1, arg2, arg3, arg4})
	fake.jSONArrAppendMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONArrAppendCallCount() int {
	fake.jSONArrAppendMutex.RLock()
	defer fake.jSONArrAppendMutex.RUnlock()
	return len(fake.jSONArrAppendArgsForCall)
}

func (fake *FakeCmdable) JSONArrAppendCalls(stub func(context.Context, string, string, ...interface{}) *redisa.IntSliceCmd) {
	fake.jSONArrAppendMutex.Lock()
	defer fake.jSONArrAppendMutex.Unlock()
	fake.JSONArrAppendStub = stub
}

func (fake *FakeCmdable) JSONArrAppendArgsForCall(i int) (context.Context, string, string, []interface{}) {
	fake.jSONArrAppendMutex.RLock()
	defer fake.jSONArrAppendMutex.RUnlock()
	argsForCall := fake.jSONArrAppendArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) JSONArrAppendReturns(result1 *redisa.IntSliceCmd) {
	fake.jSONArrAppendMutex.Lock()
	defer fake.jSONArrAppendMutex.Unlock()
	fake.JSONArrAppendStub = nil
	fake.jSONArrAppendReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrAppendReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.jSONArrAppendMutex.Lock()
	defer fake.jSONArrAppendMutex.Unlock()
	fake.JSONArrAppendStub = nil
	if fake.jSONArrAppendReturnsOnCall == nil {
		fake.jSONArrAppendReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.jSONArrAppendReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrIndex(arg1 context.Context, arg2 string, arg3 string, arg4 ...interface{}) *redisa.IntSliceCmd {
	fake.jSONArrIndexMutex.Lock()
	ret, specificReturn := fake.jSONArrIndexReturnsOnCall[len(fake.jSONArrIndexArgsForCall)]
	fake.jSONArrIndexArgsForCall = append(fake.jSONArrIndexArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 []interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.JSONArrIndexStub
	fakeReturns := fake.jSONArrIndexReturns
	fake.recordInvocation("JSONArrIndex", []interface{}{arg1, arg2, arg3, arg4})
	fake.jSONArrIndexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONArrIndexCallCount() int {
	fake.jSONArrIndexMutex.RLock()
	defer fake.jSONArrIndexMutex.RUnlock()
	return len(fake.jSONArrIndexArgsForCall)
}

func (fake *FakeCmdable) JSONArrIndexCalls(stub func(context.Context, string, string, ...interface{}) *redisa.IntSliceCmd) {
	fake.jSONArrIndexMutex.Lock()
	defer fake.jSONArrIndexMutex.Unlock()
	fake.JSONArrIndexStub = stub
}

func (fake *FakeCmdable) JSONArrIndexArgsForCall(i int) (context.Context, string, string, []interface{}) {
	fake.jSONArrIndexMutex.RLock()
	defer fake.jSONArrIndexMutex.RUnlock()
	argsForCall := fake.jSONArrIndexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) JSONArrIndexReturns(result1 *redisa.IntSliceCmd) {
	fake.jSONArrIndexMutex.Lock()
	defer fake.jSONArrIndexMutex.Unlock()
	fake.JSONArrIndexStub = nil
	fake.jSONArrIndexReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrIndexReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.jSONArrIndexMutex.Lock()
	defer fake.jSONArrIndexMutex.Unlock()
	fake.JSONArrIndexStub = nil
	if fake.jSONArrIndexReturnsOnCall == nil {
		fake.jSONArrIndexReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.jSONArrIndexReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrIndexWithArgs(arg1 context.Context, arg2 string, arg3 string, arg4 *redisa.JSONArrIndexArgs, arg5 ...interface{}) *redisa.IntSliceCmd {
	fake.jSONArrIndexWithArgsMutex.Lock()
	ret, specificReturn := fake.jSONArrIndexWithArgsReturnsOnCall[len(fake.jSONArrIndexWithArgsArgsForCall)]
	fake.jSONArrIndexWithArgsArgsForCall = append(fake.jSONArrIndexWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.JSONArrIndexArgs
		arg5 []interface{}
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.JSONArrIndexWithArgsStub
	fakeReturns := fake.jSONArrIndexWithArgsReturns
	fake.recordInvocation("JSONArrIndexWithArgs", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.jSONArrIndexWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONArrIndexWithArgsCallCount() int {
	fake.jSONArrIndexWithArgsMutex.RLock()
	defer fake.jSONArrIndexWithArgsMutex.RUnlock()
	return len(fake.jSONArrIndexWithArgsArgsForCall)
}

func (fake *FakeCmdable) JSONArrIndexWithArgsCalls(stub func(context.Context, string, string, *redisa.JSONArrIndexArgs, ...interface{}) *redisa.IntSliceCmd) {
	fake.jSONArrIndexWithArgsMutex.Lock()
	defer fake.jSONArrIndexWithArgsMutex.Unlock()
	fake.JSONArrIndexWithArgsStub = stub
}

func (fake *FakeCmdable) JSONArrIndexWithArgsArgsForCall(i int) (context.Context, string, string, *redisa.JSONArrIndexArgs, []interface{}) {
	fake.jSONArrIndexWithArgsMutex.RLock()
	defer fake.jSONArrIndexWithArgsMutex.RUnlock()
	argsForCall := fake.jSONArrIndexWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) JSONArrIndexWithArgsReturns(result1 *redisa.IntSliceCmd) {
	fake.jSONArrIndexWithArgsMutex.Lock()
	defer fake.jSONArrIndexWithArgsMutex.Unlock()
	fake.JSONArrIndexWithArgsStub = nil
	fake.jSONArrIndexWithArgsReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrIndexWithArgsReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.jSONArrIndexWithArgsMutex.Lock()
	defer fake.jSONArrIndexWithArgsMutex.Unlock()
	fake.JSONArrIndexWithArgsStub = nil
	if fake.jSONArrIndexWithArgsReturnsOnCall == nil {
		fake.jSONArrIndexWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.jSONArrIndexWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrInsert(arg1 context.Context, arg2 string, arg3 string, arg4 int64, arg5 ...interface{}) *redisa.IntSliceCmd {
	fake.jSONArrInsertMutex.Lock()
	ret, specificReturn := fake.jSONArrInsertReturnsOnCall[len(fake.jSONArrInsertArgsForCall)]
	fake.jSONArrInsertArgsForCall = append(fake.jSONArrInsertArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
		arg5 []interface{}
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.JSONArrInsertStub
	fakeReturns := fake.jSONArrInsertReturns
	fake.recordInvocation("JSONArrInsert", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.jSONArrInsertMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONArrInsertCallCount() int {
	fake.jSONArrInsertMutex.RLock()
	defer fake.jSONArrInsertMutex.RUnlock()
	return len(fake.jSONArrInsertArgsForCall)
}

func (fake *FakeCmdable) JSONArrInsertCalls(stub func(context.Context, string, string, int64, ...interface{}) *redisa.IntSliceCmd) {
	fake.jSONArrInsertMutex.Lock()
	defer fake.jSONArrInsertMutex.Unlock()
	fake.JSONArrInsertStub = stub
}

func (fake *FakeCmdable) JSONArrInsertArgsForCall(i int) (context.Context, string, string, int64, []interface{}) {
	fake.jSONArrInsertMutex.RLock()
	defer fake.jSONArrInsertMutex.RUnlock()
	argsForCall := fake.jSONArrInsertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) JSONArrInsertReturns(result1 *redisa.IntSliceCmd) {
	fake.jSONArrInsertMutex.Lock()
	defer fake.jSONArrInsertMutex.Unlock()
	fake.JSONArrInsertStub = nil
	fake.jSONArrInsertReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrInsertReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.jSONArrInsertMutex.Lock()
	defer fake.jSONArrInsertMutex.Unlock()
	fake.JSONArrInsertStub = nil
	if fake.jSONArrInsertReturnsOnCall == nil {
		fake.jSONArrInsertReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.jSONArrInsertReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrLen(arg1 context.Context, arg2 string, arg3 string) *redisa.IntSliceCmd {
	fake.jSONArrLenMutex.Lock()
	ret, specificReturn := fake.jSONArrLenReturnsOnCall[len(fake.jSONArrLenArgsForCall)]
	fake.jSONArrLenArgsForCall = append(fake.jSONArrLenArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.JSONArrLenStub
	fakeReturns := fake.jSONArrLenReturns
	fake.recordInvocation("JSONArrLen", []interface{}{arg1, arg2, arg3})
	fake.jSONArrLenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONArrLenCallCount() int {
	fake.jSONArrLenMutex.RLock()
	defer fake.jSONArrLenMutex.RUnlock()
	return len(fake.jSONArrLenArgsForCall)
}

func (fake *FakeCmdable) JSONArrLenCalls(stub func(context.Context, string, string) *redisa.IntSliceCmd) {
	fake.jSONArrLenMutex.Lock()
	defer fake.jSONArrLenMutex.Unlock()
	fake.JSONArrLenStub = stub
}

func (fake *FakeCmdable) JSONArrLenArgsForCall(i int) (context.Context, string, string) {
	fake.jSONArrLenMutex.RLock()
	defer fake.jSONArrLenMutex.RUnlock()
	argsForCall := fake.jSONArrLenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONArrLenReturns(result1 *redisa.IntSliceCmd) {
	fake.jSONArrLenMutex.Lock()
	defer fake.jSONArrLenMutex.Unlock()
	fake.JSONArrLenStub = nil
	fake.jSONArrLenReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrLenReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.jSONArrLenMutex.Lock()
	defer fake.jSONArrLenMutex.Unlock()
	fake.JSONArrLenStub = nil
	if fake.jSONArrLenReturnsOnCall == nil {
		fake.jSONArrLenReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.jSONArrLenReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrPop(arg1 context.Context, arg2 string, arg3 string, arg4 int) *redisa.StringSliceCmd {
	fake.jSONArrPopMutex.Lock()
	ret, specificReturn := fake.jSONArrPopReturnsOnCall[len(fake.jSONArrPopArgsForCall)]
	fake.jSONArrPopArgsForCall = append(fake.jSONArrPopArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.JSONArrPopStub
	fakeReturns := fake.jSONArrPopReturns
	fake.recordInvocation("JSONArrPop", []interface{}{arg1, arg2, arg3, arg4})
	fake.jSONArrPopMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONArrPopCallCount() int {
	fake.jSONArrPopMutex.RLock()
	defer fake.jSONArrPopMutex.RUnlock()
	return len(fake.jSONArrPopArgsForCall)
}

func (fake *FakeCmdable) JSONArrPopCalls(stub func(context.Context, string, string, int) *redisa.StringSliceCmd) {
	fake.jSONArrPopMutex.Lock()
	defer fake.jSONArrPopMutex.Unlock()
	fake.JSONArrPopStub = stub
}

func (fake *FakeCmdable) JSONArrPopArgsForCall(i int) (context.Context, string, string, int) {
	fake.jSONArrPopMutex.RLock()
	defer fake.jSONArrPopMutex.RUnlock()
	argsForCall := fake.jSONArrPopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) JSONArrPopReturns(result1 *redisa.StringSliceCmd) {
	fake.jSONArrPopMutex.Lock()
	defer fake.jSONArrPopMutex.Unlock()
	fake.JSONArrPopStub = nil
	fake.jSONArrPopReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrPopReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.jSONArrPopMutex.Lock()
	defer fake.jSONArrPopMutex.Unlock()
	fake.JSONArrPopStub = nil
	if fake.jSONArrPopReturnsOnCall == nil {
		fake.jSONArrPopReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.jSONArrPopReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrTrim(arg1 context.Context, arg2 string, arg3 string) *redisa.IntSliceCmd {
	fake.jSONArrTrimMutex.Lock()
	ret, specificReturn := fake.jSONArrTrimReturnsOnCall[len(fake.jSONArrTrimArgsForCall)]
	fake.jSONArrTrimArgsForCall = append(fake.jSONArrTrimArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.JSONArrTrimStub
	fakeReturns := fake.jSONArrTrimReturns
	fake.recordInvocation("JSONArrTrim", []interface{}{arg1, arg2, arg3})
	fake.jSONArrTrimMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONArrTrimCallCount() int {
	fake.jSONArrTrimMutex.RLock()
	defer fake.jSONArrTrimMutex.RUnlock()
	return len(fake.jSONArrTrimArgsForCall)
}

func (fake *FakeCmdable) JSONArrTrimCalls(stub func(context.Context, string, string) *redisa.IntSliceCmd) {
	fake.jSONArrTrimMutex.Lock()
	defer fake.jSONArrTrimMutex.Unlock()
	fake.JSONArrTrimStub = stub
}

func (fake *FakeCmdable) JSONArrTrimArgsForCall(i int) (context.Context, string, string) {
	fake.jSONArrTrimMutex.RLock()
	defer fake.jSONArrTrimMutex.RUnlock()
	argsForCall := fake.jSONArrTrimArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONArrTrimReturns(result1 *redisa.IntSliceCmd) {
	fake.jSONArrTrimMutex.Lock()
	defer fake.jSONArrTrimMutex.Unlock()
	fake.JSONArrTrimStub = nil
	fake.jSONArrTrimReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrTrimReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.jSONArrTrimMutex.Lock()
	defer fake.jSONArrTrimMutex.Unlock()
	fake.JSONArrTrimStub = nil
	if fake.jSONArrTrimReturnsOnCall == nil {
		fake.jSONArrTrimReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.jSONArrTrimReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrTrimWithArgs(arg1 context.Context, arg2 string, arg3 string, arg4 *redisa.JSONArrTrimArgs) *redisa.IntSliceCmd {
	fake.jSONArrTrimWithArgsMutex.Lock()
	ret, specificReturn := fake.jSONArrTrimWithArgsReturnsOnCall[len(fake.jSONArrTrimWithArgsArgsForCall)]
	fake.jSONArrTrimWithArgsArgsForCall = append(fake.jSONArrTrimWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.JSONArrTrimArgs
	}{arg1, arg2, arg3, arg4})
	stub := fake.JSONArrTrimWithArgsStub
	fakeReturns := fake.jSONArrTrimWithArgsReturns
	fake.recordInvocation("JSONArrTrimWithArgs", []interface{}{arg1, arg2, arg3, arg4})
	fake.jSONArrTrimWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONArrTrimWithArgsCallCount() int {
	fake.jSONArrTrimWithArgsMutex.RLock()
	defer fake.jSONArrTrimWithArgsMutex.RUnlock()
	return len(fake.jSONArrTrimWithArgsArgsForCall)
}

func (fake *FakeCmdable) JSONArrTrimWithArgsCalls(stub func(context.Context, string, string, *redisa.JSONArrTrimArgs) *redisa.IntSliceCmd) {
	fake.jSONArrTrimWithArgsMutex.Lock()
	defer fake.jSONArrTrimWithArgsMutex.Unlock()
	fake.JSONArrTrimWithArgsStub = stub
}

func (fake *FakeCmdable) JSONArrTrimWithArgsArgsForCall(i int) (context.Context, string, string, *redisa.JSONArrTrimArgs) {
	fake.jSONArrTrimWithArgsMutex.RLock()
	defer fake.jSONArrTrimWithArgsMutex.RUnlock()
	argsForCall := fake.jSONArrTrimWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) JSONArrTrimWithArgsReturns(result1 *redisa.IntSliceCmd) {
	fake.jSONArrTrimWithArgsMutex.Lock()
	defer fake.jSONArrTrimWithArgsMutex.Unlock()
	fake.JSONArrTrimWithArgsStub = nil
	fake.jSONArrTrimWithArgsReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONArrTrimWithArgsReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.jSONArrTrimWithArgsMutex.Lock()
	defer fake.jSONArrTrimWithArgsMutex.Unlock()
	fake.JSONArrTrimWithArgsStub = nil
	if fake.jSONArrTrimWithArgsReturnsOnCall == nil {
		fake.jSONArrTrimWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.jSONArrTrimWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONClear(arg1 context.Context, arg2 string, arg3 string) *redisa.IntCmd {
	fake.jSONClearMutex.Lock()
	ret, specificReturn := fake.jSONClearReturnsOnCall[len(fake.jSONClearArgsForCall)]
	fake.jSONClearArgsForCall = append(fake.jSONClearArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.JSONClearStub
	fakeReturns := fake.jSONClearReturns
	fake.recordInvocation("JSONClear", []interface{}{arg1, arg2, arg3})
	fake.jSONClearMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONClearCallCount() int {
	fake.jSONClearMutex.RLock()
	defer fake.jSONClearMutex.RUnlock()
	return len(fake.jSONClearArgsForCall)
}

func (fake *FakeCmdable) JSONClearCalls(stub func(context.Context, string, string) *redisa.IntCmd) {
	fake.jSONClearMutex.Lock()
	defer fake.jSONClearMutex.Unlock()
	fake.JSONClearStub = stub
}

func (fake *FakeCmdable) JSONClearArgsForCall(i int) (context.Context, string, string) {
	fake.jSONClearMutex.RLock()
	defer fake.jSONClearMutex.RUnlock()
	argsForCall := fake.jSONClearArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONClearReturns(result1 *redisa.IntCmd) {
	fake.jSONClearMutex.Lock()
	defer fake.jSONClearMutex.Unlock()
	fake.JSONClearStub = nil
	fake.jSONClearReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) JSONClearReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.jSONClearMutex.Lock()
	defer fake.jSONClearMutex.Unlock()
	fake.JSONClearStub = nil
	if fake.jSONClearReturnsOnCall == nil {
		fake.jSONClearReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.jSONClearReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) JSONDebugMemory(arg1 context.Context, arg2 string, arg3 string) *redisa.IntCmd {
	fake.jSONDebugMemoryMutex.Lock()
	ret, specificReturn := fake.jSONDebugMemoryReturnsOnCall[len(fake.jSONDebugMemoryArgsForCall)]
	fake.jSONDebugMemoryArgsForCall = append(fake.jSONDebugMemoryArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.JSONDebugMemoryStub
	fakeReturns := fake.jSONDebugMemoryReturns
	fake.recordInvocation("JSONDebugMemory", []interface{}{arg1, arg2, arg3})
	fake.jSONDebugMemoryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONDebugMemoryCallCount() int {
	fake.jSONDebugMemoryMutex.RLock()
	defer fake.jSONDebugMemoryMutex.RUnlock()
	return len(fake.jSONDebugMemoryArgsForCall)
}

func (fake *FakeCmdable) JSONDebugMemoryCalls(stub func(context.Context, string, string) *redisa.IntCmd) {
	fake.jSONDebugMemoryMutex.Lock()
	defer fake.jSONDebugMemoryMutex.Unlock()
	fake.JSONDebugMemoryStub = stub
}

func (fake *FakeCmdable) JSONDebugMemoryArgsForCall(i int) (context.Context, string, string) {
	fake.jSONDebugMemoryMutex.RLock()
	defer fake.jSONDebugMemoryMutex.RUnlock()
	argsForCall := fake.jSONDebugMemoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONDebugMemoryReturns(result1 *redisa.IntCmd) {
	fake.jSONDebugMemoryMutex.Lock()
	defer fake.jSONDebugMemoryMutex.Unlock()
	fake.JSONDebugMemoryStub = nil
	fake.jSONDebugMemoryReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) JSONDebugMemoryReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.jSONDebugMemoryMutex.Lock()
	defer fake.jSONDebugMemoryMutex.Unlock()
	fake.JSONDebugMemoryStub = nil
	if fake.jSONDebugMemoryReturnsOnCall == nil {
		fake.jSONDebugMemoryReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.jSONDebugMemoryReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) JSONDel(arg1 context.Context, arg2 string, arg3 string) *redisa.IntCmd {
	fake.jSONDelMutex.Lock()
	ret, specificReturn := fake.jSONDelReturnsOnCall[len(fake.jSONDelArgsForCall)]
	fake.jSONDelArgsForCall = append(fake.jSONDelArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.JSONDelStub
	fakeReturns := fake.jSONDelReturns
	fake.recordInvocation("JSONDel", []interface{}{arg1, arg2, arg3})
	fake.jSONDelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONDelCallCount() int {
	fake.jSONDelMutex.RLock()
	defer fake.jSONDelMutex.RUnlock()
	return len(fake.jSONDelArgsForCall)
}

func (fake *FakeCmdable) JSONDelCalls(stub func(context.Context, string, string) *redisa.IntCmd) {
	fake.jSONDelMutex.Lock()
	defer fake.jSONDelMutex.Unlock()
	fake.JSONDelStub = stub
}

func (fake *FakeCmdable) JSONDelArgsForCall(i int) (context.Context, string, string) {
	fake.jSONDelMutex.RLock()
	defer fake.jSONDelMutex.RUnlock()
	argsForCall := fake.jSONDelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONDelReturns(result1 *redisa.IntCmd) {
	fake.jSONDelMutex.Lock()
	defer fake.jSONDelMutex.Unlock()
	fake.JSONDelStub = nil
	fake.jSONDelReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) JSONDelReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.jSONDelMutex.Lock()
	defer fake.jSONDelMutex.Unlock()
	fake.JSONDelStub = nil
	if fake.jSONDelReturnsOnCall == nil {
		fake.jSONDelReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.jSONDelReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) JSONForget(arg1 context.Context, arg2 string, arg3 string) *redisa.IntCmd {
	fake.jSONForgetMutex.Lock()
	ret, specificReturn := fake.jSONForgetReturnsOnCall[len(fake.jSONForgetArgsForCall)]
	fake.jSONForgetArgsForCall = append(fake.jSONForgetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.JSONForgetStub
	fakeReturns := fake.jSONForgetReturns
	fake.recordInvocation("JSONForget", []interface{}{arg1, arg2, arg3})
	fake.jSONForgetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONForgetCallCount() int {
	fake.jSONForgetMutex.RLock()
	defer fake.jSONForgetMutex.RUnlock()
	return len(fake.jSONForgetArgsForCall)
}

func (fake *FakeCmdable) JSONForgetCalls(stub func(context.Context, string, string) *redisa.IntCmd) {
	fake.jSONForgetMutex.Lock()
	defer fake.jSONForgetMutex.Unlock()
	fake.JSONForgetStub = stub
}

func (fake *FakeCmdable) JSONForgetArgsForCall(i int) (context.Context, string, string) {
	fake.jSONForgetMutex.RLock()
	defer fake.jSONForgetMutex.RUnlock()
	argsForCall := fake.jSONForgetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONForgetReturns(result1 *redisa.IntCmd) {
	fake.jSONForgetMutex.Lock()
	defer fake.jSONForgetMutex.Unlock()
	fake.JSONForgetStub = nil
	fake.jSONForgetReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) JSONForgetReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.jSONForgetMutex.Lock()
	defer fake.jSONForgetMutex.Unlock()
	fake.JSONForgetStub = nil
	if fake.jSONForgetReturnsOnCall == nil {
		fake.jSONForgetReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.jSONForgetReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) JSONGet(arg1 context.Context, arg2 string, arg3 ...string) *redisa.JSONCmd {
	fake.jSONGetMutex.Lock()
	ret, specificReturn := fake.jSONGetReturnsOnCall[len(fake.jSONGetArgsForCall)]
	fake.jSONGetArgsForCall = append(fake.jSONGetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.JSONGetStub
	fakeReturns := fake.jSONGetReturns
	fake.recordInvocation("JSONGet", []interface{}{arg1, arg2, arg3})
	fake.jSONGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONGetCallCount() int {
	fake.jSONGetMutex.RLock()
	defer fake.jSONGetMutex.RUnlock()
	return len(fake.jSONGetArgsForCall)
}

func (fake *FakeCmdable) JSONGetCalls(stub func(context.Context, string, ...string) *redisa.JSONCmd) {
	fake.jSONGetMutex.Lock()
	defer fake.jSONGetMutex.Unlock()
	fake.JSONGetStub = stub
}

func (fake *FakeCmdable) JSONGetArgsForCall(i int) (context.Context, string, []string) {
	fake.jSONGetMutex.RLock()
	defer fake.jSONGetMutex.RUnlock()
	argsForCall := fake.jSONGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONGetReturns(result1 *redisa.JSONCmd) {
	fake.jSONGetMutex.Lock()
	defer fake.jSONGetMutex.Unlock()
	fake.JSONGetStub = nil
	fake.jSONGetReturns = struct {
		result1 *redisa.JSONCmd
	}{result1}
}

func (fake *FakeCmdable) JSONGetReturnsOnCall(i int, result1 *redisa.JSONCmd) {
	fake.jSONGetMutex.Lock()
	defer fake.jSONGetMutex.Unlock()
	fake.JSONGetStub = nil
	if fake.jSONGetReturnsOnCall == nil {
		fake.jSONGetReturnsOnCall = make(map[int]struct {
			result1 *redisa.JSONCmd
		})
	}
	fake.jSONGetReturnsOnCall[i] = struct {
		result1 *redisa.JSONCmd
	}{result1}
}

func (fake *FakeCmdable) JSONGetWithArgs(arg1 context.Context, arg2 string, arg3 *redisa.JSONGetArgs, arg4 ...string) *redisa.JSONCmd {
	fake.jSONGetWithArgsMutex.Lock()
	ret, specificReturn := fake.jSONGetWithArgsReturnsOnCall[len(fake.jSONGetWithArgsArgsForCall)]
	fake.jSONGetWithArgsArgsForCall = append(fake.jSONGetWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.JSONGetArgs
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	stub := fake.JSONGetWithArgsStub
	fakeReturns := fake.jSONGetWithArgsReturns
	fake.recordInvocation("JSONGetWithArgs", []interface{}{arg1, arg2, arg3, arg4})
	fake.jSONGetWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONGetWithArgsCallCount() int {
	fake.jSONGetWithArgsMutex.RLock()
	defer fake.jSONGetWithArgsMutex.RUnlock()
	return len(fake.jSONGetWithArgsArgsForCall)
}

func (fake *FakeCmdable) JSONGetWithArgsCalls(stub func(context.Context, string, *redisa.JSONGetArgs, ...string) *redisa.JSONCmd) {
	fake.jSONGetWithArgsMutex.Lock()
	defer fake.jSONGetWithArgsMutex.Unlock()
	fake.JSONGetWithArgsStub = stub
}

func (fake *FakeCmdable) JSONGetWithArgsArgsForCall(i int) (context.Context, string, *redisa.JSONGetArgs, []string) {
	fake.jSONGetWithArgsMutex.RLock()
	defer fake.jSONGetWithArgsMutex.RUnlock()
	argsForCall := fake.jSONGetWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) JSONGetWithArgsReturns(result1 *redisa.JSONCmd) {
	fake.jSONGetWithArgsMutex.Lock()
	defer fake.jSONGetWithArgsMutex.Unlock()
	fake.JSONGetWithArgsStub = nil
	fake.jSONGetWithArgsReturns = struct {
		result1 *redisa.JSONCmd
	}{result1}
}

func (fake *FakeCmdable) JSONGetWithArgsReturnsOnCall(i int, result1 *redisa.JSONCmd) {
	fake.jSONGetWithArgsMutex.Lock()
	defer fake.jSONGetWithArgsMutex.Unlock()
	fake.JSONGetWithArgsStub = nil
	if fake.jSONGetWithArgsReturnsOnCall == nil {
		fake.jSONGetWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.JSONCmd
		})
	}
	fake.jSONGetWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.JSONCmd
	}{result1}
}

func (fake *FakeCmdable) JSONMGet(arg1 context.Context, arg2 string, arg3 ...string) *redisa.JSONSliceCmd {
	fake.jSONMGetMutex.Lock()
	ret, specificReturn := fake.jSONMGetReturnsOnCall[len(fake.jSONMGetArgsForCall)]
	fake.jSONMGetArgsForCall = append(fake.jSONMGetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.JSONMGetStub
	fakeReturns := fake.jSONMGetReturns
	fake.recordInvocation("JSONMGet", []interface{}{arg1, arg2, arg3})
	fake.jSONMGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONMGetCallCount() int {
	fake.jSONMGetMutex.RLock()
	defer fake.jSONMGetMutex.RUnlock()
	return len(fake.jSONMGetArgsForCall)
}

func (fake *FakeCmdable) JSONMGetCalls(stub func(context.Context, string, ...string) *redisa.JSONSliceCmd) {
	fake.jSONMGetMutex.Lock()
	defer fake.jSONMGetMutex.Unlock()
	fake.JSONMGetStub = stub
}

func (fake *FakeCmdable) JSONMGetArgsForCall(i int) (context.Context, string, []string) {
	fake.jSONMGetMutex.RLock()
	defer fake.jSONMGetMutex.RUnlock()
	argsForCall := fake.jSONMGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONMGetReturns(result1 *redisa.JSONSliceCmd) {
	fake.jSONMGetMutex.Lock()
	defer fake.jSONMGetMutex.Unlock()
	fake.JSONMGetStub = nil
	fake.jSONMGetReturns = struct {
		result1 *redisa.JSONSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONMGetReturnsOnCall(i int, result1 *redisa.JSONSliceCmd) {
	fake.jSONMGetMutex.Lock()
	defer fake.jSONMGetMutex.Unlock()
	fake.JSONMGetStub = nil
	if fake.jSONMGetReturnsOnCall == nil {
		fake.jSONMGetReturnsOnCall = make(map[int]struct {
			result1 *redisa.JSONSliceCmd
		})
	}
	fake.jSONMGetReturnsOnCall[i] = struct {
		result1 *redisa.JSONSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONMSet(arg1 context.Context, arg2 ...interface{}) *redisa.StatusCmd {
	fake.jSONMSetMutex.Lock()
	ret, specificReturn := fake.jSONMSetReturnsOnCall[len(fake.jSONMSetArgsForCall)]
	fake.jSONMSetArgsForCall = append(fake.jSONMSetArgsForCall, struct {
		arg1 context.Context
		arg2 []interface{}
	}{arg1, arg2})
	stub := fake.JSONMSetStub
	fakeReturns := fake.jSONMSetReturns
	fake.recordInvocation("JSONMSet", []interface{}{arg1, arg2})
	fake.jSONMSetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONMSetCallCount() int {
	fake.jSONMSetMutex.RLock()
	defer fake.jSONMSetMutex.RUnlock()
	return len(fake.jSONMSetArgsForCall)
}

func (fake *FakeCmdable) JSONMSetCalls(stub func(context.Context, ...interface{}) *redisa.StatusCmd) {
	fake.jSONMSetMutex.Lock()
	defer fake.jSONMSetMutex.Unlock()
	fake.JSONMSetStub = stub
}

func (fake *FakeCmdable) JSONMSetArgsForCall(i int) (context.Context, []interface{}) {
	fake.jSONMSetMutex.RLock()
	defer fake.jSONMSetMutex.RUnlock()
	argsForCall := fake.jSONMSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) JSONMSetReturns(result1 *redisa.StatusCmd) {
	fake.jSONMSetMutex.Lock()
	defer fake.jSONMSetMutex.Unlock()
	fake.JSONMSetStub = nil
	fake.jSONMSetReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) JSONMSetReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.jSONMSetMutex.Lock()
	defer fake.jSONMSetMutex.Unlock()
	fake.JSONMSetStub = nil
	if fake.jSONMSetReturnsOnCall == nil {
		fake.jSONMSetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.jSONMSetReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) JSONMSetArgs(arg1 context.Context, arg2 []redisa.JSONSetArgs) *redisa.StatusCmd {
	var arg2Copy []redisa.JSONSetArgs
	if arg2 != nil {
		arg2Copy = make([]redisa.JSONSetArgs, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.jSONMSetArgsMutex.Lock()
	ret, specificReturn := fake.jSONMSetArgsReturnsOnCall[len(fake.jSONMSetArgsArgsForCall)]
	fake.jSONMSetArgsArgsForCall = append(fake.jSONMSetArgsArgsForCall, struct {
		arg1 context.Context
		arg2 []redisa.JSONSetArgs
	}{arg1, arg2Copy})
	stub := fake.JSONMSetArgsStub
	fakeReturns := fake.jSONMSetArgsReturns
	fake.recordInvocation("JSONMSetArgs", []interface{}{arg1, arg2Copy})
	fake.jSONMSetArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONMSetArgsCallCount() int {
	fake.jSONMSetArgsMutex.RLock()
	defer fake.jSONMSetArgsMutex.RUnlock()
	return len(fake.jSONMSetArgsArgsForCall)
}

func (fake *FakeCmdable) JSONMSetArgsCalls(stub func(context.Context, []redisa.JSONSetArgs) *redisa.StatusCmd) {
	fake.jSONMSetArgsMutex.Lock()
	defer fake.jSONMSetArgsMutex.Unlock()
	fake.JSONMSetArgsStub = stub
}

func (fake *FakeCmdable) JSONMSetArgsArgsForCall(i int) (context.Context, []redisa.JSONSetArgs) {
	fake.jSONMSetArgsMutex.RLock()
	defer fake.jSONMSetArgsMutex.RUnlock()
	argsForCall := fake.jSONMSetArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) JSONMSetArgsReturns(result1 *redisa.StatusCmd) {
	fake.jSONMSetArgsMutex.Lock()
	defer fake.jSONMSetArgsMutex.Unlock()
	fake.JSONMSetArgsStub = nil
	fake.jSONMSetArgsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) JSONMSetArgsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.jSONMSetArgsMutex.Lock()
	defer fake.jSONMSetArgsMutex.Unlock()
	fake.JSONMSetArgsStub = nil
	if fake.jSONMSetArgsReturnsOnCall == nil {
		fake.jSONMSetArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.jSONMSetArgsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) JSONMerge(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.StatusCmd {
	fake.jSONMergeMutex.Lock()
	ret, specificReturn := fake.jSONMergeReturnsOnCall[len(fake.jSONMergeArgsForCall)]
	fake.jSONMergeArgsForCall = append(fake.jSONMergeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.JSONMergeStub
	fakeReturns := fake.jSONMergeReturns
	fake.recordInvocation("JSONMerge", []interface{}{arg1, arg2, arg3, arg4})
	fake.jSONMergeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONMergeCallCount() int {
	fake.jSONMergeMutex.RLock()
	defer fake.jSONMergeMutex.RUnlock()
	return len(fake.jSONMergeArgsForCall)
}

func (fake *FakeCmdable) JSONMergeCalls(stub func(context.Context, string, string, string) *redisa.StatusCmd) {
	fake.jSONMergeMutex.Lock()
	defer fake.jSONMergeMutex.Unlock()
	fake.JSONMergeStub = stub
}

func (fake *FakeCmdable) JSONMergeArgsForCall(i int) (context.Context, string, string, string) {
	fake.jSONMergeMutex.RLock()
	defer fake.jSONMergeMutex.RUnlock()
	argsForCall := fake.jSONMergeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) JSONMergeReturns(result1 *redisa.StatusCmd) {
	fake.jSONMergeMutex.Lock()
	defer fake.jSONMergeMutex.Unlock()
	fake.JSONMergeStub = nil
	fake.jSONMergeReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) JSONMergeReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.jSONMergeMutex.Lock()
	defer fake.jSONMergeMutex.Unlock()
	fake.JSONMergeStub = nil
	if fake.jSONMergeReturnsOnCall == nil {
		fake.jSONMergeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.jSONMergeReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) JSONNumIncrBy(arg1 context.Context, arg2 string, arg3 string, arg4 float64) *redisa.JSONCmd {
	fake.jSONNumIncrByMutex.Lock()
	ret, specificReturn := fake.jSONNumIncrByReturnsOnCall[len(fake.jSONNumIncrByArgsForCall)]
	fake.jSONNumIncrByArgsForCall = append(fake.jSONNumIncrByArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 float64
	}{arg1, arg2, arg3, arg4})
	stub := fake.JSONNumIncrByStub
	fakeReturns := fake.jSONNumIncrByReturns
	fake.recordInvocation("JSONNumIncrBy", []interface{}{arg1, arg2, arg3, arg4})
	fake.jSONNumIncrByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONNumIncrByCallCount() int {
	fake.jSONNumIncrByMutex.RLock()
	defer fake.jSONNumIncrByMutex.RUnlock()
	return len(fake.jSONNumIncrByArgsForCall)
}

func (fake *FakeCmdable) JSONNumIncrByCalls(stub func(context.Context, string, string, float64) *redisa.JSONCmd) {
	fake.jSONNumIncrByMutex.Lock()
	defer fake.jSONNumIncrByMutex.Unlock()
	fake.JSONNumIncrByStub = stub
}

func (fake *FakeCmdable) JSONNumIncrByArgsForCall(i int) (context.Context, string, string, float64) {
	fake.jSONNumIncrByMutex.RLock()
	defer fake.jSONNumIncrByMutex.RUnlock()
	argsForCall := fake.jSONNumIncrByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) JSONNumIncrByReturns(result1 *redisa.JSONCmd) {
	fake.jSONNumIncrByMutex.Lock()
	defer fake.jSONNumIncrByMutex.Unlock()
	fake.JSONNumIncrByStub = nil
	fake.jSONNumIncrByReturns = struct {
		result1 *redisa.JSONCmd
	}{result1}
}

func (fake *FakeCmdable) JSONNumIncrByReturnsOnCall(i int, result1 *redisa.JSONCmd) {
	fake.jSONNumIncrByMutex.Lock()
	defer fake.jSONNumIncrByMutex.Unlock()
	fake.JSONNumIncrByStub = nil
	if fake.jSONNumIncrByReturnsOnCall == nil {
		fake.jSONNumIncrByReturnsOnCall = make(map[int]struct {
			result1 *redisa.JSONCmd
		})
	}
	fake.jSONNumIncrByReturnsOnCall[i] = struct {
		result1 *redisa.JSONCmd
	}{result1}
}

func (fake *FakeCmdable) JSONObjKeys(arg1 context.Context, arg2 string, arg3 string) *redisa.SliceCmd {
	fake.jSONObjKeysMutex.Lock()
	ret, specificReturn := fake.jSONObjKeysReturnsOnCall[len(fake.jSONObjKeysArgsForCall)]
	fake.jSONObjKeysArgsForCall = append(fake.jSONObjKeysArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.JSONObjKeysStub
	fakeReturns := fake.jSONObjKeysReturns
	fake.recordInvocation("JSONObjKeys", []interface{}{arg1, arg2, arg3})
	fake.jSONObjKeysMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONObjKeysCallCount() int {
	fake.jSONObjKeysMutex.RLock()
	defer fake.jSONObjKeysMutex.RUnlock()
	return len(fake.jSONObjKeysArgsForCall)
}

func (fake *FakeCmdable) JSONObjKeysCalls(stub func(context.Context, string, string) *redisa.SliceCmd) {
	fake.jSONObjKeysMutex.Lock()
	defer fake.jSONObjKeysMutex.Unlock()
	fake.JSONObjKeysStub = stub
}

func (fake *FakeCmdable) JSONObjKeysArgsForCall(i int) (context.Context, string, string) {
	fake.jSONObjKeysMutex.RLock()
	defer fake.jSONObjKeysMutex.RUnlock()
	argsForCall := fake.jSONObjKeysArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONObjKeysReturns(result1 *redisa.SliceCmd) {
	fake.jSONObjKeysMutex.Lock()
	defer fake.jSONObjKeysMutex.Unlock()
	fake.JSONObjKeysStub = nil
	fake.jSONObjKeysReturns = struct {
		result1 *redisa.SliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONObjKeysReturnsOnCall(i int, result1 *redisa.SliceCmd) {
	fake.jSONObjKeysMutex.Lock()
	defer fake.jSONObjKeysMutex.Unlock()
	fake.JSONObjKeysStub = nil
	if fake.jSONObjKeysReturnsOnCall == nil {
		fake.jSONObjKeysReturnsOnCall = make(map[int]struct {
			result1 *redisa.SliceCmd
		})
	}
	fake.jSONObjKeysReturnsOnCall[i] = struct {
		result1 *redisa.SliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONObjLen(arg1 context.Context, arg2 string, arg3 string) *redisa.IntPointerSliceCmd {
	fake.jSONObjLenMutex.Lock()
	ret, specificReturn := fake.jSONObjLenReturnsOnCall[len(fake.jSONObjLenArgsForCall)]
	fake.jSONObjLenArgsForCall = append(fake.jSONObjLenArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.JSONObjLenStub
	fakeReturns := fake.jSONObjLenReturns
	fake.recordInvocation("JSONObjLen", []interface{}{arg1, arg2, arg3})
	fake.jSONObjLenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONObjLenCallCount() int {
	fake.jSONObjLenMutex.RLock()
	defer fake.jSONObjLenMutex.RUnlock()
	return len(fake.jSONObjLenArgsForCall)
}

func (fake *FakeCmdable) JSONObjLenCalls(stub func(context.Context, string, string) *redisa.IntPointerSliceCmd) {
	fake.jSONObjLenMutex.Lock()
	defer fake.jSONObjLenMutex.Unlock()
	fake.JSONObjLenStub = stub
}

func (fake *FakeCmdable) JSONObjLenArgsForCall(i int) (context.Context, string, string) {
	fake.jSONObjLenMutex.RLock()
	defer fake.jSONObjLenMutex.RUnlock()
	argsForCall := fake.jSONObjLenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONObjLenReturns(result1 *redisa.IntPointerSliceCmd) {
	fake.jSONObjLenMutex.Lock()
	defer fake.jSONObjLenMutex.Unlock()
	fake.JSONObjLenStub = nil
	fake.jSONObjLenReturns = struct {
		result1 *redisa.IntPointerSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONObjLenReturnsOnCall(i int, result1 *redisa.IntPointerSliceCmd) {
	fake.jSONObjLenMutex.Lock()
	defer fake.jSONObjLenMutex.Unlock()
	fake.JSONObjLenStub = nil
	if fake.jSONObjLenReturnsOnCall == nil {
		fake.jSONObjLenReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntPointerSliceCmd
		})
	}
	fake.jSONObjLenReturnsOnCall[i] = struct {
		result1 *redisa.IntPointerSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONSet(arg1 context.Context, arg2 string, arg3 string, arg4 interface{}) *redisa.StatusCmd {
	fake.jSONSetMutex.Lock()
	ret, specificReturn := fake.jSONSetReturnsOnCall[len(fake.jSONSetArgsForCall)]
	fake.jSONSetArgsForCall = append(fake.jSONSetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.JSONSetStub
	fakeReturns := fake.jSONSetReturns
	fake.recordInvocation("JSONSet", []interface{}{arg1, arg2, arg3, arg4})
	fake.jSONSetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONSetCallCount() int {
	fake.jSONSetMutex.RLock()
	defer fake.jSONSetMutex.RUnlock()
	return len(fake.jSONSetArgsForCall)
}

func (fake *FakeCmdable) JSONSetCalls(stub func(context.Context, string, string, interface{}) *redisa.StatusCmd) {
	fake.jSONSetMutex.Lock()
	defer fake.jSONSetMutex.Unlock()
	fake.JSONSetStub = stub
}

func (fake *FakeCmdable) JSONSetArgsForCall(i int) (context.Context, string, string, interface{}) {
	fake.jSONSetMutex.RLock()
	defer fake.jSONSetMutex.RUnlock()
	argsForCall := fake.jSONSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) JSONSetReturns(result1 *redisa.StatusCmd) {
	fake.jSONSetMutex.Lock()
	defer fake.jSONSetMutex.Unlock()
	fake.JSONSetStub = nil
	fake.jSONSetReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) JSONSetReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.jSONSetMutex.Lock()
	defer fake.jSONSetMutex.Unlock()
	fake.JSONSetStub = nil
	if fake.jSONSetReturnsOnCall == nil {
		fake.jSONSetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.jSONSetReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) JSONSetMode(arg1 context.Context, arg2 string, arg3 string, arg4 interface{}, arg5 string) *redisa.StatusCmd {
	fake.jSONSetModeMutex.Lock()
	ret, specificReturn := fake.jSONSetModeReturnsOnCall[len(fake.jSONSetModeArgsForCall)]
	fake.jSONSetModeArgsForCall = append(fake.jSONSetModeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 interface{}
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.JSONSetModeStub
	fakeReturns := fake.jSONSetModeReturns
	fake.recordInvocation("JSONSetMode", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.jSONSetModeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONSetModeCallCount() int {
	fake.jSONSetModeMutex.RLock()
	defer fake.jSONSetModeMutex.RUnlock()
	return len(fake.jSONSetModeArgsForCall)
}

func (fake *FakeCmdable) JSONSetModeCalls(stub func(context.Context, string, string, interface{}, string) *redisa.StatusCmd) {
	fake.jSONSetModeMutex.Lock()
	defer fake.jSONSetModeMutex.Unlock()
	fake.JSONSetModeStub = stub
}

func (fake *FakeCmdable) JSONSetModeArgsForCall(i int) (context.Context, string, string, interface{}, string) {
	fake.jSONSetModeMutex.RLock()
	defer fake.jSONSetModeMutex.RUnlock()
	argsForCall := fake.jSONSetModeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) JSONSetModeReturns(result1 *redisa.StatusCmd) {
	fake.jSONSetModeMutex.Lock()
	defer fake.jSONSetModeMutex.Unlock()
	fake.JSONSetModeStub = nil
	fake.jSONSetModeReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) JSONSetModeReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.jSONSetModeMutex.Lock()
	defer fake.jSONSetModeMutex.Unlock()
	fake.JSONSetModeStub = nil
	if fake.jSONSetModeReturnsOnCall == nil {
		fake.jSONSetModeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.jSONSetModeReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) JSONStrAppend(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.IntPointerSliceCmd {
	fake.jSONStrAppendMutex.Lock()
	ret, specificReturn := fake.jSONStrAppendReturnsOnCall[len(fake.jSONStrAppendArgsForCall)]
	fake.jSONStrAppendArgsForCall = append(fake.jSONStrAppendArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.JSONStrAppendStub
	fakeReturns := fake.jSONStrAppendReturns
	fake.recordInvocation("JSONStrAppend", []interface{}{arg1, arg2, arg3, arg4})
	fake.jSONStrAppendMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONStrAppendCallCount() int {
	fake.jSONStrAppendMutex.RLock()
	defer fake.jSONStrAppendMutex.RUnlock()
	return len(fake.jSONStrAppendArgsForCall)
}

func (fake *FakeCmdable) JSONStrAppendCalls(stub func(context.Context, string, string, string) *redisa.IntPointerSliceCmd) {
	fake.jSONStrAppendMutex.Lock()
	defer fake.jSONStrAppendMutex.Unlock()
	fake.JSONStrAppendStub = stub
}

func (fake *FakeCmdable) JSONStrAppendArgsForCall(i int) (context.Context, string, string, string) {
	fake.jSONStrAppendMutex.RLock()
	defer fake.jSONStrAppendMutex.RUnlock()
	argsForCall := fake.jSONStrAppendArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) JSONStrAppendReturns(result1 *redisa.IntPointerSliceCmd) {
	fake.jSONStrAppendMutex.Lock()
	defer fake.jSONStrAppendMutex.Unlock()
	fake.JSONStrAppendStub = nil
	fake.jSONStrAppendReturns = struct {
		result1 *redisa.IntPointerSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONStrAppendReturnsOnCall(i int, result1 *redisa.IntPointerSliceCmd) {
	fake.jSONStrAppendMutex.Lock()
	defer fake.jSONStrAppendMutex.Unlock()
	fake.JSONStrAppendStub = nil
	if fake.jSONStrAppendReturnsOnCall == nil {
		fake.jSONStrAppendReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntPointerSliceCmd
		})
	}
	fake.jSONStrAppendReturnsOnCall[i] = struct {
		result1 *redisa.IntPointerSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONStrLen(arg1 context.Context, arg2 string, arg3 string) *redisa.IntPointerSliceCmd {
	fake.jSONStrLenMutex.Lock()
	ret, specificReturn := fake.jSONStrLenReturnsOnCall[len(fake.jSONStrLenArgsForCall)]
	fake.jSONStrLenArgsForCall = append(fake.jSONStrLenArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.JSONStrLenStub
	fakeReturns := fake.jSONStrLenReturns
	fake.recordInvocation("JSONStrLen", []interface{}{arg1, arg2, arg3})
	fake.jSONStrLenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONStrLenCallCount() int {
	fake.jSONStrLenMutex.RLock()
	defer fake.jSONStrLenMutex.RUnlock()
	return len(fake.jSONStrLenArgsForCall)
}

func (fake *FakeCmdable) JSONStrLenCalls(stub func(context.Context, string, string) *redisa.IntPointerSliceCmd) {
	fake.jSONStrLenMutex.Lock()
	defer fake.jSONStrLenMutex.Unlock()
	fake.JSONStrLenStub = stub
}

func (fake *FakeCmdable) JSONStrLenArgsForCall(i int) (context.Context, string, string) {
	fake.jSONStrLenMutex.RLock()
	defer fake.jSONStrLenMutex.RUnlock()
	argsForCall := fake.jSONStrLenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONStrLenReturns(result1 *redisa.IntPointerSliceCmd) {
	fake.jSONStrLenMutex.Lock()
	defer fake.jSONStrLenMutex.Unlock()
	fake.JSONStrLenStub = nil
	fake.jSONStrLenReturns = struct {
		result1 *redisa.IntPointerSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONStrLenReturnsOnCall(i int, result1 *redisa.IntPointerSliceCmd) {
	fake.jSONStrLenMutex.Lock()
	defer fake.jSONStrLenMutex.Unlock()
	fake.JSONStrLenStub = nil
	if fake.jSONStrLenReturnsOnCall == nil {
		fake.jSONStrLenReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntPointerSliceCmd
		})
	}
	fake.jSONStrLenReturnsOnCall[i] = struct {
		result1 *redisa.IntPointerSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONToggle(arg1 context.Context, arg2 string, arg3 string) *redisa.IntPointerSliceCmd {
	fake.jSONToggleMutex.Lock()
	ret, specificReturn := fake.jSONToggleReturnsOnCall[len(fake.jSONToggleArgsForCall)]
	fake.jSONToggleArgsForCall = append(fake.jSONToggleArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.JSONToggleStub
	fakeReturns := fake.jSONToggleReturns
	fake.recordInvocation("JSONToggle", []interface{}{arg1, arg2, arg3})
	fake.jSONToggleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONToggleCallCount() int {
	fake.jSONToggleMutex.RLock()
	defer fake.jSONToggleMutex.RUnlock()
	return len(fake.jSONToggleArgsForCall)
}

func (fake *FakeCmdable) JSONToggleCalls(stub func(context.Context, string, string) *redisa.IntPointerSliceCmd) {
	fake.jSONToggleMutex.Lock()
	defer fake.jSONToggleMutex.Unlock()
	fake.JSONToggleStub = stub
}

func (fake *FakeCmdable) JSONToggleArgsForCall(i int) (context.Context, string, string) {
	fake.jSONToggleMutex.RLock()
	defer fake.jSONToggleMutex.RUnlock()
	argsForCall := fake.jSONToggleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONToggleReturns(result1 *redisa.IntPointerSliceCmd) {
	fake.jSONToggleMutex.Lock()
	defer fake.jSONToggleMutex.Unlock()
	fake.JSONToggleStub = nil
	fake.jSONToggleReturns = struct {
		result1 *redisa.IntPointerSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONToggleReturnsOnCall(i int, result1 *redisa.IntPointerSliceCmd) {
	fake.jSONToggleMutex.Lock()
	defer fake.jSONToggleMutex.Unlock()
	fake.JSONToggleStub = nil
	if fake.jSONToggleReturnsOnCall == nil {
		fake.jSONToggleReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntPointerSliceCmd
		})
	}
	fake.jSONToggleReturnsOnCall[i] = struct {
		result1 *redisa.IntPointerSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONType(arg1 context.Context, arg2 string, arg3 string) *redisa.JSONSliceCmd {
	fake.jSONTypeMutex.Lock()
	ret, specificReturn := fake.jSONTypeReturnsOnCall[len(fake.jSONTypeArgsForCall)]
	fake.jSONTypeArgsForCall = append(fake.jSONTypeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.JSONTypeStub
	fakeReturns := fake.jSONTypeReturns
	fake.recordInvocation("JSONType", []interface{}{arg1, arg2, arg3})
	fake.jSONTypeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) JSONTypeCallCount() int {
	fake.jSONTypeMutex.RLock()
	defer fake.jSONTypeMutex.RUnlock()
	return len(fake.jSONTypeArgsForCall)
}

func (fake *FakeCmdable) JSONTypeCalls(stub func(context.Context, string, string) *redisa.JSONSliceCmd) {
	fake.jSONTypeMutex.Lock()
	defer fake.jSONTypeMutex.Unlock()
	fake.JSONTypeStub = stub
}

func (fake *FakeCmdable) JSONTypeArgsForCall(i int) (context.Context, string, string) {
	fake.jSONTypeMutex.RLock()
	defer fake.jSONTypeMutex.RUnlock()
	argsForCall := fake.jSONTypeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) JSONTypeReturns(result1 *redisa.JSONSliceCmd) {
	fake.jSONTypeMutex.Lock()
	defer fake.jSONTypeMutex.Unlock()
	fake.JSONTypeStub = nil
	fake.jSONTypeReturns = struct {
		result1 *redisa.JSONSliceCmd
	}{result1}
}

func (fake *FakeCmdable) JSONTypeReturnsOnCall(i int, result1 *redisa.JSONSliceCmd) {
	fake.jSONTypeMutex.Lock()
	defer fake.jSONTypeMutex.Unlock()
	fake.JSONTypeStub = nil
	if fake.jSONTypeReturnsOnCall == nil {
		fake.jSONTypeReturnsOnCall = make(map[int]struct {
			result1 *redisa.JSONSliceCmd
		})
	}
	fake.jSONTypeReturnsOnCall[i] = struct {
		result1 *redisa.JSONSliceCmd
	}{result1}
}

func (fake *FakeCmdable) Keys(arg1 context.Context, arg2 string) *redisa.StringSliceCmd {
	fake.keysMutex.Lock()
	ret, specificReturn := fake.keysReturnsOnCall[len(fake.keysArgsForCall)]
	fake.keysArgsForCall = append(fake.keysArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.KeysStub
	fakeReturns := fake.keysReturns
	fake.recordInvocation("Keys", []interface{}{arg1, arg2})
	fake.keysMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) KeysCallCount() int {
	fake.keysMutex.RLock()
	defer fake.keysMutex.RUnlock()
	return len(fake.keysArgsForCall)
}

func (fake *FakeCmdable) KeysCalls(stub func(context.Context, string) *redisa.StringSliceCmd) {
	fake.keysMutex.Lock()
	defer fake.keysMutex.Unlock()
	fake.KeysStub = stub
}

func (fake *FakeCmdable) KeysArgsForCall(i int) (context.Context, string) {
	fake.keysMutex.RLock()
	defer fake.keysMutex.RUnlock()
	argsForCall := fake.keysArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) KeysReturns(result1 *redisa.StringSliceCmd) {
	fake.keysMutex.Lock()
	defer fake.keysMutex.Unlock()
	fake.KeysStub = nil
	fake.keysReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) KeysReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.keysMutex.Lock()
	defer fake.keysMutex.Unlock()
	fake.KeysStub = nil
	if fake.keysReturnsOnCall == nil {
		fake.keysReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.keysReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) LCS(arg1 context.Context, arg2 *redisa.LCSQuery) *redisa.LCSCmd {
	fake.lCSMutex.Lock()
	ret, specificReturn := fake.lCSReturnsOnCall[len(fake.lCSArgsForCall)]
	fake.lCSArgsForCall = append(fake.lCSArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.LCSQuery
	}{arg1, arg2})
	stub := fake.LCSStub
	fakeReturns := fake.lCSReturns
	fake.recordInvocation("LCS", []interface{}{arg1, arg2})
	fake.lCSMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LCSCallCount() int {
	fake.lCSMutex.RLock()
	defer fake.lCSMutex.RUnlock()
	return len(fake.lCSArgsForCall)
}

func (fake *FakeCmdable) LCSCalls(stub func(context.Context, *redisa.LCSQuery) *redisa.LCSCmd) {
	fake.lCSMutex.Lock()
	defer fake.lCSMutex.Unlock()
	fake.LCSStub = stub
}

func (fake *FakeCmdable) LCSArgsForCall(i int) (context.Context, *redisa.LCSQuery) {
	fake.lCSMutex.RLock()
	defer fake.lCSMutex.RUnlock()
	argsForCall := fake.lCSArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) LCSReturns(result1 *redisa.LCSCmd) {
	fake.lCSMutex.Lock()
	defer fake.lCSMutex.Unlock()
	fake.LCSStub = nil
	fake.lCSReturns = struct {
		result1 *redisa.LCSCmd
	}{result1}
}

func (fake *FakeCmdable) LCSReturnsOnCall(i int, result1 *redisa.LCSCmd) {
	fake.lCSMutex.Lock()
	defer fake.lCSMutex.Unlock()
	fake.LCSStub = nil
	if fake.lCSReturnsOnCall == nil {
		fake.lCSReturnsOnCall = make(map[int]struct {
			result1 *redisa.LCSCmd
		})
	}
	fake.lCSReturnsOnCall[i] = struct {
		result1 *redisa.LCSCmd
	}{result1}
}

func (fake *FakeCmdable) LIndex(arg1 context.Context, arg2 string, arg3 int64) *redisa.StringCmd {
	fake.lIndexMutex.Lock()
	ret, specificReturn := fake.lIndexReturnsOnCall[len(fake.lIndexArgsForCall)]
	fake.lIndexArgsForCall = append(fake.lIndexArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.LIndexStub
	fakeReturns := fake.lIndexReturns
	fake.recordInvocation("LIndex", []interface{}{arg1, arg2, arg3})
	fake.lIndexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LIndexCallCount() int {
	fake.lIndexMutex.RLock()
	defer fake.lIndexMutex.RUnlock()
	return len(fake.lIndexArgsForCall)
}

func (fake *FakeCmdable) LIndexCalls(stub func(context.Context, string, int64) *redisa.StringCmd) {
	fake.lIndexMutex.Lock()
	defer fake.lIndexMutex.Unlock()
	fake.LIndexStub = stub
}

func (fake *FakeCmdable) LIndexArgsForCall(i int) (context.Context, string, int64) {
	fake.lIndexMutex.RLock()
	defer fake.lIndexMutex.RUnlock()
	argsForCall := fake.lIndexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) LIndexReturns(result1 *redisa.StringCmd) {
	fake.lIndexMutex.Lock()
	defer fake.lIndexMutex.Unlock()
	fake.LIndexStub = nil
	fake.lIndexReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) LIndexReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.lIndexMutex.Lock()
	defer fake.lIndexMutex.Unlock()
	fake.LIndexStub = nil
	if fake.lIndexReturnsOnCall == nil {
		fake.lIndexReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.lIndexReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) LInsert(arg1 context.Context, arg2 string, arg3 string, arg4 interface{}, arg5 interface{}) *redisa.IntCmd {
	fake.lInsertMutex.Lock()
	ret, specificReturn := fake.lInsertReturnsOnCall[len(fake.lInsertArgsForCall)]
	fake.lInsertArgsForCall = append(fake.lInsertArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 interface{}
		arg5 interface{}
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.LInsertStub
	fakeReturns := fake.lInsertReturns
	fake.recordInvocation("LInsert", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.lInsertMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LInsertCallCount() int {
	fake.lInsertMutex.RLock()
	defer fake.lInsertMutex.RUnlock()
	return len(fake.lInsertArgsForCall)
}

func (fake *FakeCmdable) LInsertCalls(stub func(context.Context, string, string, interface{}, interface{}) *redisa.IntCmd) {
	fake.lInsertMutex.Lock()
	defer fake.lInsertMutex.Unlock()
	fake.LInsertStub = stub
}

func (fake *FakeCmdable) LInsertArgsForCall(i int) (context.Context, string, string, interface{}, interface{}) {
	fake.lInsertMutex.RLock()
	defer fake.lInsertMutex.RUnlock()
	argsForCall := fake.lInsertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) LInsertReturns(result1 *redisa.IntCmd) {
	fake.lInsertMutex.Lock()
	defer fake.lInsertMutex.Unlock()
	fake.LInsertStub = nil
	fake.lInsertReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LInsertReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.lInsertMutex.Lock()
	defer fake.lInsertMutex.Unlock()
	fake.LInsertStub = nil
	if fake.lInsertReturnsOnCall == nil {
		fake.lInsertReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.lInsertReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LInsertAfter(arg1 context.Context, arg2 string, arg3 interface{}, arg4 interface{}) *redisa.IntCmd {
	fake.lInsertAfterMutex.Lock()
	ret, specificReturn := fake.lInsertAfterReturnsOnCall[len(fake.lInsertAfterArgsForCall)]
	fake.lInsertAfterArgsForCall = append(fake.lInsertAfterArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.LInsertAfterStub
	fakeReturns := fake.lInsertAfterReturns
	fake.recordInvocation("LInsertAfter", []interface{}{arg1, arg2, arg3, arg4})
	fake.lInsertAfterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LInsertAfterCallCount() int {
	fake.lInsertAfterMutex.RLock()
	defer fake.lInsertAfterMutex.RUnlock()
	return len(fake.lInsertAfterArgsForCall)
}

func (fake *FakeCmdable) LInsertAfterCalls(stub func(context.Context, string, interface{}, interface{}) *redisa.IntCmd) {
	fake.lInsertAfterMutex.Lock()
	defer fake.lInsertAfterMutex.Unlock()
	fake.LInsertAfterStub = stub
}

func (fake *FakeCmdable) LInsertAfterArgsForCall(i int) (context.Context, string, interface{}, interface{}) {
	fake.lInsertAfterMutex.RLock()
	defer fake.lInsertAfterMutex.RUnlock()
	argsForCall := fake.lInsertAfterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) LInsertAfterReturns(result1 *redisa.IntCmd) {
	fake.lInsertAfterMutex.Lock()
	defer fake.lInsertAfterMutex.Unlock()
	fake.LInsertAfterStub = nil
	fake.lInsertAfterReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LInsertAfterReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.lInsertAfterMutex.Lock()
	defer fake.lInsertAfterMutex.Unlock()
	fake.LInsertAfterStub = nil
	if fake.lInsertAfterReturnsOnCall == nil {
		fake.lInsertAfterReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.lInsertAfterReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LInsertBefore(arg1 context.Context, arg2 string, arg3 interface{}, arg4 interface{}) *redisa.IntCmd {
	fake.lInsertBeforeMutex.Lock()
	ret, specificReturn := fake.lInsertBeforeReturnsOnCall[len(fake.lInsertBeforeArgsForCall)]
	fake.lInsertBeforeArgsForCall = append(fake.lInsertBeforeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.LInsertBeforeStub
	fakeReturns := fake.lInsertBeforeReturns
	fake.recordInvocation("LInsertBefore", []interface{}{arg1, arg2, arg3, arg4})
	fake.lInsertBeforeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LInsertBeforeCallCount() int {
	fake.lInsertBeforeMutex.RLock()
	defer fake.lInsertBeforeMutex.RUnlock()
	return len(fake.lInsertBeforeArgsForCall)
}

func (fake *FakeCmdable) LInsertBeforeCalls(stub func(context.Context, string, interface{}, interface{}) *redisa.IntCmd) {
	fake.lInsertBeforeMutex.Lock()
	defer fake.lInsertBeforeMutex.Unlock()
	fake.LInsertBeforeStub = stub
}

func (fake *FakeCmdable) LInsertBeforeArgsForCall(i int) (context.Context, string, interface{}, interface{}) {
	fake.lInsertBeforeMutex.RLock()
	defer fake.lInsertBeforeMutex.RUnlock()
	argsForCall := fake.lInsertBeforeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) LInsertBeforeReturns(result1 *redisa.IntCmd) {
	fake.lInsertBeforeMutex.Lock()
	defer fake.lInsertBeforeMutex.Unlock()
	fake.LInsertBeforeStub = nil
	fake.lInsertBeforeReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LInsertBeforeReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.lInsertBeforeMutex.Lock()
	defer fake.lInsertBeforeMutex.Unlock()
	fake.LInsertBeforeStub = nil
	if fake.lInsertBeforeReturnsOnCall == nil {
		fake.lInsertBeforeReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.lInsertBeforeReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LLen(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.lLenMutex.Lock()
	ret, specificReturn := fake.lLenReturnsOnCall[len(fake.lLenArgsForCall)]
	fake.lLenArgsForCall = append(fake.lLenArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.LLenStub
	fakeReturns := fake.lLenReturns
	fake.recordInvocation("LLen", []interface{}{arg1, arg2})
	fake.lLenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LLenCallCount() int {
	fake.lLenMutex.RLock()
	defer fake.lLenMutex.RUnlock()
	return len(fake.lLenArgsForCall)
}

func (fake *FakeCmdable) LLenCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.lLenMutex.Lock()
	defer fake.lLenMutex.Unlock()
	fake.LLenStub = stub
}

func (fake *FakeCmdable) LLenArgsForCall(i int) (context.Context, string) {
	fake.lLenMutex.RLock()
	defer fake.lLenMutex.RUnlock()
	argsForCall := fake.lLenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) LLenReturns(result1 *redisa.IntCmd) {
	fake.lLenMutex.Lock()
	defer fake.lLenMutex.Unlock()
	fake.LLenStub = nil
	fake.lLenReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LLenReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.lLenMutex.Lock()
	defer fake.lLenMutex.Unlock()
	fake.LLenStub = nil
	if fake.lLenReturnsOnCall == nil {
		fake.lLenReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.lLenReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LMPop(arg1 context.Context, arg2 string, arg3 int64, arg4 ...string) *redisa.KeyValuesCmd {
	fake.lMPopMutex.Lock()
	ret, specificReturn := fake.lMPopReturnsOnCall[len(fake.lMPopArgsForCall)]
	fake.lMPopArgsForCall = append(fake.lMPopArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	stub := fake.LMPopStub
	fakeReturns := fake.lMPopReturns
	fake.recordInvocation("LMPop", []interface{}{arg1, arg2, arg3, arg4})
	fake.lMPopMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LMPopCallCount() int {
	fake.lMPopMutex.RLock()
	defer fake.lMPopMutex.RUnlock()
	return len(fake.lMPopArgsForCall)
}

func (fake *FakeCmdable) LMPopCalls(stub func(context.Context, string, int64, ...string) *redisa.KeyValuesCmd) {
	fake.lMPopMutex.Lock()
	defer fake.lMPopMutex.Unlock()
	fake.LMPopStub = stub
}

func (fake *FakeCmdable) LMPopArgsForCall(i int) (context.Context, string, int64, []string) {
	fake.lMPopMutex.RLock()
	defer fake.lMPopMutex.RUnlock()
	argsForCall := fake.lMPopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) LMPopReturns(result1 *redisa.KeyValuesCmd) {
	fake.lMPopMutex.Lock()
	defer fake.lMPopMutex.Unlock()
	fake.LMPopStub = nil
	fake.lMPopReturns = struct {
		result1 *redisa.KeyValuesCmd
	}{result1}
}

func (fake *FakeCmdable) LMPopReturnsOnCall(i int, result1 *redisa.KeyValuesCmd) {
	fake.lMPopMutex.Lock()
	defer fake.lMPopMutex.Unlock()
	fake.LMPopStub = nil
	if fake.lMPopReturnsOnCall == nil {
		fake.lMPopReturnsOnCall = make(map[int]struct {
			result1 *redisa.KeyValuesCmd
		})
	}
	fake.lMPopReturnsOnCall[i] = struct {
		result1 *redisa.KeyValuesCmd
	}{result1}
}

func (fake *FakeCmdable) LMove(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 string) *redisa.StringCmd {
	fake.lMoveMutex.Lock()
	ret, specificReturn := fake.lMoveReturnsOnCall[len(fake.lMoveArgsForCall)]
	fake.lMoveArgsForCall = append(fake.lMoveArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.LMoveStub
	fakeReturns := fake.lMoveReturns
	fake.recordInvocation("LMove", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.lMoveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LMoveCallCount() int {
	fake.lMoveMutex.RLock()
	defer fake.lMoveMutex.RUnlock()
	return len(fake.lMoveArgsForCall)
}

func (fake *FakeCmdable) LMoveCalls(stub func(context.Context, string, string, string, string) *redisa.StringCmd) {
	fake.lMoveMutex.Lock()
	defer fake.lMoveMutex.Unlock()
	fake.LMoveStub = stub
}

func (fake *FakeCmdable) LMoveArgsForCall(i int) (context.Context, string, string, string, string) {
	fake.lMoveMutex.RLock()
	defer fake.lMoveMutex.RUnlock()
	argsForCall := fake.lMoveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) LMoveReturns(result1 *redisa.StringCmd) {
	fake.lMoveMutex.Lock()
	defer fake.lMoveMutex.Unlock()
	fake.LMoveStub = nil
	fake.lMoveReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) LMoveReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.lMoveMutex.Lock()
	defer fake.lMoveMutex.Unlock()
	fake.LMoveStub = nil
	if fake.lMoveReturnsOnCall == nil {
		fake.lMoveReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.lMoveReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) LPop(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.lPopMutex.Lock()
	ret, specificReturn := fake.lPopReturnsOnCall[len(fake.lPopArgsForCall)]
	fake.lPopArgsForCall = append(fake.lPopArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.LPopStub
	fakeReturns := fake.lPopReturns
	fake.recordInvocation("LPop", []interface{}{arg1, arg2})
	fake.lPopMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LPopCallCount() int {
	fake.lPopMutex.RLock()
	defer fake.lPopMutex.RUnlock()
	return len(fake.lPopArgsForCall)
}

func (fake *FakeCmdable) LPopCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.lPopMutex.Lock()
	defer fake.lPopMutex.Unlock()
	fake.LPopStub = stub
}

func (fake *FakeCmdable) LPopArgsForCall(i int) (context.Context, string) {
	fake.lPopMutex.RLock()
	defer fake.lPopMutex.RUnlock()
	argsForCall := fake.lPopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) LPopReturns(result1 *redisa.StringCmd) {
	fake.lPopMutex.Lock()
	defer fake.lPopMutex.Unlock()
	fake.LPopStub = nil
	fake.lPopReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) LPopReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.lPopMutex.Lock()
	defer fake.lPopMutex.Unlock()
	fake.LPopStub = nil
	if fake.lPopReturnsOnCall == nil {
		fake.lPopReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.lPopReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) LPopCount(arg1 context.Context, arg2 string, arg3 int) *redisa.StringSliceCmd {
	fake.lPopCountMutex.Lock()
	ret, specificReturn := fake.lPopCountReturnsOnCall[len(fake.lPopCountArgsForCall)]
	fake.lPopCountArgsForCall = append(fake.lPopCountArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.LPopCountStub
	fakeReturns := fake.lPopCountReturns
	fake.recordInvocation("LPopCount", []interface{}{arg1, arg2, arg3})
	fake.lPopCountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LPopCountCallCount() int {
	fake.lPopCountMutex.RLock()
	defer fake.lPopCountMutex.RUnlock()
	return len(fake.lPopCountArgsForCall)
}

func (fake *FakeCmdable) LPopCountCalls(stub func(context.Context, string, int) *redisa.StringSliceCmd) {
	fake.lPopCountMutex.Lock()
	defer fake.lPopCountMutex.Unlock()
	fake.LPopCountStub = stub
}

func (fake *FakeCmdable) LPopCountArgsForCall(i int) (context.Context, string, int) {
	fake.lPopCountMutex.RLock()
	defer fake.lPopCountMutex.RUnlock()
	argsForCall := fake.lPopCountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) LPopCountReturns(result1 *redisa.StringSliceCmd) {
	fake.lPopCountMutex.Lock()
	defer fake.lPopCountMutex.Unlock()
	fake.LPopCountStub = nil
	fake.lPopCountReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) LPopCountReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.lPopCountMutex.Lock()
	defer fake.lPopCountMutex.Unlock()
	fake.LPopCountStub = nil
	if fake.lPopCountReturnsOnCall == nil {
		fake.lPopCountReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.lPopCountReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) LPos(arg1 context.Context, arg2 string, arg3 string, arg4 redisa.LPosArgs) *redisa.IntCmd {
	fake.lPosMutex.Lock()
	ret, specificReturn := fake.lPosReturnsOnCall[len(fake.lPosArgsForCall)]
	fake.lPosArgsForCall = append(fake.lPosArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 redisa.LPosArgs
	}{arg1, arg2, arg3, arg4})
	stub := fake.LPosStub
	fakeReturns := fake.lPosReturns
	fake.recordInvocation("LPos", []interface{}{arg1, arg2, arg3, arg4})
	fake.lPosMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LPosCallCount() int {
	fake.lPosMutex.RLock()
	defer fake.lPosMutex.RUnlock()
	return len(fake.lPosArgsForCall)
}

func (fake *FakeCmdable) LPosCalls(stub func(context.Context, string, string, redisa.LPosArgs) *redisa.IntCmd) {
	fake.lPosMutex.Lock()
	defer fake.lPosMutex.Unlock()
	fake.LPosStub = stub
}

func (fake *FakeCmdable) LPosArgsForCall(i int) (context.Context, string, string, redisa.LPosArgs) {
	fake.lPosMutex.RLock()
	defer fake.lPosMutex.RUnlock()
	argsForCall := fake.lPosArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) LPosReturns(result1 *redisa.IntCmd) {
	fake.lPosMutex.Lock()
	defer fake.lPosMutex.Unlock()
	fake.LPosStub = nil
	fake.lPosReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LPosReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.lPosMutex.Lock()
	defer fake.lPosMutex.Unlock()
	fake.LPosStub = nil
	if fake.lPosReturnsOnCall == nil {
		fake.lPosReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.lPosReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LPosCount(arg1 context.Context, arg2 string, arg3 string, arg4 int64, arg5 redisa.LPosArgs) *redisa.IntSliceCmd {
	fake.lPosCountMutex.Lock()
	ret, specificReturn := fake.lPosCountReturnsOnCall[len(fake.lPosCountArgsForCall)]
	fake.lPosCountArgsForCall = append(fake.lPosCountArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
		arg5 redisa.LPosArgs
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.LPosCountStub
	fakeReturns := fake.lPosCountReturns
	fake.recordInvocation("LPosCount", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.lPosCountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LPosCountCallCount() int {
	fake.lPosCountMutex.RLock()
	defer fake.lPosCountMutex.RUnlock()
	return len(fake.lPosCountArgsForCall)
}

func (fake *FakeCmdable) LPosCountCalls(stub func(context.Context, string, string, int64, redisa.LPosArgs) *redisa.IntSliceCmd) {
	fake.lPosCountMutex.Lock()
	defer fake.lPosCountMutex.Unlock()
	fake.LPosCountStub = stub
}

func (fake *FakeCmdable) LPosCountArgsForCall(i int) (context.Context, string, string, int64, redisa.LPosArgs) {
	fake.lPosCountMutex.RLock()
	defer fake.lPosCountMutex.RUnlock()
	argsForCall := fake.lPosCountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) LPosCountReturns(result1 *redisa.IntSliceCmd) {
	fake.lPosCountMutex.Lock()
	defer fake.lPosCountMutex.Unlock()
	fake.LPosCountStub = nil
	fake.lPosCountReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) LPosCountReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.lPosCountMutex.Lock()
	defer fake.lPosCountMutex.Unlock()
	fake.LPosCountStub = nil
	if fake.lPosCountReturnsOnCall == nil {
		fake.lPosCountReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.lPosCountReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) LPush(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntCmd {
	fake.lPushMutex.Lock()
	ret, specificReturn := fake.lPushReturnsOnCall[len(fake.lPushArgsForCall)]
	fake.lPushArgsForCall = append(fake.lPushArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.LPushStub
	fakeReturns := fake.lPushReturns
	fake.recordInvocation("LPush", []interface{}{arg1, arg2, arg3})
	fake.lPushMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LPushCallCount() int {
	fake.lPushMutex.RLock()
	defer fake.lPushMutex.RUnlock()
	return len(fake.lPushArgsForCall)
}

func (fake *FakeCmdable) LPushCalls(stub func(context.Context, string, ...interface{}) *redisa.IntCmd) {
	fake.lPushMutex.Lock()
	defer fake.lPushMutex.Unlock()
	fake.LPushStub = stub
}

func (fake *FakeCmdable) LPushArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.lPushMutex.RLock()
	defer fake.lPushMutex.RUnlock()
	argsForCall := fake.lPushArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) LPushReturns(result1 *redisa.IntCmd) {
	fake.lPushMutex.Lock()
	defer fake.lPushMutex.Unlock()
	fake.LPushStub = nil
	fake.lPushReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LPushReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.lPushMutex.Lock()
	defer fake.lPushMutex.Unlock()
	fake.LPushStub = nil
	if fake.lPushReturnsOnCall == nil {
		fake.lPushReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.lPushReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LPushX(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntCmd {
	fake.lPushXMutex.Lock()
	ret, specificReturn := fake.lPushXReturnsOnCall[len(fake.lPushXArgsForCall)]
	fake.lPushXArgsForCall = append(fake.lPushXArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.LPushXStub
	fakeReturns := fake.lPushXReturns
	fake.recordInvocation("LPushX", []interface{}{arg1, arg2, arg3})
	fake.lPushXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LPushXCallCount() int {
	fake.lPushXMutex.RLock()
	defer fake.lPushXMutex.RUnlock()
	return len(fake.lPushXArgsForCall)
}

func (fake *FakeCmdable) LPushXCalls(stub func(context.Context, string, ...interface{}) *redisa.IntCmd) {
	fake.lPushXMutex.Lock()
	defer fake.lPushXMutex.Unlock()
	fake.LPushXStub = stub
}

func (fake *FakeCmdable) LPushXArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.lPushXMutex.RLock()
	defer fake.lPushXMutex.RUnlock()
	argsForCall := fake.lPushXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) LPushXReturns(result1 *redisa.IntCmd) {
	fake.lPushXMutex.Lock()
	defer fake.lPushXMutex.Unlock()
	fake.LPushXStub = nil
	fake.lPushXReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LPushXReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.lPushXMutex.Lock()
	defer fake.lPushXMutex.Unlock()
	fake.LPushXStub = nil
	if fake.lPushXReturnsOnCall == nil {
		fake.lPushXReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.lPushXReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LRange(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.StringSliceCmd {
	fake.lRangeMutex.Lock()
	ret, specificReturn := fake.lRangeReturnsOnCall[len(fake.lRangeArgsForCall)]
	fake.lRangeArgsForCall = append(fake.lRangeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.LRangeStub
	fakeReturns := fake.lRangeReturns
	fake.recordInvocation("LRange", []interface{}{arg1, arg2, arg3, arg4})
	fake.lRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LRangeCallCount() int {
	fake.lRangeMutex.RLock()
	defer fake.lRangeMutex.RUnlock()
	return len(fake.lRangeArgsForCall)
}

func (fake *FakeCmdable) LRangeCalls(stub func(context.Context, string, int64, int64) *redisa.StringSliceCmd) {
	fake.lRangeMutex.Lock()
	defer fake.lRangeMutex.Unlock()
	fake.LRangeStub = stub
}

func (fake *FakeCmdable) LRangeArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.lRangeMutex.RLock()
	defer fake.lRangeMutex.RUnlock()
	argsForCall := fake.lRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) LRangeReturns(result1 *redisa.StringSliceCmd) {
	fake.lRangeMutex.Lock()
	defer fake.lRangeMutex.Unlock()
	fake.LRangeStub = nil
	fake.lRangeReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) LRangeReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.lRangeMutex.Lock()
	defer fake.lRangeMutex.Unlock()
	fake.LRangeStub = nil
	if fake.lRangeReturnsOnCall == nil {
		fake.lRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.lRangeReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) LRem(arg1 context.Context, arg2 string, arg3 int64, arg4 interface{}) *redisa.IntCmd {
	fake.lRemMutex.Lock()
	ret, specificReturn := fake.lRemReturnsOnCall[len(fake.lRemArgsForCall)]
	fake.lRemArgsForCall = append(fake.lRemArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.LRemStub
	fakeReturns := fake.lRemReturns
	fake.recordInvocation("LRem", []interface{}{arg1, arg2, arg3, arg4})
	fake.lRemMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LRemCallCount() int {
	fake.lRemMutex.RLock()
	defer fake.lRemMutex.RUnlock()
	return len(fake.lRemArgsForCall)
}

func (fake *FakeCmdable) LRemCalls(stub func(context.Context, string, int64, interface{}) *redisa.IntCmd) {
	fake.lRemMutex.Lock()
	defer fake.lRemMutex.Unlock()
	fake.LRemStub = stub
}

func (fake *FakeCmdable) LRemArgsForCall(i int) (context.Context, string, int64, interface{}) {
	fake.lRemMutex.RLock()
	defer fake.lRemMutex.RUnlock()
	argsForCall := fake.lRemArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) LRemReturns(result1 *redisa.IntCmd) {
	fake.lRemMutex.Lock()
	defer fake.lRemMutex.Unlock()
	fake.LRemStub = nil
	fake.lRemReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LRemReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.lRemMutex.Lock()
	defer fake.lRemMutex.Unlock()
	fake.LRemStub = nil
	if fake.lRemReturnsOnCall == nil {
		fake.lRemReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.lRemReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LSet(arg1 context.Context, arg2 string, arg3 int64, arg4 interface{}) *redisa.StatusCmd {
	fake.lSetMutex.Lock()
	ret, specificReturn := fake.lSetReturnsOnCall[len(fake.lSetArgsForCall)]
	fake.lSetArgsForCall = append(fake.lSetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.LSetStub
	fakeReturns := fake.lSetReturns
	fake.recordInvocation("LSet", []interface{}{arg1, arg2, arg3, arg4})
	fake.lSetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LSetCallCount() int {
	fake.lSetMutex.RLock()
	defer fake.lSetMutex.RUnlock()
	return len(fake.lSetArgsForCall)
}

func (fake *FakeCmdable) LSetCalls(stub func(context.Context, string, int64, interface{}) *redisa.StatusCmd) {
	fake.lSetMutex.Lock()
	defer fake.lSetMutex.Unlock()
	fake.LSetStub = stub
}

func (fake *FakeCmdable) LSetArgsForCall(i int) (context.Context, string, int64, interface{}) {
	fake.lSetMutex.RLock()
	defer fake.lSetMutex.RUnlock()
	argsForCall := fake.lSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) LSetReturns(result1 *redisa.StatusCmd) {
	fake.lSetMutex.Lock()
	defer fake.lSetMutex.Unlock()
	fake.LSetStub = nil
	fake.lSetReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) LSetReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.lSetMutex.Lock()
	defer fake.lSetMutex.Unlock()
	fake.LSetStub = nil
	if fake.lSetReturnsOnCall == nil {
		fake.lSetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.lSetReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) LTrim(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.StatusCmd {
	fake.lTrimMutex.Lock()
	ret, specificReturn := fake.lTrimReturnsOnCall[len(fake.lTrimArgsForCall)]
	fake.lTrimArgsForCall = append(fake.lTrimArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.LTrimStub
	fakeReturns := fake.lTrimReturns
	fake.recordInvocation("LTrim", []interface{}{arg1, arg2, arg3, arg4})
	fake.lTrimMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LTrimCallCount() int {
	fake.lTrimMutex.RLock()
	defer fake.lTrimMutex.RUnlock()
	return len(fake.lTrimArgsForCall)
}

func (fake *FakeCmdable) LTrimCalls(stub func(context.Context, string, int64, int64) *redisa.StatusCmd) {
	fake.lTrimMutex.Lock()
	defer fake.lTrimMutex.Unlock()
	fake.LTrimStub = stub
}

func (fake *FakeCmdable) LTrimArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.lTrimMutex.RLock()
	defer fake.lTrimMutex.RUnlock()
	argsForCall := fake.lTrimArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) LTrimReturns(result1 *redisa.StatusCmd) {
	fake.lTrimMutex.Lock()
	defer fake.lTrimMutex.Unlock()
	fake.LTrimStub = nil
	fake.lTrimReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) LTrimReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.lTrimMutex.Lock()
	defer fake.lTrimMutex.Unlock()
	fake.LTrimStub = nil
	if fake.lTrimReturnsOnCall == nil {
		fake.lTrimReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.lTrimReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) LastSave(arg1 context.Context) *redisa.IntCmd {
	fake.lastSaveMutex.Lock()
	ret, specificReturn := fake.lastSaveReturnsOnCall[len(fake.lastSaveArgsForCall)]
	fake.lastSaveArgsForCall = append(fake.lastSaveArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.LastSaveStub
	fakeReturns := fake.lastSaveReturns
	fake.recordInvocation("LastSave", []interface{}{arg1})
	fake.lastSaveMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) LastSaveCallCount() int {
	fake.lastSaveMutex.RLock()
	defer fake.lastSaveMutex.RUnlock()
	return len(fake.lastSaveArgsForCall)
}

func (fake *FakeCmdable) LastSaveCalls(stub func(context.Context) *redisa.IntCmd) {
	fake.lastSaveMutex.Lock()
	defer fake.lastSaveMutex.Unlock()
	fake.LastSaveStub = stub
}

func (fake *FakeCmdable) LastSaveArgsForCall(i int) context.Context {
	fake.lastSaveMutex.RLock()
	defer fake.lastSaveMutex.RUnlock()
	argsForCall := fake.lastSaveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) LastSaveReturns(result1 *redisa.IntCmd) {
	fake.lastSaveMutex.Lock()
	defer fake.lastSaveMutex.Unlock()
	fake.LastSaveStub = nil
	fake.lastSaveReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) LastSaveReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.lastSaveMutex.Lock()
	defer fake.lastSaveMutex.Unlock()
	fake.LastSaveStub = nil
	if fake.lastSaveReturnsOnCall == nil {
		fake.lastSaveReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.lastSaveReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) MGet(arg1 context.Context, arg2 ...string) *redisa.SliceCmd {
	fake.mGetMutex.Lock()
	ret, specificReturn := fake.mGetReturnsOnCall[len(fake.mGetArgsForCall)]
	fake.mGetArgsForCall = append(fake.mGetArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.MGetStub
	fakeReturns := fake.mGetReturns
	fake.recordInvocation("MGet", []interface{}{arg1, arg2})
	fake.mGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) MGetCallCount() int {
	fake.mGetMutex.RLock()
	defer fake.mGetMutex.RUnlock()
	return len(fake.mGetArgsForCall)
}

func (fake *FakeCmdable) MGetCalls(stub func(context.Context, ...string) *redisa.SliceCmd) {
	fake.mGetMutex.Lock()
	defer fake.mGetMutex.Unlock()
	fake.MGetStub = stub
}

func (fake *FakeCmdable) MGetArgsForCall(i int) (context.Context, []string) {
	fake.mGetMutex.RLock()
	defer fake.mGetMutex.RUnlock()
	argsForCall := fake.mGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) MGetReturns(result1 *redisa.SliceCmd) {
	fake.mGetMutex.Lock()
	defer fake.mGetMutex.Unlock()
	fake.MGetStub = nil
	fake.mGetReturns = struct {
		result1 *redisa.SliceCmd
	}{result1}
}

func (fake *FakeCmdable) MGetReturnsOnCall(i int, result1 *redisa.SliceCmd) {
	fake.mGetMutex.Lock()
	defer fake.mGetMutex.Unlock()
	fake.MGetStub = nil
	if fake.mGetReturnsOnCall == nil {
		fake.mGetReturnsOnCall = make(map[int]struct {
			result1 *redisa.SliceCmd
		})
	}
	fake.mGetReturnsOnCall[i] = struct {
		result1 *redisa.SliceCmd
	}{result1}
}

func (fake *FakeCmdable) MSet(arg1 context.Context, arg2 ...interface{}) *redisa.StatusCmd {
	fake.mSetMutex.Lock()
	ret, specificReturn := fake.mSetReturnsOnCall[len(fake.mSetArgsForCall)]
	fake.mSetArgsForCall = append(fake.mSetArgsForCall, struct {
		arg1 context.Context
		arg2 []interface{}
	}{arg1, arg2})
	stub := fake.MSetStub
	fakeReturns := fake.mSetReturns
	fake.recordInvocation("MSet", []interface{}{arg1, arg2})
	fake.mSetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) MSetCallCount() int {
	fake.mSetMutex.RLock()
	defer fake.mSetMutex.RUnlock()
	return len(fake.mSetArgsForCall)
}

func (fake *FakeCmdable) MSetCalls(stub func(context.Context, ...interface{}) *redisa.StatusCmd) {
	fake.mSetMutex.Lock()
	defer fake.mSetMutex.Unlock()
	fake.MSetStub = stub
}

func (fake *FakeCmdable) MSetArgsForCall(i int) (context.Context, []interface{}) {
	fake.mSetMutex.RLock()
	defer fake.mSetMutex.RUnlock()
	argsForCall := fake.mSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) MSetReturns(result1 *redisa.StatusCmd) {
	fake.mSetMutex.Lock()
	defer fake.mSetMutex.Unlock()
	fake.MSetStub = nil
	fake.mSetReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) MSetReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.mSetMutex.Lock()
	defer fake.mSetMutex.Unlock()
	fake.MSetStub = nil
	if fake.mSetReturnsOnCall == nil {
		fake.mSetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.mSetReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) MSetNX(arg1 context.Context, arg2 ...interface{}) *redisa.BoolCmd {
	fake.mSetNXMutex.Lock()
	ret, specificReturn := fake.mSetNXReturnsOnCall[len(fake.mSetNXArgsForCall)]
	fake.mSetNXArgsForCall = append(fake.mSetNXArgsForCall, struct {
		arg1 context.Context
		arg2 []interface{}
	}{arg1, arg2})
	stub := fake.MSetNXStub
	fakeReturns := fake.mSetNXReturns
	fake.recordInvocation("MSetNX", []interface{}{arg1, arg2})
	fake.mSetNXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) MSetNXCallCount() int {
	fake.mSetNXMutex.RLock()
	defer fake.mSetNXMutex.RUnlock()
	return len(fake.mSetNXArgsForCall)
}

func (fake *FakeCmdable) MSetNXCalls(stub func(context.Context, ...interface{}) *redisa.BoolCmd) {
	fake.mSetNXMutex.Lock()
	defer fake.mSetNXMutex.Unlock()
	fake.MSetNXStub = stub
}

func (fake *FakeCmdable) MSetNXArgsForCall(i int) (context.Context, []interface{}) {
	fake.mSetNXMutex.RLock()
	defer fake.mSetNXMutex.RUnlock()
	argsForCall := fake.mSetNXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) MSetNXReturns(result1 *redisa.BoolCmd) {
	fake.mSetNXMutex.Lock()
	defer fake.mSetNXMutex.Unlock()
	fake.MSetNXStub = nil
	fake.mSetNXReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) MSetNXReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.mSetNXMutex.Lock()
	defer fake.mSetNXMutex.Unlock()
	fake.MSetNXStub = nil
	if fake.mSetNXReturnsOnCall == nil {
		fake.mSetNXReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.mSetNXReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) MemoryUsage(arg1 context.Context, arg2 string, arg3 ...int) *redisa.IntCmd {
	fake.memoryUsageMutex.Lock()
	ret, specificReturn := fake.memoryUsageReturnsOnCall[len(fake.memoryUsageArgsForCall)]
	fake.memoryUsageArgsForCall = append(fake.memoryUsageArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []int
	}{arg1, arg2, arg3})
	stub := fake.MemoryUsageStub
	fakeReturns := fake.memoryUsageReturns
	fake.recordInvocation("MemoryUsage", []interface{}{arg1, arg2, arg3})
	fake.memoryUsageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) MemoryUsageCallCount() int {
	fake.memoryUsageMutex.RLock()
	defer fake.memoryUsageMutex.RUnlock()
	return len(fake.memoryUsageArgsForCall)
}

func (fake *FakeCmdable) MemoryUsageCalls(stub func(context.Context, string, ...int) *redisa.IntCmd) {
	fake.memoryUsageMutex.Lock()
	defer fake.memoryUsageMutex.Unlock()
	fake.MemoryUsageStub = stub
}

func (fake *FakeCmdable) MemoryUsageArgsForCall(i int) (context.Context, string, []int) {
	fake.memoryUsageMutex.RLock()
	defer fake.memoryUsageMutex.RUnlock()
	argsForCall := fake.memoryUsageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) MemoryUsageReturns(result1 *redisa.IntCmd) {
	fake.memoryUsageMutex.Lock()
	defer fake.memoryUsageMutex.Unlock()
	fake.MemoryUsageStub = nil
	fake.memoryUsageReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) MemoryUsageReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.memoryUsageMutex.Lock()
	defer fake.memoryUsageMutex.Unlock()
	fake.MemoryUsageStub = nil
	if fake.memoryUsageReturnsOnCall == nil {
		fake.memoryUsageReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.memoryUsageReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) Migrate(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 int, arg6 time.Duration) *redisa.StatusCmd {
	fake.migrateMutex.Lock()
	ret, specificReturn := fake.migrateReturnsOnCall[len(fake.migrateArgsForCall)]
	fake.migrateArgsForCall = append(fake.migrateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 int
		arg6 time.Duration
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.MigrateStub
	fakeReturns := fake.migrateReturns
	fake.recordInvocation("Migrate", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.migrateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) MigrateCallCount() int {
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	return len(fake.migrateArgsForCall)
}

func (fake *FakeCmdable) MigrateCalls(stub func(context.Context, string, string, string, int, time.Duration) *redisa.StatusCmd) {
	fake.migrateMutex.Lock()
	defer fake.migrateMutex.Unlock()
	fake.MigrateStub = stub
}

func (fake *FakeCmdable) MigrateArgsForCall(i int) (context.Context, string, string, string, int, time.Duration) {
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	argsForCall := fake.migrateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeCmdable) MigrateReturns(result1 *redisa.StatusCmd) {
	fake.migrateMutex.Lock()
	defer fake.migrateMutex.Unlock()
	fake.MigrateStub = nil
	fake.migrateReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) MigrateReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.migrateMutex.Lock()
	defer fake.migrateMutex.Unlock()
	fake.MigrateStub = nil
	if fake.migrateReturnsOnCall == nil {
		fake.migrateReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.migrateReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ModuleLoadex(arg1 context.Context, arg2 *redisa.ModuleLoadexConfig) *redisa.StringCmd {
	fake.moduleLoadexMutex.Lock()
	ret, specificReturn := fake.moduleLoadexReturnsOnCall[len(fake.moduleLoadexArgsForCall)]
	fake.moduleLoadexArgsForCall = append(fake.moduleLoadexArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.ModuleLoadexConfig
	}{arg1, arg2})
	stub := fake.ModuleLoadexStub
	fakeReturns := fake.moduleLoadexReturns
	fake.recordInvocation("ModuleLoadex", []interface{}{arg1, arg2})
	fake.moduleLoadexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ModuleLoadexCallCount() int {
	fake.moduleLoadexMutex.RLock()
	defer fake.moduleLoadexMutex.RUnlock()
	return len(fake.moduleLoadexArgsForCall)
}

func (fake *FakeCmdable) ModuleLoadexCalls(stub func(context.Context, *redisa.ModuleLoadexConfig) *redisa.StringCmd) {
	fake.moduleLoadexMutex.Lock()
	defer fake.moduleLoadexMutex.Unlock()
	fake.ModuleLoadexStub = stub
}

func (fake *FakeCmdable) ModuleLoadexArgsForCall(i int) (context.Context, *redisa.ModuleLoadexConfig) {
	fake.moduleLoadexMutex.RLock()
	defer fake.moduleLoadexMutex.RUnlock()
	argsForCall := fake.moduleLoadexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ModuleLoadexReturns(result1 *redisa.StringCmd) {
	fake.moduleLoadexMutex.Lock()
	defer fake.moduleLoadexMutex.Unlock()
	fake.ModuleLoadexStub = nil
	fake.moduleLoadexReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ModuleLoadexReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.moduleLoadexMutex.Lock()
	defer fake.moduleLoadexMutex.Unlock()
	fake.ModuleLoadexStub = nil
	if fake.moduleLoadexReturnsOnCall == nil {
		fake.moduleLoadexReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.moduleLoadexReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) Move(arg1 context.Context, arg2 string, arg3 int) *redisa.BoolCmd {
	fake.moveMutex.Lock()
	ret, specificReturn := fake.moveReturnsOnCall[len(fake.moveArgsForCall)]
	fake.moveArgsForCall = append(fake.moveArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.MoveStub
	fakeReturns := fake.moveReturns
	fake.recordInvocation("Move", []interface{}{arg1, arg2, arg3})
	fake.moveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) MoveCallCount() int {
	fake.moveMutex.RLock()
	defer fake.moveMutex.RUnlock()
	return len(fake.moveArgsForCall)
}

func (fake *FakeCmdable) MoveCalls(stub func(context.Context, string, int) *redisa.BoolCmd) {
	fake.moveMutex.Lock()
	defer fake.moveMutex.Unlock()
	fake.MoveStub = stub
}

func (fake *FakeCmdable) MoveArgsForCall(i int) (context.Context, string, int) {
	fake.moveMutex.RLock()
	defer fake.moveMutex.RUnlock()
	argsForCall := fake.moveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) MoveReturns(result1 *redisa.BoolCmd) {
	fake.moveMutex.Lock()
	defer fake.moveMutex.Unlock()
	fake.MoveStub = nil
	fake.moveReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) MoveReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.moveMutex.Lock()
	defer fake.moveMutex.Unlock()
	fake.MoveStub = nil
	if fake.moveReturnsOnCall == nil {
		fake.moveReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.moveReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) ObjectEncoding(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.objectEncodingMutex.Lock()
	ret, specificReturn := fake.objectEncodingReturnsOnCall[len(fake.objectEncodingArgsForCall)]
	fake.objectEncodingArgsForCall = append(fake.objectEncodingArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ObjectEncodingStub
	fakeReturns := fake.objectEncodingReturns
	fake.recordInvocation("ObjectEncoding", []interface{}{arg1, arg2})
	fake.objectEncodingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ObjectEncodingCallCount() int {
	fake.objectEncodingMutex.RLock()
	defer fake.objectEncodingMutex.RUnlock()
	return len(fake.objectEncodingArgsForCall)
}

func (fake *FakeCmdable) ObjectEncodingCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.objectEncodingMutex.Lock()
	defer fake.objectEncodingMutex.Unlock()
	fake.ObjectEncodingStub = stub
}

func (fake *FakeCmdable) ObjectEncodingArgsForCall(i int) (context.Context, string) {
	fake.objectEncodingMutex.RLock()
	defer fake.objectEncodingMutex.RUnlock()
	argsForCall := fake.objectEncodingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ObjectEncodingReturns(result1 *redisa.StringCmd) {
	fake.objectEncodingMutex.Lock()
	defer fake.objectEncodingMutex.Unlock()
	fake.ObjectEncodingStub = nil
	fake.objectEncodingReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ObjectEncodingReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.objectEncodingMutex.Lock()
	defer fake.objectEncodingMutex.Unlock()
	fake.ObjectEncodingStub = nil
	if fake.objectEncodingReturnsOnCall == nil {
		fake.objectEncodingReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.objectEncodingReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ObjectFreq(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.objectFreqMutex.Lock()
	ret, specificReturn := fake.objectFreqReturnsOnCall[len(fake.objectFreqArgsForCall)]
	fake.objectFreqArgsForCall = append(fake.objectFreqArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ObjectFreqStub
	fakeReturns := fake.objectFreqReturns
	fake.recordInvocation("ObjectFreq", []interface{}{arg1, arg2})
	fake.objectFreqMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ObjectFreqCallCount() int {
	fake.objectFreqMutex.RLock()
	defer fake.objectFreqMutex.RUnlock()
	return len(fake.objectFreqArgsForCall)
}

func (fake *FakeCmdable) ObjectFreqCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.objectFreqMutex.Lock()
	defer fake.objectFreqMutex.Unlock()
	fake.ObjectFreqStub = stub
}

func (fake *FakeCmdable) ObjectFreqArgsForCall(i int) (context.Context, string) {
	fake.objectFreqMutex.RLock()
	defer fake.objectFreqMutex.RUnlock()
	argsForCall := fake.objectFreqArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ObjectFreqReturns(result1 *redisa.IntCmd) {
	fake.objectFreqMutex.Lock()
	defer fake.objectFreqMutex.Unlock()
	fake.ObjectFreqStub = nil
	fake.objectFreqReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ObjectFreqReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.objectFreqMutex.Lock()
	defer fake.objectFreqMutex.Unlock()
	fake.ObjectFreqStub = nil
	if fake.objectFreqReturnsOnCall == nil {
		fake.objectFreqReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.objectFreqReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ObjectIdleTime(arg1 context.Context, arg2 string) *redisa.DurationCmd {
	fake.objectIdleTimeMutex.Lock()
	ret, specificReturn := fake.objectIdleTimeReturnsOnCall[len(fake.objectIdleTimeArgsForCall)]
	fake.objectIdleTimeArgsForCall = append(fake.objectIdleTimeArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ObjectIdleTimeStub
	fakeReturns := fake.objectIdleTimeReturns
	fake.recordInvocation("ObjectIdleTime", []interface{}{arg1, arg2})
	fake.objectIdleTimeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ObjectIdleTimeCallCount() int {
	fake.objectIdleTimeMutex.RLock()
	defer fake.objectIdleTimeMutex.RUnlock()
	return len(fake.objectIdleTimeArgsForCall)
}

func (fake *FakeCmdable) ObjectIdleTimeCalls(stub func(context.Context, string) *redisa.DurationCmd) {
	fake.objectIdleTimeMutex.Lock()
	defer fake.objectIdleTimeMutex.Unlock()
	fake.ObjectIdleTimeStub = stub
}

func (fake *FakeCmdable) ObjectIdleTimeArgsForCall(i int) (context.Context, string) {
	fake.objectIdleTimeMutex.RLock()
	defer fake.objectIdleTimeMutex.RUnlock()
	argsForCall := fake.objectIdleTimeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ObjectIdleTimeReturns(result1 *redisa.DurationCmd) {
	fake.objectIdleTimeMutex.Lock()
	defer fake.objectIdleTimeMutex.Unlock()
	fake.ObjectIdleTimeStub = nil
	fake.objectIdleTimeReturns = struct {
		result1 *redisa.DurationCmd
	}{result1}
}

func (fake *FakeCmdable) ObjectIdleTimeReturnsOnCall(i int, result1 *redisa.DurationCmd) {
	fake.objectIdleTimeMutex.Lock()
	defer fake.objectIdleTimeMutex.Unlock()
	fake.ObjectIdleTimeStub = nil
	if fake.objectIdleTimeReturnsOnCall == nil {
		fake.objectIdleTimeReturnsOnCall = make(map[int]struct {
			result1 *redisa.DurationCmd
		})
	}
	fake.objectIdleTimeReturnsOnCall[i] = struct {
		result1 *redisa.DurationCmd
	}{result1}
}

func (fake *FakeCmdable) ObjectRefCount(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.objectRefCountMutex.Lock()
	ret, specificReturn := fake.objectRefCountReturnsOnCall[len(fake.objectRefCountArgsForCall)]
	fake.objectRefCountArgsForCall = append(fake.objectRefCountArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ObjectRefCountStub
	fakeReturns := fake.objectRefCountReturns
	fake.recordInvocation("ObjectRefCount", []interface{}{arg1, arg2})
	fake.objectRefCountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ObjectRefCountCallCount() int {
	fake.objectRefCountMutex.RLock()
	defer fake.objectRefCountMutex.RUnlock()
	return len(fake.objectRefCountArgsForCall)
}

func (fake *FakeCmdable) ObjectRefCountCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.objectRefCountMutex.Lock()
	defer fake.objectRefCountMutex.Unlock()
	fake.ObjectRefCountStub = stub
}

func (fake *FakeCmdable) ObjectRefCountArgsForCall(i int) (context.Context, string) {
	fake.objectRefCountMutex.RLock()
	defer fake.objectRefCountMutex.RUnlock()
	argsForCall := fake.objectRefCountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ObjectRefCountReturns(result1 *redisa.IntCmd) {
	fake.objectRefCountMutex.Lock()
	defer fake.objectRefCountMutex.Unlock()
	fake.ObjectRefCountStub = nil
	fake.objectRefCountReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ObjectRefCountReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.objectRefCountMutex.Lock()
	defer fake.objectRefCountMutex.Unlock()
	fake.ObjectRefCountStub = nil
	if fake.objectRefCountReturnsOnCall == nil {
		fake.objectRefCountReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.objectRefCountReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) PExpire(arg1 context.Context, arg2 string, arg3 time.Duration) *redisa.BoolCmd {
	fake.pExpireMutex.Lock()
	ret, specificReturn := fake.pExpireReturnsOnCall[len(fake.pExpireArgsForCall)]
	fake.pExpireArgsForCall = append(fake.pExpireArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
	}{arg1, arg2, arg3})
	stub := fake.PExpireStub
	fakeReturns := fake.pExpireReturns
	fake.recordInvocation("PExpire", []interface{}{arg1, arg2, arg3})
	fake.pExpireMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PExpireCallCount() int {
	fake.pExpireMutex.RLock()
	defer fake.pExpireMutex.RUnlock()
	return len(fake.pExpireArgsForCall)
}

func (fake *FakeCmdable) PExpireCalls(stub func(context.Context, string, time.Duration) *redisa.BoolCmd) {
	fake.pExpireMutex.Lock()
	defer fake.pExpireMutex.Unlock()
	fake.PExpireStub = stub
}

func (fake *FakeCmdable) PExpireArgsForCall(i int) (context.Context, string, time.Duration) {
	fake.pExpireMutex.RLock()
	defer fake.pExpireMutex.RUnlock()
	argsForCall := fake.pExpireArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) PExpireReturns(result1 *redisa.BoolCmd) {
	fake.pExpireMutex.Lock()
	defer fake.pExpireMutex.Unlock()
	fake.PExpireStub = nil
	fake.pExpireReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) PExpireReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.pExpireMutex.Lock()
	defer fake.pExpireMutex.Unlock()
	fake.PExpireStub = nil
	if fake.pExpireReturnsOnCall == nil {
		fake.pExpireReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.pExpireReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) PExpireAt(arg1 context.Context, arg2 string, arg3 time.Time) *redisa.BoolCmd {
	fake.pExpireAtMutex.Lock()
	ret, specificReturn := fake.pExpireAtReturnsOnCall[len(fake.pExpireAtArgsForCall)]
	fake.pExpireAtArgsForCall = append(fake.pExpireAtArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Time
	}{arg1, arg2, arg3})
	stub := fake.PExpireAtStub
	fakeReturns := fake.pExpireAtReturns
	fake.recordInvocation("PExpireAt", []interface{}{arg1, arg2, arg3})
	fake.pExpireAtMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PExpireAtCallCount() int {
	fake.pExpireAtMutex.RLock()
	defer fake.pExpireAtMutex.RUnlock()
	return len(fake.pExpireAtArgsForCall)
}

func (fake *FakeCmdable) PExpireAtCalls(stub func(context.Context, string, time.Time) *redisa.BoolCmd) {
	fake.pExpireAtMutex.Lock()
	defer fake.pExpireAtMutex.Unlock()
	fake.PExpireAtStub = stub
}

func (fake *FakeCmdable) PExpireAtArgsForCall(i int) (context.Context, string, time.Time) {
	fake.pExpireAtMutex.RLock()
	defer fake.pExpireAtMutex.RUnlock()
	argsForCall := fake.pExpireAtArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) PExpireAtReturns(result1 *redisa.BoolCmd) {
	fake.pExpireAtMutex.Lock()
	defer fake.pExpireAtMutex.Unlock()
	fake.PExpireAtStub = nil
	fake.pExpireAtReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) PExpireAtReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.pExpireAtMutex.Lock()
	defer fake.pExpireAtMutex.Unlock()
	fake.PExpireAtStub = nil
	if fake.pExpireAtReturnsOnCall == nil {
		fake.pExpireAtReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.pExpireAtReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) PExpireTime(arg1 context.Context, arg2 string) *redisa.DurationCmd {
	fake.pExpireTimeMutex.Lock()
	ret, specificReturn := fake.pExpireTimeReturnsOnCall[len(fake.pExpireTimeArgsForCall)]
	fake.pExpireTimeArgsForCall = append(fake.pExpireTimeArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.PExpireTimeStub
	fakeReturns := fake.pExpireTimeReturns
	fake.recordInvocation("PExpireTime", []interface{}{arg1, arg2})
	fake.pExpireTimeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PExpireTimeCallCount() int {
	fake.pExpireTimeMutex.RLock()
	defer fake.pExpireTimeMutex.RUnlock()
	return len(fake.pExpireTimeArgsForCall)
}

func (fake *FakeCmdable) PExpireTimeCalls(stub func(context.Context, string) *redisa.DurationCmd) {
	fake.pExpireTimeMutex.Lock()
	defer fake.pExpireTimeMutex.Unlock()
	fake.PExpireTimeStub = stub
}

func (fake *FakeCmdable) PExpireTimeArgsForCall(i int) (context.Context, string) {
	fake.pExpireTimeMutex.RLock()
	defer fake.pExpireTimeMutex.RUnlock()
	argsForCall := fake.pExpireTimeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) PExpireTimeReturns(result1 *redisa.DurationCmd) {
	fake.pExpireTimeMutex.Lock()
	defer fake.pExpireTimeMutex.Unlock()
	fake.PExpireTimeStub = nil
	fake.pExpireTimeReturns = struct {
		result1 *redisa.DurationCmd
	}{result1}
}

func (fake *FakeCmdable) PExpireTimeReturnsOnCall(i int, result1 *redisa.DurationCmd) {
	fake.pExpireTimeMutex.Lock()
	defer fake.pExpireTimeMutex.Unlock()
	fake.PExpireTimeStub = nil
	if fake.pExpireTimeReturnsOnCall == nil {
		fake.pExpireTimeReturnsOnCall = make(map[int]struct {
			result1 *redisa.DurationCmd
		})
	}
	fake.pExpireTimeReturnsOnCall[i] = struct {
		result1 *redisa.DurationCmd
	}{result1}
}

func (fake *FakeCmdable) PFAdd(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntCmd {
	fake.pFAddMutex.Lock()
	ret, specificReturn := fake.pFAddReturnsOnCall[len(fake.pFAddArgsForCall)]
	fake.pFAddArgsForCall = append(fake.pFAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.PFAddStub
	fakeReturns := fake.pFAddReturns
	fake.recordInvocation("PFAdd", []interface{}{arg1, arg2, arg3})
	fake.pFAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PFAddCallCount() int {
	fake.pFAddMutex.RLock()
	defer fake.pFAddMutex.RUnlock()
	return len(fake.pFAddArgsForCall)
}

func (fake *FakeCmdable) PFAddCalls(stub func(context.Context, string, ...interface{}) *redisa.IntCmd) {
	fake.pFAddMutex.Lock()
	defer fake.pFAddMutex.Unlock()
	fake.PFAddStub = stub
}

func (fake *FakeCmdable) PFAddArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.pFAddMutex.RLock()
	defer fake.pFAddMutex.RUnlock()
	argsForCall := fake.pFAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) PFAddReturns(result1 *redisa.IntCmd) {
	fake.pFAddMutex.Lock()
	defer fake.pFAddMutex.Unlock()
	fake.PFAddStub = nil
	fake.pFAddReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) PFAddReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.pFAddMutex.Lock()
	defer fake.pFAddMutex.Unlock()
	fake.PFAddStub = nil
	if fake.pFAddReturnsOnCall == nil {
		fake.pFAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.pFAddReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) PFCount(arg1 context.Context, arg2 ...string) *redisa.IntCmd {
	fake.pFCountMutex.Lock()
	ret, specificReturn := fake.pFCountReturnsOnCall[len(fake.pFCountArgsForCall)]
	fake.pFCountArgsForCall = append(fake.pFCountArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.PFCountStub
	fakeReturns := fake.pFCountReturns
	fake.recordInvocation("PFCount", []interface{}{arg1, arg2})
	fake.pFCountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PFCountCallCount() int {
	fake.pFCountMutex.RLock()
	defer fake.pFCountMutex.RUnlock()
	return len(fake.pFCountArgsForCall)
}

func (fake *FakeCmdable) PFCountCalls(stub func(context.Context, ...string) *redisa.IntCmd) {
	fake.pFCountMutex.Lock()
	defer fake.pFCountMutex.Unlock()
	fake.PFCountStub = stub
}

func (fake *FakeCmdable) PFCountArgsForCall(i int) (context.Context, []string) {
	fake.pFCountMutex.RLock()
	defer fake.pFCountMutex.RUnlock()
	argsForCall := fake.pFCountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) PFCountReturns(result1 *redisa.IntCmd) {
	fake.pFCountMutex.Lock()
	defer fake.pFCountMutex.Unlock()
	fake.PFCountStub = nil
	fake.pFCountReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) PFCountReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.pFCountMutex.Lock()
	defer fake.pFCountMutex.Unlock()
	fake.PFCountStub = nil
	if fake.pFCountReturnsOnCall == nil {
		fake.pFCountReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.pFCountReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) PFMerge(arg1 context.Context, arg2 string, arg3 ...string) *redisa.StatusCmd {
	fake.pFMergeMutex.Lock()
	ret, specificReturn := fake.pFMergeReturnsOnCall[len(fake.pFMergeArgsForCall)]
	fake.pFMergeArgsForCall = append(fake.pFMergeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.PFMergeStub
	fakeReturns := fake.pFMergeReturns
	fake.recordInvocation("PFMerge", []interface{}{arg1, arg2, arg3})
	fake.pFMergeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PFMergeCallCount() int {
	fake.pFMergeMutex.RLock()
	defer fake.pFMergeMutex.RUnlock()
	return len(fake.pFMergeArgsForCall)
}

func (fake *FakeCmdable) PFMergeCalls(stub func(context.Context, string, ...string) *redisa.StatusCmd) {
	fake.pFMergeMutex.Lock()
	defer fake.pFMergeMutex.Unlock()
	fake.PFMergeStub = stub
}

func (fake *FakeCmdable) PFMergeArgsForCall(i int) (context.Context, string, []string) {
	fake.pFMergeMutex.RLock()
	defer fake.pFMergeMutex.RUnlock()
	argsForCall := fake.pFMergeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) PFMergeReturns(result1 *redisa.StatusCmd) {
	fake.pFMergeMutex.Lock()
	defer fake.pFMergeMutex.Unlock()
	fake.PFMergeStub = nil
	fake.pFMergeReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) PFMergeReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.pFMergeMutex.Lock()
	defer fake.pFMergeMutex.Unlock()
	fake.PFMergeStub = nil
	if fake.pFMergeReturnsOnCall == nil {
		fake.pFMergeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.pFMergeReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) PTTL(arg1 context.Context, arg2 string) *redisa.DurationCmd {
	fake.pTTLMutex.Lock()
	ret, specificReturn := fake.pTTLReturnsOnCall[len(fake.pTTLArgsForCall)]
	fake.pTTLArgsForCall = append(fake.pTTLArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.PTTLStub
	fakeReturns := fake.pTTLReturns
	fake.recordInvocation("PTTL", []interface{}{arg1, arg2})
	fake.pTTLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PTTLCallCount() int {
	fake.pTTLMutex.RLock()
	defer fake.pTTLMutex.RUnlock()
	return len(fake.pTTLArgsForCall)
}

func (fake *FakeCmdable) PTTLCalls(stub func(context.Context, string) *redisa.DurationCmd) {
	fake.pTTLMutex.Lock()
	defer fake.pTTLMutex.Unlock()
	fake.PTTLStub = stub
}

func (fake *FakeCmdable) PTTLArgsForCall(i int) (context.Context, string) {
	fake.pTTLMutex.RLock()
	defer fake.pTTLMutex.RUnlock()
	argsForCall := fake.pTTLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) PTTLReturns(result1 *redisa.DurationCmd) {
	fake.pTTLMutex.Lock()
	defer fake.pTTLMutex.Unlock()
	fake.PTTLStub = nil
	fake.pTTLReturns = struct {
		result1 *redisa.DurationCmd
	}{result1}
}

func (fake *FakeCmdable) PTTLReturnsOnCall(i int, result1 *redisa.DurationCmd) {
	fake.pTTLMutex.Lock()
	defer fake.pTTLMutex.Unlock()
	fake.PTTLStub = nil
	if fake.pTTLReturnsOnCall == nil {
		fake.pTTLReturnsOnCall = make(map[int]struct {
			result1 *redisa.DurationCmd
		})
	}
	fake.pTTLReturnsOnCall[i] = struct {
		result1 *redisa.DurationCmd
	}{result1}
}

func (fake *FakeCmdable) Persist(arg1 context.Context, arg2 string) *redisa.BoolCmd {
	fake.persistMutex.Lock()
	ret, specificReturn := fake.persistReturnsOnCall[len(fake.persistArgsForCall)]
	fake.persistArgsForCall = append(fake.persistArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.PersistStub
	fakeReturns := fake.persistReturns
	fake.recordInvocation("Persist", []interface{}{arg1, arg2})
	fake.persistMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PersistCallCount() int {
	fake.persistMutex.RLock()
	defer fake.persistMutex.RUnlock()
	return len(fake.persistArgsForCall)
}

func (fake *FakeCmdable) PersistCalls(stub func(context.Context, string) *redisa.BoolCmd) {
	fake.persistMutex.Lock()
	defer fake.persistMutex.Unlock()
	fake.PersistStub = stub
}

func (fake *FakeCmdable) PersistArgsForCall(i int) (context.Context, string) {
	fake.persistMutex.RLock()
	defer fake.persistMutex.RUnlock()
	argsForCall := fake.persistArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) PersistReturns(result1 *redisa.BoolCmd) {
	fake.persistMutex.Lock()
	defer fake.persistMutex.Unlock()
	fake.PersistStub = nil
	fake.persistReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) PersistReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.persistMutex.Lock()
	defer fake.persistMutex.Unlock()
	fake.PersistStub = nil
	if fake.persistReturnsOnCall == nil {
		fake.persistReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.persistReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) Ping(arg1 context.Context) *redisa.StatusCmd {
	fake.pingMutex.Lock()
	ret, specificReturn := fake.pingReturnsOnCall[len(fake.pingArgsForCall)]
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.PingStub
	fakeReturns := fake.pingReturns
	fake.recordInvocation("Ping", []interface{}{arg1})
	fake.pingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeCmdable) PingCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = stub
}

func (fake *FakeCmdable) PingArgsForCall(i int) context.Context {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	argsForCall := fake.pingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) PingReturns(result1 *redisa.StatusCmd) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) PingReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	if fake.pingReturnsOnCall == nil {
		fake.pingReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.pingReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) Pipeline() redisa.Pipeliner {
	fake.pipelineMutex.Lock()
	ret, specificReturn := fake.pipelineReturnsOnCall[len(fake.pipelineArgsForCall)]
	fake.pipelineArgsForCall = append(fake.pipelineArgsForCall, struct {
	}{})
	stub := fake.PipelineStub
	fakeReturns := fake.pipelineReturns
	fake.recordInvocation("Pipeline", []interface{}{})
	fake.pipelineMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PipelineCallCount() int {
	fake.pipelineMutex.RLock()
	defer fake.pipelineMutex.RUnlock()
	return len(fake.pipelineArgsForCall)
}

func (fake *FakeCmdable) PipelineCalls(stub func() redisa.Pipeliner) {
	fake.pipelineMutex.Lock()
	defer fake.pipelineMutex.Unlock()
	fake.PipelineStub = stub
}

func (fake *FakeCmdable) PipelineReturns(result1 redisa.Pipeliner) {
	fake.pipelineMutex.Lock()
	defer fake.pipelineMutex.Unlock()
	fake.PipelineStub = nil
	fake.pipelineReturns = struct {
		result1 redisa.Pipeliner
	}{result1}
}

func (fake *FakeCmdable) PipelineReturnsOnCall(i int, result1 redisa.Pipeliner) {
	fake.pipelineMutex.Lock()
	defer fake.pipelineMutex.Unlock()
	fake.PipelineStub = nil
	if fake.pipelineReturnsOnCall == nil {
		fake.pipelineReturnsOnCall = make(map[int]struct {
			result1 redisa.Pipeliner
		})
	}
	fake.pipelineReturnsOnCall[i] = struct {
		result1 redisa.Pipeliner
	}{result1}
}

func (fake *FakeCmdable) Pipelined(arg1 context.Context, arg2 func(redisa.Pipeliner) error) ([]redisa.Cmder, error) {
	fake.pipelinedMutex.Lock()
	ret, specificReturn := fake.pipelinedReturnsOnCall[len(fake.pipelinedArgsForCall)]
	fake.pipelinedArgsForCall = append(fake.pipelinedArgsForCall, struct {
		arg1 context.Context
		arg2 func(redisa.Pipeliner) error
	}{arg1, arg2})
	stub := fake.PipelinedStub
	fakeReturns := fake.pipelinedReturns
	fake.recordInvocation("Pipelined", []interface{}{arg1, arg2})
	fake.pipelinedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCmdable) PipelinedCallCount() int {
	fake.pipelinedMutex.RLock()
	defer fake.pipelinedMutex.RUnlock()
	return len(fake.pipelinedArgsForCall)
}

func (fake *FakeCmdable) PipelinedCalls(stub func(context.Context, func(redisa.Pipeliner) error) ([]redisa.Cmder, error)) {
	fake.pipelinedMutex.Lock()
	defer fake.pipelinedMutex.Unlock()
	fake.PipelinedStub = stub
}

func (fake *FakeCmdable) PipelinedArgsForCall(i int) (context.Context, func(redisa.Pipeliner) error) {
	fake.pipelinedMutex.RLock()
	defer fake.pipelinedMutex.RUnlock()
	argsForCall := fake.pipelinedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) PipelinedReturns(result1 []redisa.Cmder, result2 error) {
	fake.pipelinedMutex.Lock()
	defer fake.pipelinedMutex.Unlock()
	fake.PipelinedStub = nil
	fake.pipelinedReturns = struct {
		result1 []redisa.Cmder
		result2 error
	}{result1, result2}
}

func (fake *FakeCmdable) PipelinedReturnsOnCall(i int, result1 []redisa.Cmder, result2 error) {
	fake.pipelinedMutex.Lock()
	defer fake.pipelinedMutex.Unlock()
	fake.PipelinedStub = nil
	if fake.pipelinedReturnsOnCall == nil {
		fake.pipelinedReturnsOnCall = make(map[int]struct {
			result1 []redisa.Cmder
			result2 error
		})
	}
	fake.pipelinedReturnsOnCall[i] = struct {
		result1 []redisa.Cmder
		result2 error
	}{result1, result2}
}

func (fake *FakeCmdable) PubSubChannels(arg1 context.Context, arg2 string) *redisa.StringSliceCmd {
	fake.pubSubChannelsMutex.Lock()
	ret, specificReturn := fake.pubSubChannelsReturnsOnCall[len(fake.pubSubChannelsArgsForCall)]
	fake.pubSubChannelsArgsForCall = append(fake.pubSubChannelsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.PubSubChannelsStub
	fakeReturns := fake.pubSubChannelsReturns
	fake.recordInvocation("PubSubChannels", []interface{}{arg1, arg2})
	fake.pubSubChannelsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PubSubChannelsCallCount() int {
	fake.pubSubChannelsMutex.RLock()
	defer fake.pubSubChannelsMutex.RUnlock()
	return len(fake.pubSubChannelsArgsForCall)
}

func (fake *FakeCmdable) PubSubChannelsCalls(stub func(context.Context, string) *redisa.StringSliceCmd) {
	fake.pubSubChannelsMutex.Lock()
	defer fake.pubSubChannelsMutex.Unlock()
	fake.PubSubChannelsStub = stub
}

func (fake *FakeCmdable) PubSubChannelsArgsForCall(i int) (context.Context, string) {
	fake.pubSubChannelsMutex.RLock()
	defer fake.pubSubChannelsMutex.RUnlock()
	argsForCall := fake.pubSubChannelsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) PubSubChannelsReturns(result1 *redisa.StringSliceCmd) {
	fake.pubSubChannelsMutex.Lock()
	defer fake.pubSubChannelsMutex.Unlock()
	fake.PubSubChannelsStub = nil
	fake.pubSubChannelsReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) PubSubChannelsReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.pubSubChannelsMutex.Lock()
	defer fake.pubSubChannelsMutex.Unlock()
	fake.PubSubChannelsStub = nil
	if fake.pubSubChannelsReturnsOnCall == nil {
		fake.pubSubChannelsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.pubSubChannelsReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) PubSubNumPat(arg1 context.Context) *redisa.IntCmd {
	fake.pubSubNumPatMutex.Lock()
	ret, specificReturn := fake.pubSubNumPatReturnsOnCall[len(fake.pubSubNumPatArgsForCall)]
	fake.pubSubNumPatArgsForCall = append(fake.pubSubNumPatArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.PubSubNumPatStub
	fakeReturns := fake.pubSubNumPatReturns
	fake.recordInvocation("PubSubNumPat", []interface{}{arg1})
	fake.pubSubNumPatMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PubSubNumPatCallCount() int {
	fake.pubSubNumPatMutex.RLock()
	defer fake.pubSubNumPatMutex.RUnlock()
	return len(fake.pubSubNumPatArgsForCall)
}

func (fake *FakeCmdable) PubSubNumPatCalls(stub func(context.Context) *redisa.IntCmd) {
	fake.pubSubNumPatMutex.Lock()
	defer fake.pubSubNumPatMutex.Unlock()
	fake.PubSubNumPatStub = stub
}

func (fake *FakeCmdable) PubSubNumPatArgsForCall(i int) context.Context {
	fake.pubSubNumPatMutex.RLock()
	defer fake.pubSubNumPatMutex.RUnlock()
	argsForCall := fake.pubSubNumPatArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) PubSubNumPatReturns(result1 *redisa.IntCmd) {
	fake.pubSubNumPatMutex.Lock()
	defer fake.pubSubNumPatMutex.Unlock()
	fake.PubSubNumPatStub = nil
	fake.pubSubNumPatReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) PubSubNumPatReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.pubSubNumPatMutex.Lock()
	defer fake.pubSubNumPatMutex.Unlock()
	fake.PubSubNumPatStub = nil
	if fake.pubSubNumPatReturnsOnCall == nil {
		fake.pubSubNumPatReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.pubSubNumPatReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) PubSubNumSub(arg1 context.Context, arg2 ...string) *redisa.MapStringIntCmd {
	fake.pubSubNumSubMutex.Lock()
	ret, specificReturn := fake.pubSubNumSubReturnsOnCall[len(fake.pubSubNumSubArgsForCall)]
	fake.pubSubNumSubArgsForCall = append(fake.pubSubNumSubArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.PubSubNumSubStub
	fakeReturns := fake.pubSubNumSubReturns
	fake.recordInvocation("PubSubNumSub", []interface{}{arg1, arg2})
	fake.pubSubNumSubMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PubSubNumSubCallCount() int {
	fake.pubSubNumSubMutex.RLock()
	defer fake.pubSubNumSubMutex.RUnlock()
	return len(fake.pubSubNumSubArgsForCall)
}

func (fake *FakeCmdable) PubSubNumSubCalls(stub func(context.Context, ...string) *redisa.MapStringIntCmd) {
	fake.pubSubNumSubMutex.Lock()
	defer fake.pubSubNumSubMutex.Unlock()
	fake.PubSubNumSubStub = stub
}

func (fake *FakeCmdable) PubSubNumSubArgsForCall(i int) (context.Context, []string) {
	fake.pubSubNumSubMutex.RLock()
	defer fake.pubSubNumSubMutex.RUnlock()
	argsForCall := fake.pubSubNumSubArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) PubSubNumSubReturns(result1 *redisa.MapStringIntCmd) {
	fake.pubSubNumSubMutex.Lock()
	defer fake.pubSubNumSubMutex.Unlock()
	fake.PubSubNumSubStub = nil
	fake.pubSubNumSubReturns = struct {
		result1 *redisa.MapStringIntCmd
	}{result1}
}

func (fake *FakeCmdable) PubSubNumSubReturnsOnCall(i int, result1 *redisa.MapStringIntCmd) {
	fake.pubSubNumSubMutex.Lock()
	defer fake.pubSubNumSubMutex.Unlock()
	fake.PubSubNumSubStub = nil
	if fake.pubSubNumSubReturnsOnCall == nil {
		fake.pubSubNumSubReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringIntCmd
		})
	}
	fake.pubSubNumSubReturnsOnCall[i] = struct {
		result1 *redisa.MapStringIntCmd
	}{result1}
}

func (fake *FakeCmdable) PubSubShardChannels(arg1 context.Context, arg2 string) *redisa.StringSliceCmd {
	fake.pubSubShardChannelsMutex.Lock()
	ret, specificReturn := fake.pubSubShardChannelsReturnsOnCall[len(fake.pubSubShardChannelsArgsForCall)]
	fake.pubSubShardChannelsArgsForCall = append(fake.pubSubShardChannelsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.PubSubShardChannelsStub
	fakeReturns := fake.pubSubShardChannelsReturns
	fake.recordInvocation("PubSubShardChannels", []interface{}{arg1, arg2})
	fake.pubSubShardChannelsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PubSubShardChannelsCallCount() int {
	fake.pubSubShardChannelsMutex.RLock()
	defer fake.pubSubShardChannelsMutex.RUnlock()
	return len(fake.pubSubShardChannelsArgsForCall)
}

func (fake *FakeCmdable) PubSubShardChannelsCalls(stub func(context.Context, string) *redisa.StringSliceCmd) {
	fake.pubSubShardChannelsMutex.Lock()
	defer fake.pubSubShardChannelsMutex.Unlock()
	fake.PubSubShardChannelsStub = stub
}

func (fake *FakeCmdable) PubSubShardChannelsArgsForCall(i int) (context.Context, string) {
	fake.pubSubShardChannelsMutex.RLock()
	defer fake.pubSubShardChannelsMutex.RUnlock()
	argsForCall := fake.pubSubShardChannelsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) PubSubShardChannelsReturns(result1 *redisa.StringSliceCmd) {
	fake.pubSubShardChannelsMutex.Lock()
	defer fake.pubSubShardChannelsMutex.Unlock()
	fake.PubSubShardChannelsStub = nil
	fake.pubSubShardChannelsReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) PubSubShardChannelsReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.pubSubShardChannelsMutex.Lock()
	defer fake.pubSubShardChannelsMutex.Unlock()
	fake.PubSubShardChannelsStub = nil
	if fake.pubSubShardChannelsReturnsOnCall == nil {
		fake.pubSubShardChannelsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.pubSubShardChannelsReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) PubSubShardNumSub(arg1 context.Context, arg2 ...string) *redisa.MapStringIntCmd {
	fake.pubSubShardNumSubMutex.Lock()
	ret, specificReturn := fake.pubSubShardNumSubReturnsOnCall[len(fake.pubSubShardNumSubArgsForCall)]
	fake.pubSubShardNumSubArgsForCall = append(fake.pubSubShardNumSubArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.PubSubShardNumSubStub
	fakeReturns := fake.pubSubShardNumSubReturns
	fake.recordInvocation("PubSubShardNumSub", []interface{}{arg1, arg2})
	fake.pubSubShardNumSubMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PubSubShardNumSubCallCount() int {
	fake.pubSubShardNumSubMutex.RLock()
	defer fake.pubSubShardNumSubMutex.RUnlock()
	return len(fake.pubSubShardNumSubArgsForCall)
}

func (fake *FakeCmdable) PubSubShardNumSubCalls(stub func(context.Context, ...string) *redisa.MapStringIntCmd) {
	fake.pubSubShardNumSubMutex.Lock()
	defer fake.pubSubShardNumSubMutex.Unlock()
	fake.PubSubShardNumSubStub = stub
}

func (fake *FakeCmdable) PubSubShardNumSubArgsForCall(i int) (context.Context, []string) {
	fake.pubSubShardNumSubMutex.RLock()
	defer fake.pubSubShardNumSubMutex.RUnlock()
	argsForCall := fake.pubSubShardNumSubArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) PubSubShardNumSubReturns(result1 *redisa.MapStringIntCmd) {
	fake.pubSubShardNumSubMutex.Lock()
	defer fake.pubSubShardNumSubMutex.Unlock()
	fake.PubSubShardNumSubStub = nil
	fake.pubSubShardNumSubReturns = struct {
		result1 *redisa.MapStringIntCmd
	}{result1}
}

func (fake *FakeCmdable) PubSubShardNumSubReturnsOnCall(i int, result1 *redisa.MapStringIntCmd) {
	fake.pubSubShardNumSubMutex.Lock()
	defer fake.pubSubShardNumSubMutex.Unlock()
	fake.PubSubShardNumSubStub = nil
	if fake.pubSubShardNumSubReturnsOnCall == nil {
		fake.pubSubShardNumSubReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringIntCmd
		})
	}
	fake.pubSubShardNumSubReturnsOnCall[i] = struct {
		result1 *redisa.MapStringIntCmd
	}{result1}
}

func (fake *FakeCmdable) Publish(arg1 context.Context, arg2 string, arg3 interface{}) *redisa.IntCmd {
	fake.publishMutex.Lock()
	ret, specificReturn := fake.publishReturnsOnCall[len(fake.publishArgsForCall)]
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.PublishStub
	fakeReturns := fake.publishReturns
	fake.recordInvocation("Publish", []interface{}{arg1, arg2, arg3})
	fake.publishMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeCmdable) PublishCalls(stub func(context.Context, string, interface{}) *redisa.IntCmd) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = stub
}

func (fake *FakeCmdable) PublishArgsForCall(i int) (context.Context, string, interface{}) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	argsForCall := fake.publishArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) PublishReturns(result1 *redisa.IntCmd) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) PublishReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.publishMutex.Lock()
	defer fake.publishMutex.Unlock()
	fake.PublishStub = nil
	if fake.publishReturnsOnCall == nil {
		fake.publishReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.publishReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) Quit(arg1 context.Context) *redisa.StatusCmd {
	fake.quitMutex.Lock()
	ret, specificReturn := fake.quitReturnsOnCall[len(fake.quitArgsForCall)]
	fake.quitArgsForCall = append(fake.quitArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.QuitStub
	fakeReturns := fake.quitReturns
	fake.recordInvocation("Quit", []interface{}{arg1})
	fake.quitMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) QuitCallCount() int {
	fake.quitMutex.RLock()
	defer fake.quitMutex.RUnlock()
	return len(fake.quitArgsForCall)
}

func (fake *FakeCmdable) QuitCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.quitMutex.Lock()
	defer fake.quitMutex.Unlock()
	fake.QuitStub = stub
}

func (fake *FakeCmdable) QuitArgsForCall(i int) context.Context {
	fake.quitMutex.RLock()
	defer fake.quitMutex.RUnlock()
	argsForCall := fake.quitArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) QuitReturns(result1 *redisa.StatusCmd) {
	fake.quitMutex.Lock()
	defer fake.quitMutex.Unlock()
	fake.QuitStub = nil
	fake.quitReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) QuitReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.quitMutex.Lock()
	defer fake.quitMutex.Unlock()
	fake.QuitStub = nil
	if fake.quitReturnsOnCall == nil {
		fake.quitReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.quitReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) RPop(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.rPopMutex.Lock()
	ret, specificReturn := fake.rPopReturnsOnCall[len(fake.rPopArgsForCall)]
	fake.rPopArgsForCall = append(fake.rPopArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.RPopStub
	fakeReturns := fake.rPopReturns
	fake.recordInvocation("RPop", []interface{}{arg1, arg2})
	fake.rPopMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) RPopCallCount() int {
	fake.rPopMutex.RLock()
	defer fake.rPopMutex.RUnlock()
	return len(fake.rPopArgsForCall)
}

func (fake *FakeCmdable) RPopCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.rPopMutex.Lock()
	defer fake.rPopMutex.Unlock()
	fake.RPopStub = stub
}

func (fake *FakeCmdable) RPopArgsForCall(i int) (context.Context, string) {
	fake.rPopMutex.RLock()
	defer fake.rPopMutex.RUnlock()
	argsForCall := fake.rPopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) RPopReturns(result1 *redisa.StringCmd) {
	fake.rPopMutex.Lock()
	defer fake.rPopMutex.Unlock()
	fake.RPopStub = nil
	fake.rPopReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) RPopReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.rPopMutex.Lock()
	defer fake.rPopMutex.Unlock()
	fake.RPopStub = nil
	if fake.rPopReturnsOnCall == nil {
		fake.rPopReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.rPopReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) RPopCount(arg1 context.Context, arg2 string, arg3 int) *redisa.StringSliceCmd {
	fake.rPopCountMutex.Lock()
	ret, specificReturn := fake.rPopCountReturnsOnCall[len(fake.rPopCountArgsForCall)]
	fake.rPopCountArgsForCall = append(fake.rPopCountArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.RPopCountStub
	fakeReturns := fake.rPopCountReturns
	fake.recordInvocation("RPopCount", []interface{}{arg1, arg2, arg3})
	fake.rPopCountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) RPopCountCallCount() int {
	fake.rPopCountMutex.RLock()
	defer fake.rPopCountMutex.RUnlock()
	return len(fake.rPopCountArgsForCall)
}

func (fake *FakeCmdable) RPopCountCalls(stub func(context.Context, string, int) *redisa.StringSliceCmd) {
	fake.rPopCountMutex.Lock()
	defer fake.rPopCountMutex.Unlock()
	fake.RPopCountStub = stub
}

func (fake *FakeCmdable) RPopCountArgsForCall(i int) (context.Context, string, int) {
	fake.rPopCountMutex.RLock()
	defer fake.rPopCountMutex.RUnlock()
	argsForCall := fake.rPopCountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) RPopCountReturns(result1 *redisa.StringSliceCmd) {
	fake.rPopCountMutex.Lock()
	defer fake.rPopCountMutex.Unlock()
	fake.RPopCountStub = nil
	fake.rPopCountReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) RPopCountReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.rPopCountMutex.Lock()
	defer fake.rPopCountMutex.Unlock()
	fake.RPopCountStub = nil
	if fake.rPopCountReturnsOnCall == nil {
		fake.rPopCountReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.rPopCountReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) RPopLPush(arg1 context.Context, arg2 string, arg3 string) *redisa.StringCmd {
	fake.rPopLPushMutex.Lock()
	ret, specificReturn := fake.rPopLPushReturnsOnCall[len(fake.rPopLPushArgsForCall)]
	fake.rPopLPushArgsForCall = append(fake.rPopLPushArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.RPopLPushStub
	fakeReturns := fake.rPopLPushReturns
	fake.recordInvocation("RPopLPush", []interface{}{arg1, arg2, arg3})
	fake.rPopLPushMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) RPopLPushCallCount() int {
	fake.rPopLPushMutex.RLock()
	defer fake.rPopLPushMutex.RUnlock()
	return len(fake.rPopLPushArgsForCall)
}

func (fake *FakeCmdable) RPopLPushCalls(stub func(context.Context, string, string) *redisa.StringCmd) {
	fake.rPopLPushMutex.Lock()
	defer fake.rPopLPushMutex.Unlock()
	fake.RPopLPushStub = stub
}

func (fake *FakeCmdable) RPopLPushArgsForCall(i int) (context.Context, string, string) {
	fake.rPopLPushMutex.RLock()
	defer fake.rPopLPushMutex.RUnlock()
	argsForCall := fake.rPopLPushArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) RPopLPushReturns(result1 *redisa.StringCmd) {
	fake.rPopLPushMutex.Lock()
	defer fake.rPopLPushMutex.Unlock()
	fake.RPopLPushStub = nil
	fake.rPopLPushReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) RPopLPushReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.rPopLPushMutex.Lock()
	defer fake.rPopLPushMutex.Unlock()
	fake.RPopLPushStub = nil
	if fake.rPopLPushReturnsOnCall == nil {
		fake.rPopLPushReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.rPopLPushReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) RPush(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntCmd {
	fake.rPushMutex.Lock()
	ret, specificReturn := fake.rPushReturnsOnCall[len(fake.rPushArgsForCall)]
	fake.rPushArgsForCall = append(fake.rPushArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.RPushStub
	fakeReturns := fake.rPushReturns
	fake.recordInvocation("RPush", []interface{}{arg1, arg2, arg3})
	fake.rPushMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) RPushCallCount() int {
	fake.rPushMutex.RLock()
	defer fake.rPushMutex.RUnlock()
	return len(fake.rPushArgsForCall)
}

func (fake *FakeCmdable) RPushCalls(stub func(context.Context, string, ...interface{}) *redisa.IntCmd) {
	fake.rPushMutex.Lock()
	defer fake.rPushMutex.Unlock()
	fake.RPushStub = stub
}

func (fake *FakeCmdable) RPushArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.rPushMutex.RLock()
	defer fake.rPushMutex.RUnlock()
	argsForCall := fake.rPushArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) RPushReturns(result1 *redisa.IntCmd) {
	fake.rPushMutex.Lock()
	defer fake.rPushMutex.Unlock()
	fake.RPushStub = nil
	fake.rPushReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) RPushReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.rPushMutex.Lock()
	defer fake.rPushMutex.Unlock()
	fake.RPushStub = nil
	if fake.rPushReturnsOnCall == nil {
		fake.rPushReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.rPushReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) RPushX(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntCmd {
	fake.rPushXMutex.Lock()
	ret, specificReturn := fake.rPushXReturnsOnCall[len(fake.rPushXArgsForCall)]
	fake.rPushXArgsForCall = append(fake.rPushXArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.RPushXStub
	fakeReturns := fake.rPushXReturns
	fake.recordInvocation("RPushX", []interface{}{arg1, arg2, arg3})
	fake.rPushXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) RPushXCallCount() int {
	fake.rPushXMutex.RLock()
	defer fake.rPushXMutex.RUnlock()
	return len(fake.rPushXArgsForCall)
}

func (fake *FakeCmdable) RPushXCalls(stub func(context.Context, string, ...interface{}) *redisa.IntCmd) {
	fake.rPushXMutex.Lock()
	defer fake.rPushXMutex.Unlock()
	fake.RPushXStub = stub
}

func (fake *FakeCmdable) RPushXArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.rPushXMutex.RLock()
	defer fake.rPushXMutex.RUnlock()
	argsForCall := fake.rPushXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) RPushXReturns(result1 *redisa.IntCmd) {
	fake.rPushXMutex.Lock()
	defer fake.rPushXMutex.Unlock()
	fake.RPushXStub = nil
	fake.rPushXReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) RPushXReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.rPushXMutex.Lock()
	defer fake.rPushXMutex.Unlock()
	fake.RPushXStub = nil
	if fake.rPushXReturnsOnCall == nil {
		fake.rPushXReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.rPushXReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) RandomKey(arg1 context.Context) *redisa.StringCmd {
	fake.randomKeyMutex.Lock()
	ret, specificReturn := fake.randomKeyReturnsOnCall[len(fake.randomKeyArgsForCall)]
	fake.randomKeyArgsForCall = append(fake.randomKeyArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.RandomKeyStub
	fakeReturns := fake.randomKeyReturns
	fake.recordInvocation("RandomKey", []interface{}{arg1})
	fake.randomKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) RandomKeyCallCount() int {
	fake.randomKeyMutex.RLock()
	defer fake.randomKeyMutex.RUnlock()
	return len(fake.randomKeyArgsForCall)
}

func (fake *FakeCmdable) RandomKeyCalls(stub func(context.Context) *redisa.StringCmd) {
	fake.randomKeyMutex.Lock()
	defer fake.randomKeyMutex.Unlock()
	fake.RandomKeyStub = stub
}

func (fake *FakeCmdable) RandomKeyArgsForCall(i int) context.Context {
	fake.randomKeyMutex.RLock()
	defer fake.randomKeyMutex.RUnlock()
	argsForCall := fake.randomKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) RandomKeyReturns(result1 *redisa.StringCmd) {
	fake.randomKeyMutex.Lock()
	defer fake.randomKeyMutex.Unlock()
	fake.RandomKeyStub = nil
	fake.randomKeyReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) RandomKeyReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.randomKeyMutex.Lock()
	defer fake.randomKeyMutex.Unlock()
	fake.RandomKeyStub = nil
	if fake.randomKeyReturnsOnCall == nil {
		fake.randomKeyReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.randomKeyReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ReadOnly(arg1 context.Context) *redisa.StatusCmd {
	fake.readOnlyMutex.Lock()
	ret, specificReturn := fake.readOnlyReturnsOnCall[len(fake.readOnlyArgsForCall)]
	fake.readOnlyArgsForCall = append(fake.readOnlyArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ReadOnlyStub
	fakeReturns := fake.readOnlyReturns
	fake.recordInvocation("ReadOnly", []interface{}{arg1})
	fake.readOnlyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ReadOnlyCallCount() int {
	fake.readOnlyMutex.RLock()
	defer fake.readOnlyMutex.RUnlock()
	return len(fake.readOnlyArgsForCall)
}

func (fake *FakeCmdable) ReadOnlyCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.readOnlyMutex.Lock()
	defer fake.readOnlyMutex.Unlock()
	fake.ReadOnlyStub = stub
}

func (fake *FakeCmdable) ReadOnlyArgsForCall(i int) context.Context {
	fake.readOnlyMutex.RLock()
	defer fake.readOnlyMutex.RUnlock()
	argsForCall := fake.readOnlyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ReadOnlyReturns(result1 *redisa.StatusCmd) {
	fake.readOnlyMutex.Lock()
	defer fake.readOnlyMutex.Unlock()
	fake.ReadOnlyStub = nil
	fake.readOnlyReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ReadOnlyReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.readOnlyMutex.Lock()
	defer fake.readOnlyMutex.Unlock()
	fake.ReadOnlyStub = nil
	if fake.readOnlyReturnsOnCall == nil {
		fake.readOnlyReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.readOnlyReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ReadWrite(arg1 context.Context) *redisa.StatusCmd {
	fake.readWriteMutex.Lock()
	ret, specificReturn := fake.readWriteReturnsOnCall[len(fake.readWriteArgsForCall)]
	fake.readWriteArgsForCall = append(fake.readWriteArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ReadWriteStub
	fakeReturns := fake.readWriteReturns
	fake.recordInvocation("ReadWrite", []interface{}{arg1})
	fake.readWriteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ReadWriteCallCount() int {
	fake.readWriteMutex.RLock()
	defer fake.readWriteMutex.RUnlock()
	return len(fake.readWriteArgsForCall)
}

func (fake *FakeCmdable) ReadWriteCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.readWriteMutex.Lock()
	defer fake.readWriteMutex.Unlock()
	fake.ReadWriteStub = stub
}

func (fake *FakeCmdable) ReadWriteArgsForCall(i int) context.Context {
	fake.readWriteMutex.RLock()
	defer fake.readWriteMutex.RUnlock()
	argsForCall := fake.readWriteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ReadWriteReturns(result1 *redisa.StatusCmd) {
	fake.readWriteMutex.Lock()
	defer fake.readWriteMutex.Unlock()
	fake.ReadWriteStub = nil
	fake.readWriteReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ReadWriteReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.readWriteMutex.Lock()
	defer fake.readWriteMutex.Unlock()
	fake.ReadWriteStub = nil
	if fake.readWriteReturnsOnCall == nil {
		fake.readWriteReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.readWriteReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) Rename(arg1 context.Context, arg2 string, arg3 string) *redisa.StatusCmd {
	fake.renameMutex.Lock()
	ret, specificReturn := fake.renameReturnsOnCall[len(fake.renameArgsForCall)]
	fake.renameArgsForCall = append(fake.renameArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.RenameStub
	fakeReturns := fake.renameReturns
	fake.recordInvocation("Rename", []interface{}{arg1, arg2, arg3})
	fake.renameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) RenameCallCount() int {
	fake.renameMutex.RLock()
	defer fake.renameMutex.RUnlock()
	return len(fake.renameArgsForCall)
}

func (fake *FakeCmdable) RenameCalls(stub func(context.Context, string, string) *redisa.StatusCmd) {
	fake.renameMutex.Lock()
	defer fake.renameMutex.Unlock()
	fake.RenameStub = stub
}

func (fake *FakeCmdable) RenameArgsForCall(i int) (context.Context, string, string) {
	fake.renameMutex.RLock()
	defer fake.renameMutex.RUnlock()
	argsForCall := fake.renameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) RenameReturns(result1 *redisa.StatusCmd) {
	fake.renameMutex.Lock()
	defer fake.renameMutex.Unlock()
	fake.RenameStub = nil
	fake.renameReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) RenameReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.renameMutex.Lock()
	defer fake.renameMutex.Unlock()
	fake.RenameStub = nil
	if fake.renameReturnsOnCall == nil {
		fake.renameReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.renameReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) RenameNX(arg1 context.Context, arg2 string, arg3 string) *redisa.BoolCmd {
	fake.renameNXMutex.Lock()
	ret, specificReturn := fake.renameNXReturnsOnCall[len(fake.renameNXArgsForCall)]
	fake.renameNXArgsForCall = append(fake.renameNXArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.RenameNXStub
	fakeReturns := fake.renameNXReturns
	fake.recordInvocation("RenameNX", []interface{}{arg1, arg2, arg3})
	fake.renameNXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) RenameNXCallCount() int {
	fake.renameNXMutex.RLock()
	defer fake.renameNXMutex.RUnlock()
	return len(fake.renameNXArgsForCall)
}

func (fake *FakeCmdable) RenameNXCalls(stub func(context.Context, string, string) *redisa.BoolCmd) {
	fake.renameNXMutex.Lock()
	defer fake.renameNXMutex.Unlock()
	fake.RenameNXStub = stub
}

func (fake *FakeCmdable) RenameNXArgsForCall(i int) (context.Context, string, string) {
	fake.renameNXMutex.RLock()
	defer fake.renameNXMutex.RUnlock()
	argsForCall := fake.renameNXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) RenameNXReturns(result1 *redisa.BoolCmd) {
	fake.renameNXMutex.Lock()
	defer fake.renameNXMutex.Unlock()
	fake.RenameNXStub = nil
	fake.renameNXReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) RenameNXReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.renameNXMutex.Lock()
	defer fake.renameNXMutex.Unlock()
	fake.RenameNXStub = nil
	if fake.renameNXReturnsOnCall == nil {
		fake.renameNXReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.renameNXReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) Restore(arg1 context.Context, arg2 string, arg3 time.Duration, arg4 string) *redisa.StatusCmd {
	fake.restoreMutex.Lock()
	ret, specificReturn := fake.restoreReturnsOnCall[len(fake.restoreArgsForCall)]
	fake.restoreArgsForCall = append(fake.restoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.RestoreStub
	fakeReturns := fake.restoreReturns
	fake.recordInvocation("Restore", []interface{}{arg1, arg2, arg3, arg4})
	fake.restoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) RestoreCallCount() int {
	fake.restoreMutex.RLock()
	defer fake.restoreMutex.RUnlock()
	return len(fake.restoreArgsForCall)
}

func (fake *FakeCmdable) RestoreCalls(stub func(context.Context, string, time.Duration, string) *redisa.StatusCmd) {
	fake.restoreMutex.Lock()
	defer fake.restoreMutex.Unlock()
	fake.RestoreStub = stub
}

func (fake *FakeCmdable) RestoreArgsForCall(i int) (context.Context, string, time.Duration, string) {
	fake.restoreMutex.RLock()
	defer fake.restoreMutex.RUnlock()
	argsForCall := fake.restoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) RestoreReturns(result1 *redisa.StatusCmd) {
	fake.restoreMutex.Lock()
	defer fake.restoreMutex.Unlock()
	fake.RestoreStub = nil
	fake.restoreReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) RestoreReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.restoreMutex.Lock()
	defer fake.restoreMutex.Unlock()
	fake.RestoreStub = nil
	if fake.restoreReturnsOnCall == nil {
		fake.restoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.restoreReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) RestoreReplace(arg1 context.Context, arg2 string, arg3 time.Duration, arg4 string) *redisa.StatusCmd {
	fake.restoreReplaceMutex.Lock()
	ret, specificReturn := fake.restoreReplaceReturnsOnCall[len(fake.restoreReplaceArgsForCall)]
	fake.restoreReplaceArgsForCall = append(fake.restoreReplaceArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 time.Duration
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.RestoreReplaceStub
	fakeReturns := fake.restoreReplaceReturns
	fake.recordInvocation("RestoreReplace", []interface{}{arg1, arg2, arg3, arg4})
	fake.restoreReplaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) RestoreReplaceCallCount() int {
	fake.restoreReplaceMutex.RLock()
	defer fake.restoreReplaceMutex.RUnlock()
	return len(fake.restoreReplaceArgsForCall)
}

func (fake *FakeCmdable) RestoreReplaceCalls(stub func(context.Context, string, time.Duration, string) *redisa.StatusCmd) {
	fake.restoreReplaceMutex.Lock()
	defer fake.restoreReplaceMutex.Unlock()
	fake.RestoreReplaceStub = stub
}

func (fake *FakeCmdable) RestoreReplaceArgsForCall(i int) (context.Context, string, time.Duration, string) {
	fake.restoreReplaceMutex.RLock()
	defer fake.restoreReplaceMutex.RUnlock()
	argsForCall := fake.restoreReplaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) RestoreReplaceReturns(result1 *redisa.StatusCmd) {
	fake.restoreReplaceMutex.Lock()
	defer fake.restoreReplaceMutex.Unlock()
	fake.RestoreReplaceStub = nil
	fake.restoreReplaceReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) RestoreReplaceReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.restoreReplaceMutex.Lock()
	defer fake.restoreReplaceMutex.Unlock()
	fake.RestoreReplaceStub = nil
	if fake.restoreReplaceReturnsOnCall == nil {
		fake.restoreReplaceReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.restoreReplaceReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) SAdd(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntCmd {
	fake.sAddMutex.Lock()
	ret, specificReturn := fake.sAddReturnsOnCall[len(fake.sAddArgsForCall)]
	fake.sAddArgsForCall = append(fake.sAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.SAddStub
	fakeReturns := fake.sAddReturns
	fake.recordInvocation("SAdd", []interface{}{arg1, arg2, arg3})
	fake.sAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SAddCallCount() int {
	fake.sAddMutex.RLock()
	defer fake.sAddMutex.RUnlock()
	return len(fake.sAddArgsForCall)
}

func (fake *FakeCmdable) SAddCalls(stub func(context.Context, string, ...interface{}) *redisa.IntCmd) {
	fake.sAddMutex.Lock()
	defer fake.sAddMutex.Unlock()
	fake.SAddStub = stub
}

func (fake *FakeCmdable) SAddArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.sAddMutex.RLock()
	defer fake.sAddMutex.RUnlock()
	argsForCall := fake.sAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SAddReturns(result1 *redisa.IntCmd) {
	fake.sAddMutex.Lock()
	defer fake.sAddMutex.Unlock()
	fake.SAddStub = nil
	fake.sAddReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SAddReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.sAddMutex.Lock()
	defer fake.sAddMutex.Unlock()
	fake.SAddStub = nil
	if fake.sAddReturnsOnCall == nil {
		fake.sAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.sAddReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SCard(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.sCardMutex.Lock()
	ret, specificReturn := fake.sCardReturnsOnCall[len(fake.sCardArgsForCall)]
	fake.sCardArgsForCall = append(fake.sCardArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.SCardStub
	fakeReturns := fake.sCardReturns
	fake.recordInvocation("SCard", []interface{}{arg1, arg2})
	fake.sCardMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SCardCallCount() int {
	fake.sCardMutex.RLock()
	defer fake.sCardMutex.RUnlock()
	return len(fake.sCardArgsForCall)
}

func (fake *FakeCmdable) SCardCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.sCardMutex.Lock()
	defer fake.sCardMutex.Unlock()
	fake.SCardStub = stub
}

func (fake *FakeCmdable) SCardArgsForCall(i int) (context.Context, string) {
	fake.sCardMutex.RLock()
	defer fake.sCardMutex.RUnlock()
	argsForCall := fake.sCardArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) SCardReturns(result1 *redisa.IntCmd) {
	fake.sCardMutex.Lock()
	defer fake.sCardMutex.Unlock()
	fake.SCardStub = nil
	fake.sCardReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SCardReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.sCardMutex.Lock()
	defer fake.sCardMutex.Unlock()
	fake.SCardStub = nil
	if fake.sCardReturnsOnCall == nil {
		fake.sCardReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.sCardReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SDiff(arg1 context.Context, arg2 ...string) *redisa.StringSliceCmd {
	fake.sDiffMutex.Lock()
	ret, specificReturn := fake.sDiffReturnsOnCall[len(fake.sDiffArgsForCall)]
	fake.sDiffArgsForCall = append(fake.sDiffArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.SDiffStub
	fakeReturns := fake.sDiffReturns
	fake.recordInvocation("SDiff", []interface{}{arg1, arg2})
	fake.sDiffMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SDiffCallCount() int {
	fake.sDiffMutex.RLock()
	defer fake.sDiffMutex.RUnlock()
	return len(fake.sDiffArgsForCall)
}

func (fake *FakeCmdable) SDiffCalls(stub func(context.Context, ...string) *redisa.StringSliceCmd) {
	fake.sDiffMutex.Lock()
	defer fake.sDiffMutex.Unlock()
	fake.SDiffStub = stub
}

func (fake *FakeCmdable) SDiffArgsForCall(i int) (context.Context, []string) {
	fake.sDiffMutex.RLock()
	defer fake.sDiffMutex.RUnlock()
	argsForCall := fake.sDiffArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) SDiffReturns(result1 *redisa.StringSliceCmd) {
	fake.sDiffMutex.Lock()
	defer fake.sDiffMutex.Unlock()
	fake.SDiffStub = nil
	fake.sDiffReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SDiffReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.sDiffMutex.Lock()
	defer fake.sDiffMutex.Unlock()
	fake.SDiffStub = nil
	if fake.sDiffReturnsOnCall == nil {
		fake.sDiffReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.sDiffReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SDiffStore(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntCmd {
	fake.sDiffStoreMutex.Lock()
	ret, specificReturn := fake.sDiffStoreReturnsOnCall[len(fake.sDiffStoreArgsForCall)]
	fake.sDiffStoreArgsForCall = append(fake.sDiffStoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.SDiffStoreStub
	fakeReturns := fake.sDiffStoreReturns
	fake.recordInvocation("SDiffStore", []interface{}{arg1, arg2, arg3})
	fake.sDiffStoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SDiffStoreCallCount() int {
	fake.sDiffStoreMutex.RLock()
	defer fake.sDiffStoreMutex.RUnlock()
	return len(fake.sDiffStoreArgsForCall)
}

func (fake *FakeCmdable) SDiffStoreCalls(stub func(context.Context, string, ...string) *redisa.IntCmd) {
	fake.sDiffStoreMutex.Lock()
	defer fake.sDiffStoreMutex.Unlock()
	fake.SDiffStoreStub = stub
}

func (fake *FakeCmdable) SDiffStoreArgsForCall(i int) (context.Context, string, []string) {
	fake.sDiffStoreMutex.RLock()
	defer fake.sDiffStoreMutex.RUnlock()
	argsForCall := fake.sDiffStoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SDiffStoreReturns(result1 *redisa.IntCmd) {
	fake.sDiffStoreMutex.Lock()
	defer fake.sDiffStoreMutex.Unlock()
	fake.SDiffStoreStub = nil
	fake.sDiffStoreReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SDiffStoreReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.sDiffStoreMutex.Lock()
	defer fake.sDiffStoreMutex.Unlock()
	fake.SDiffStoreStub = nil
	if fake.sDiffStoreReturnsOnCall == nil {
		fake.sDiffStoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.sDiffStoreReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SInter(arg1 context.Context, arg2 ...string) *redisa.StringSliceCmd {
	fake.sInterMutex.Lock()
	ret, specificReturn := fake.sInterReturnsOnCall[len(fake.sInterArgsForCall)]
	fake.sInterArgsForCall = append(fake.sInterArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.SInterStub
	fakeReturns := fake.sInterReturns
	fake.recordInvocation("SInter", []interface{}{arg1, arg2})
	fake.sInterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SInterCallCount() int {
	fake.sInterMutex.RLock()
	defer fake.sInterMutex.RUnlock()
	return len(fake.sInterArgsForCall)
}

func (fake *FakeCmdable) SInterCalls(stub func(context.Context, ...string) *redisa.StringSliceCmd) {
	fake.sInterMutex.Lock()
	defer fake.sInterMutex.Unlock()
	fake.SInterStub = stub
}

func (fake *FakeCmdable) SInterArgsForCall(i int) (context.Context, []string) {
	fake.sInterMutex.RLock()
	defer fake.sInterMutex.RUnlock()
	argsForCall := fake.sInterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) SInterReturns(result1 *redisa.StringSliceCmd) {
	fake.sInterMutex.Lock()
	defer fake.sInterMutex.Unlock()
	fake.SInterStub = nil
	fake.sInterReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SInterReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.sInterMutex.Lock()
	defer fake.sInterMutex.Unlock()
	fake.SInterStub = nil
	if fake.sInterReturnsOnCall == nil {
		fake.sInterReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.sInterReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SInterCard(arg1 context.Context, arg2 int64, arg3 ...string) *redisa.IntCmd {
	fake.sInterCardMutex.Lock()
	ret, specificReturn := fake.sInterCardReturnsOnCall[len(fake.sInterCardArgsForCall)]
	fake.sInterCardArgsForCall = append(fake.sInterCardArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.SInterCardStub
	fakeReturns := fake.sInterCardReturns
	fake.recordInvocation("SInterCard", []interface{}{arg1, arg2, arg3})
	fake.sInterCardMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SInterCardCallCount() int {
	fake.sInterCardMutex.RLock()
	defer fake.sInterCardMutex.RUnlock()
	return len(fake.sInterCardArgsForCall)
}

func (fake *FakeCmdable) SInterCardCalls(stub func(context.Context, int64, ...string) *redisa.IntCmd) {
	fake.sInterCardMutex.Lock()
	defer fake.sInterCardMutex.Unlock()
	fake.SInterCardStub = stub
}

func (fake *FakeCmdable) SInterCardArgsForCall(i int) (context.Context, int64, []string) {
	fake.sInterCardMutex.RLock()
	defer fake.sInterCardMutex.RUnlock()
	argsForCall := fake.sInterCardArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SInterCardReturns(result1 *redisa.IntCmd) {
	fake.sInterCardMutex.Lock()
	defer fake.sInterCardMutex.Unlock()
	fake.SInterCardStub = nil
	fake.sInterCardReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SInterCardReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.sInterCardMutex.Lock()
	defer fake.sInterCardMutex.Unlock()
	fake.SInterCardStub = nil
	if fake.sInterCardReturnsOnCall == nil {
		fake.sInterCardReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.sInterCardReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SInterStore(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntCmd {
	fake.sInterStoreMutex.Lock()
	ret, specificReturn := fake.sInterStoreReturnsOnCall[len(fake.sInterStoreArgsForCall)]
	fake.sInterStoreArgsForCall = append(fake.sInterStoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.SInterStoreStub
	fakeReturns := fake.sInterStoreReturns
	fake.recordInvocation("SInterStore", []interface{}{arg1, arg2, arg3})
	fake.sInterStoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SInterStoreCallCount() int {
	fake.sInterStoreMutex.RLock()
	defer fake.sInterStoreMutex.RUnlock()
	return len(fake.sInterStoreArgsForCall)
}

func (fake *FakeCmdable) SInterStoreCalls(stub func(context.Context, string, ...string) *redisa.IntCmd) {
	fake.sInterStoreMutex.Lock()
	defer fake.sInterStoreMutex.Unlock()
	fake.SInterStoreStub = stub
}

func (fake *FakeCmdable) SInterStoreArgsForCall(i int) (context.Context, string, []string) {
	fake.sInterStoreMutex.RLock()
	defer fake.sInterStoreMutex.RUnlock()
	argsForCall := fake.sInterStoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SInterStoreReturns(result1 *redisa.IntCmd) {
	fake.sInterStoreMutex.Lock()
	defer fake.sInterStoreMutex.Unlock()
	fake.SInterStoreStub = nil
	fake.sInterStoreReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SInterStoreReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.sInterStoreMutex.Lock()
	defer fake.sInterStoreMutex.Unlock()
	fake.SInterStoreStub = nil
	if fake.sInterStoreReturnsOnCall == nil {
		fake.sInterStoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.sInterStoreReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SIsMember(arg1 context.Context, arg2 string, arg3 interface{}) *redisa.BoolCmd {
	fake.sIsMemberMutex.Lock()
	ret, specificReturn := fake.sIsMemberReturnsOnCall[len(fake.sIsMemberArgsForCall)]
	fake.sIsMemberArgsForCall = append(fake.sIsMemberArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.SIsMemberStub
	fakeReturns := fake.sIsMemberReturns
	fake.recordInvocation("SIsMember", []interface{}{arg1, arg2, arg3})
	fake.sIsMemberMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SIsMemberCallCount() int {
	fake.sIsMemberMutex.RLock()
	defer fake.sIsMemberMutex.RUnlock()
	return len(fake.sIsMemberArgsForCall)
}

func (fake *FakeCmdable) SIsMemberCalls(stub func(context.Context, string, interface{}) *redisa.BoolCmd) {
	fake.sIsMemberMutex.Lock()
	defer fake.sIsMemberMutex.Unlock()
	fake.SIsMemberStub = stub
}

func (fake *FakeCmdable) SIsMemberArgsForCall(i int) (context.Context, string, interface{}) {
	fake.sIsMemberMutex.RLock()
	defer fake.sIsMemberMutex.RUnlock()
	argsForCall := fake.sIsMemberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SIsMemberReturns(result1 *redisa.BoolCmd) {
	fake.sIsMemberMutex.Lock()
	defer fake.sIsMemberMutex.Unlock()
	fake.SIsMemberStub = nil
	fake.sIsMemberReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) SIsMemberReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.sIsMemberMutex.Lock()
	defer fake.sIsMemberMutex.Unlock()
	fake.SIsMemberStub = nil
	if fake.sIsMemberReturnsOnCall == nil {
		fake.sIsMemberReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.sIsMemberReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) SMIsMember(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.BoolSliceCmd {
	fake.sMIsMemberMutex.Lock()
	ret, specificReturn := fake.sMIsMemberReturnsOnCall[len(fake.sMIsMemberArgsForCall)]
	fake.sMIsMemberArgsForCall = append(fake.sMIsMemberArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.SMIsMemberStub
	fakeReturns := fake.sMIsMemberReturns
	fake.recordInvocation("SMIsMember", []interface{}{arg1, arg2, arg3})
	fake.sMIsMemberMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SMIsMemberCallCount() int {
	fake.sMIsMemberMutex.RLock()
	defer fake.sMIsMemberMutex.RUnlock()
	return len(fake.sMIsMemberArgsForCall)
}

func (fake *FakeCmdable) SMIsMemberCalls(stub func(context.Context, string, ...interface{}) *redisa.BoolSliceCmd) {
	fake.sMIsMemberMutex.Lock()
	defer fake.sMIsMemberMutex.Unlock()
	fake.SMIsMemberStub = stub
}

func (fake *FakeCmdable) SMIsMemberArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.sMIsMemberMutex.RLock()
	defer fake.sMIsMemberMutex.RUnlock()
	argsForCall := fake.sMIsMemberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SMIsMemberReturns(result1 *redisa.BoolSliceCmd) {
	fake.sMIsMemberMutex.Lock()
	defer fake.sMIsMemberMutex.Unlock()
	fake.SMIsMemberStub = nil
	fake.sMIsMemberReturns = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SMIsMemberReturnsOnCall(i int, result1 *redisa.BoolSliceCmd) {
	fake.sMIsMemberMutex.Lock()
	defer fake.sMIsMemberMutex.Unlock()
	fake.SMIsMemberStub = nil
	if fake.sMIsMemberReturnsOnCall == nil {
		fake.sMIsMemberReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolSliceCmd
		})
	}
	fake.sMIsMemberReturnsOnCall[i] = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SMembers(arg1 context.Context, arg2 string) *redisa.StringSliceCmd {
	fake.sMembersMutex.Lock()
	ret, specificReturn := fake.sMembersReturnsOnCall[len(fake.sMembersArgsForCall)]
	fake.sMembersArgsForCall = append(fake.sMembersArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.SMembersStub
	fakeReturns := fake.sMembersReturns
	fake.recordInvocation("SMembers", []interface{}{arg1, arg2})
	fake.sMembersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SMembersCallCount() int {
	fake.sMembersMutex.RLock()
	defer fake.sMembersMutex.RUnlock()
	return len(fake.sMembersArgsForCall)
}

func (fake *FakeCmdable) SMembersCalls(stub func(context.Context, string) *redisa.StringSliceCmd) {
	fake.sMembersMutex.Lock()
	defer fake.sMembersMutex.Unlock()
	fake.SMembersStub = stub
}

func (fake *FakeCmdable) SMembersArgsForCall(i int) (context.Context, string) {
	fake.sMembersMutex.RLock()
	defer fake.sMembersMutex.RUnlock()
	argsForCall := fake.sMembersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) SMembersReturns(result1 *redisa.StringSliceCmd) {
	fake.sMembersMutex.Lock()
	defer fake.sMembersMutex.Unlock()
	fake.SMembersStub = nil
	fake.sMembersReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SMembersReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.sMembersMutex.Lock()
	defer fake.sMembersMutex.Unlock()
	fake.SMembersStub = nil
	if fake.sMembersReturnsOnCall == nil {
		fake.sMembersReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.sMembersReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SMembersMap(arg1 context.Context, arg2 string) *redisa.StringStructMapCmd {
	fake.sMembersMapMutex.Lock()
	ret, specificReturn := fake.sMembersMapReturnsOnCall[len(fake.sMembersMapArgsForCall)]
	fake.sMembersMapArgsForCall = append(fake.sMembersMapArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.SMembersMapStub
	fakeReturns := fake.sMembersMapReturns
	fake.recordInvocation("SMembersMap", []interface{}{arg1, arg2})
	fake.sMembersMapMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SMembersMapCallCount() int {
	fake.sMembersMapMutex.RLock()
	defer fake.sMembersMapMutex.RUnlock()
	return len(fake.sMembersMapArgsForCall)
}

func (fake *FakeCmdable) SMembersMapCalls(stub func(context.Context, string) *redisa.StringStructMapCmd) {
	fake.sMembersMapMutex.Lock()
	defer fake.sMembersMapMutex.Unlock()
	fake.SMembersMapStub = stub
}

func (fake *FakeCmdable) SMembersMapArgsForCall(i int) (context.Context, string) {
	fake.sMembersMapMutex.RLock()
	defer fake.sMembersMapMutex.RUnlock()
	argsForCall := fake.sMembersMapArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) SMembersMapReturns(result1 *redisa.StringStructMapCmd) {
	fake.sMembersMapMutex.Lock()
	defer fake.sMembersMapMutex.Unlock()
	fake.SMembersMapStub = nil
	fake.sMembersMapReturns = struct {
		result1 *redisa.StringStructMapCmd
	}{result1}
}

func (fake *FakeCmdable) SMembersMapReturnsOnCall(i int, result1 *redisa.StringStructMapCmd) {
	fake.sMembersMapMutex.Lock()
	defer fake.sMembersMapMutex.Unlock()
	fake.SMembersMapStub = nil
	if fake.sMembersMapReturnsOnCall == nil {
		fake.sMembersMapReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringStructMapCmd
		})
	}
	fake.sMembersMapReturnsOnCall[i] = struct {
		result1 *redisa.StringStructMapCmd
	}{result1}
}

func (fake *FakeCmdable) SMove(arg1 context.Context, arg2 string, arg3 string, arg4 interface{}) *redisa.BoolCmd {
	fake.sMoveMutex.Lock()
	ret, specificReturn := fake.sMoveReturnsOnCall[len(fake.sMoveArgsForCall)]
	fake.sMoveArgsForCall = append(fake.sMoveArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.SMoveStub
	fakeReturns := fake.sMoveReturns
	fake.recordInvocation("SMove", []interface{}{arg1, arg2, arg3, arg4})
	fake.sMoveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SMoveCallCount() int {
	fake.sMoveMutex.RLock()
	defer fake.sMoveMutex.RUnlock()
	return len(fake.sMoveArgsForCall)
}

func (fake *FakeCmdable) SMoveCalls(stub func(context.Context, string, string, interface{}) *redisa.BoolCmd) {
	fake.sMoveMutex.Lock()
	defer fake.sMoveMutex.Unlock()
	fake.SMoveStub = stub
}

func (fake *FakeCmdable) SMoveArgsForCall(i int) (context.Context, string, string, interface{}) {
	fake.sMoveMutex.RLock()
	defer fake.sMoveMutex.RUnlock()
	argsForCall := fake.sMoveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) SMoveReturns(result1 *redisa.BoolCmd) {
	fake.sMoveMutex.Lock()
	defer fake.sMoveMutex.Unlock()
	fake.SMoveStub = nil
	fake.sMoveReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) SMoveReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.sMoveMutex.Lock()
	defer fake.sMoveMutex.Unlock()
	fake.SMoveStub = nil
	if fake.sMoveReturnsOnCall == nil {
		fake.sMoveReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.sMoveReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) SPop(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.sPopMutex.Lock()
	ret, specificReturn := fake.sPopReturnsOnCall[len(fake.sPopArgsForCall)]
	fake.sPopArgsForCall = append(fake.sPopArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.SPopStub
	fakeReturns := fake.sPopReturns
	fake.recordInvocation("SPop", []interface{}{arg1, arg2})
	fake.sPopMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SPopCallCount() int {
	fake.sPopMutex.RLock()
	defer fake.sPopMutex.RUnlock()
	return len(fake.sPopArgsForCall)
}

func (fake *FakeCmdable) SPopCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.sPopMutex.Lock()
	defer fake.sPopMutex.Unlock()
	fake.SPopStub = stub
}

func (fake *FakeCmdable) SPopArgsForCall(i int) (context.Context, string) {
	fake.sPopMutex.RLock()
	defer fake.sPopMutex.RUnlock()
	argsForCall := fake.sPopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) SPopReturns(result1 *redisa.StringCmd) {
	fake.sPopMutex.Lock()
	defer fake.sPopMutex.Unlock()
	fake.SPopStub = nil
	fake.sPopReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) SPopReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.sPopMutex.Lock()
	defer fake.sPopMutex.Unlock()
	fake.SPopStub = nil
	if fake.sPopReturnsOnCall == nil {
		fake.sPopReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.sPopReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) SPopN(arg1 context.Context, arg2 string, arg3 int64) *redisa.StringSliceCmd {
	fake.sPopNMutex.Lock()
	ret, specificReturn := fake.sPopNReturnsOnCall[len(fake.sPopNArgsForCall)]
	fake.sPopNArgsForCall = append(fake.sPopNArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.SPopNStub
	fakeReturns := fake.sPopNReturns
	fake.recordInvocation("SPopN", []interface{}{arg1, arg2, arg3})
	fake.sPopNMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SPopNCallCount() int {
	fake.sPopNMutex.RLock()
	defer fake.sPopNMutex.RUnlock()
	return len(fake.sPopNArgsForCall)
}

func (fake *FakeCmdable) SPopNCalls(stub func(context.Context, string, int64) *redisa.StringSliceCmd) {
	fake.sPopNMutex.Lock()
	defer fake.sPopNMutex.Unlock()
	fake.SPopNStub = stub
}

func (fake *FakeCmdable) SPopNArgsForCall(i int) (context.Context, string, int64) {
	fake.sPopNMutex.RLock()
	defer fake.sPopNMutex.RUnlock()
	argsForCall := fake.sPopNArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SPopNReturns(result1 *redisa.StringSliceCmd) {
	fake.sPopNMutex.Lock()
	defer fake.sPopNMutex.Unlock()
	fake.SPopNStub = nil
	fake.sPopNReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SPopNReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.sPopNMutex.Lock()
	defer fake.sPopNMutex.Unlock()
	fake.SPopNStub = nil
	if fake.sPopNReturnsOnCall == nil {
		fake.sPopNReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.sPopNReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SPublish(arg1 context.Context, arg2 string, arg3 interface{}) *redisa.IntCmd {
	fake.sPublishMutex.Lock()
	ret, specificReturn := fake.sPublishReturnsOnCall[len(fake.sPublishArgsForCall)]
	fake.sPublishArgsForCall = append(fake.sPublishArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.SPublishStub
	fakeReturns := fake.sPublishReturns
	fake.recordInvocation("SPublish", []interface{}{arg1, arg2, arg3})
	fake.sPublishMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SPublishCallCount() int {
	fake.sPublishMutex.RLock()
	defer fake.sPublishMutex.RUnlock()
	return len(fake.sPublishArgsForCall)
}

func (fake *FakeCmdable) SPublishCalls(stub func(context.Context, string, interface{}) *redisa.IntCmd) {
	fake.sPublishMutex.Lock()
	defer fake.sPublishMutex.Unlock()
	fake.SPublishStub = stub
}

func (fake *FakeCmdable) SPublishArgsForCall(i int) (context.Context, string, interface{}) {
	fake.sPublishMutex.RLock()
	defer fake.sPublishMutex.RUnlock()
	argsForCall := fake.sPublishArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SPublishReturns(result1 *redisa.IntCmd) {
	fake.sPublishMutex.Lock()
	defer fake.sPublishMutex.Unlock()
	fake.SPublishStub = nil
	fake.sPublishReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SPublishReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.sPublishMutex.Lock()
	defer fake.sPublishMutex.Unlock()
	fake.SPublishStub = nil
	if fake.sPublishReturnsOnCall == nil {
		fake.sPublishReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.sPublishReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SRandMember(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.sRandMemberMutex.Lock()
	ret, specificReturn := fake.sRandMemberReturnsOnCall[len(fake.sRandMemberArgsForCall)]
	fake.sRandMemberArgsForCall = append(fake.sRandMemberArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.SRandMemberStub
	fakeReturns := fake.sRandMemberReturns
	fake.recordInvocation("SRandMember", []interface{}{arg1, arg2})
	fake.sRandMemberMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SRandMemberCallCount() int {
	fake.sRandMemberMutex.RLock()
	defer fake.sRandMemberMutex.RUnlock()
	return len(fake.sRandMemberArgsForCall)
}

func (fake *FakeCmdable) SRandMemberCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.sRandMemberMutex.Lock()
	defer fake.sRandMemberMutex.Unlock()
	fake.SRandMemberStub = stub
}

func (fake *FakeCmdable) SRandMemberArgsForCall(i int) (context.Context, string) {
	fake.sRandMemberMutex.RLock()
	defer fake.sRandMemberMutex.RUnlock()
	argsForCall := fake.sRandMemberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) SRandMemberReturns(result1 *redisa.StringCmd) {
	fake.sRandMemberMutex.Lock()
	defer fake.sRandMemberMutex.Unlock()
	fake.SRandMemberStub = nil
	fake.sRandMemberReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) SRandMemberReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.sRandMemberMutex.Lock()
	defer fake.sRandMemberMutex.Unlock()
	fake.SRandMemberStub = nil
	if fake.sRandMemberReturnsOnCall == nil {
		fake.sRandMemberReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.sRandMemberReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) SRandMemberN(arg1 context.Context, arg2 string, arg3 int64) *redisa.StringSliceCmd {
	fake.sRandMemberNMutex.Lock()
	ret, specificReturn := fake.sRandMemberNReturnsOnCall[len(fake.sRandMemberNArgsForCall)]
	fake.sRandMemberNArgsForCall = append(fake.sRandMemberNArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.SRandMemberNStub
	fakeReturns := fake.sRandMemberNReturns
	fake.recordInvocation("SRandMemberN", []interface{}{arg1, arg2, arg3})
	fake.sRandMemberNMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SRandMemberNCallCount() int {
	fake.sRandMemberNMutex.RLock()
	defer fake.sRandMemberNMutex.RUnlock()
	return len(fake.sRandMemberNArgsForCall)
}

func (fake *FakeCmdable) SRandMemberNCalls(stub func(context.Context, string, int64) *redisa.StringSliceCmd) {
	fake.sRandMemberNMutex.Lock()
	defer fake.sRandMemberNMutex.Unlock()
	fake.SRandMemberNStub = stub
}

func (fake *FakeCmdable) SRandMemberNArgsForCall(i int) (context.Context, string, int64) {
	fake.sRandMemberNMutex.RLock()
	defer fake.sRandMemberNMutex.RUnlock()
	argsForCall := fake.sRandMemberNArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SRandMemberNReturns(result1 *redisa.StringSliceCmd) {
	fake.sRandMemberNMutex.Lock()
	defer fake.sRandMemberNMutex.Unlock()
	fake.SRandMemberNStub = nil
	fake.sRandMemberNReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SRandMemberNReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.sRandMemberNMutex.Lock()
	defer fake.sRandMemberNMutex.Unlock()
	fake.SRandMemberNStub = nil
	if fake.sRandMemberNReturnsOnCall == nil {
		fake.sRandMemberNReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.sRandMemberNReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SRem(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntCmd {
	fake.sRemMutex.Lock()
	ret, specificReturn := fake.sRemReturnsOnCall[len(fake.sRemArgsForCall)]
	fake.sRemArgsForCall = append(fake.sRemArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.SRemStub
	fakeReturns := fake.sRemReturns
	fake.recordInvocation("SRem", []interface{}{arg1, arg2, arg3})
	fake.sRemMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SRemCallCount() int {
	fake.sRemMutex.RLock()
	defer fake.sRemMutex.RUnlock()
	return len(fake.sRemArgsForCall)
}

func (fake *FakeCmdable) SRemCalls(stub func(context.Context, string, ...interface{}) *redisa.IntCmd) {
	fake.sRemMutex.Lock()
	defer fake.sRemMutex.Unlock()
	fake.SRemStub = stub
}

func (fake *FakeCmdable) SRemArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.sRemMutex.RLock()
	defer fake.sRemMutex.RUnlock()
	argsForCall := fake.sRemArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SRemReturns(result1 *redisa.IntCmd) {
	fake.sRemMutex.Lock()
	defer fake.sRemMutex.Unlock()
	fake.SRemStub = nil
	fake.sRemReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SRemReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.sRemMutex.Lock()
	defer fake.sRemMutex.Unlock()
	fake.SRemStub = nil
	if fake.sRemReturnsOnCall == nil {
		fake.sRemReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.sRemReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SScan(arg1 context.Context, arg2 string, arg3 uint64, arg4 string, arg5 int64) *redisa.ScanCmd {
	fake.sScanMutex.Lock()
	ret, specificReturn := fake.sScanReturnsOnCall[len(fake.sScanArgsForCall)]
	fake.sScanArgsForCall = append(fake.sScanArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 uint64
		arg4 string
		arg5 int64
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.SScanStub
	fakeReturns := fake.sScanReturns
	fake.recordInvocation("SScan", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.sScanMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SScanCallCount() int {
	fake.sScanMutex.RLock()
	defer fake.sScanMutex.RUnlock()
	return len(fake.sScanArgsForCall)
}

func (fake *FakeCmdable) SScanCalls(stub func(context.Context, string, uint64, string, int64) *redisa.ScanCmd) {
	fake.sScanMutex.Lock()
	defer fake.sScanMutex.Unlock()
	fake.SScanStub = stub
}

func (fake *FakeCmdable) SScanArgsForCall(i int) (context.Context, string, uint64, string, int64) {
	fake.sScanMutex.RLock()
	defer fake.sScanMutex.RUnlock()
	argsForCall := fake.sScanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) SScanReturns(result1 *redisa.ScanCmd) {
	fake.sScanMutex.Lock()
	defer fake.sScanMutex.Unlock()
	fake.SScanStub = nil
	fake.sScanReturns = struct {
		result1 *redisa.ScanCmd
	}{result1}
}

func (fake *FakeCmdable) SScanReturnsOnCall(i int, result1 *redisa.ScanCmd) {
	fake.sScanMutex.Lock()
	defer fake.sScanMutex.Unlock()
	fake.SScanStub = nil
	if fake.sScanReturnsOnCall == nil {
		fake.sScanReturnsOnCall = make(map[int]struct {
			result1 *redisa.ScanCmd
		})
	}
	fake.sScanReturnsOnCall[i] = struct {
		result1 *redisa.ScanCmd
	}{result1}
}

func (fake *FakeCmdable) SUnion(arg1 context.Context, arg2 ...string) *redisa.StringSliceCmd {
	fake.sUnionMutex.Lock()
	ret, specificReturn := fake.sUnionReturnsOnCall[len(fake.sUnionArgsForCall)]
	fake.sUnionArgsForCall = append(fake.sUnionArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.SUnionStub
	fakeReturns := fake.sUnionReturns
	fake.recordInvocation("SUnion", []interface{}{arg1, arg2})
	fake.sUnionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SUnionCallCount() int {
	fake.sUnionMutex.RLock()
	defer fake.sUnionMutex.RUnlock()
	return len(fake.sUnionArgsForCall)
}

func (fake *FakeCmdable) SUnionCalls(stub func(context.Context, ...string) *redisa.StringSliceCmd) {
	fake.sUnionMutex.Lock()
	defer fake.sUnionMutex.Unlock()
	fake.SUnionStub = stub
}

func (fake *FakeCmdable) SUnionArgsForCall(i int) (context.Context, []string) {
	fake.sUnionMutex.RLock()
	defer fake.sUnionMutex.RUnlock()
	argsForCall := fake.sUnionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) SUnionReturns(result1 *redisa.StringSliceCmd) {
	fake.sUnionMutex.Lock()
	defer fake.sUnionMutex.Unlock()
	fake.SUnionStub = nil
	fake.sUnionReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SUnionReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.sUnionMutex.Lock()
	defer fake.sUnionMutex.Unlock()
	fake.SUnionStub = nil
	if fake.sUnionReturnsOnCall == nil {
		fake.sUnionReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.sUnionReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SUnionStore(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntCmd {
	fake.sUnionStoreMutex.Lock()
	ret, specificReturn := fake.sUnionStoreReturnsOnCall[len(fake.sUnionStoreArgsForCall)]
	fake.sUnionStoreArgsForCall = append(fake.sUnionStoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.SUnionStoreStub
	fakeReturns := fake.sUnionStoreReturns
	fake.recordInvocation("SUnionStore", []interface{}{arg1, arg2, arg3})
	fake.sUnionStoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SUnionStoreCallCount() int {
	fake.sUnionStoreMutex.RLock()
	defer fake.sUnionStoreMutex.RUnlock()
	return len(fake.sUnionStoreArgsForCall)
}

func (fake *FakeCmdable) SUnionStoreCalls(stub func(context.Context, string, ...string) *redisa.IntCmd) {
	fake.sUnionStoreMutex.Lock()
	defer fake.sUnionStoreMutex.Unlock()
	fake.SUnionStoreStub = stub
}

func (fake *FakeCmdable) SUnionStoreArgsForCall(i int) (context.Context, string, []string) {
	fake.sUnionStoreMutex.RLock()
	defer fake.sUnionStoreMutex.RUnlock()
	argsForCall := fake.sUnionStoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SUnionStoreReturns(result1 *redisa.IntCmd) {
	fake.sUnionStoreMutex.Lock()
	defer fake.sUnionStoreMutex.Unlock()
	fake.SUnionStoreStub = nil
	fake.sUnionStoreReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SUnionStoreReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.sUnionStoreMutex.Lock()
	defer fake.sUnionStoreMutex.Unlock()
	fake.SUnionStoreStub = nil
	if fake.sUnionStoreReturnsOnCall == nil {
		fake.sUnionStoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.sUnionStoreReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) Save(arg1 context.Context) *redisa.StatusCmd {
	fake.saveMutex.Lock()
	ret, specificReturn := fake.saveReturnsOnCall[len(fake.saveArgsForCall)]
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.SaveStub
	fakeReturns := fake.saveReturns
	fake.recordInvocation("Save", []interface{}{arg1})
	fake.saveMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeCmdable) SaveCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = stub
}

func (fake *FakeCmdable) SaveArgsForCall(i int) context.Context {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	argsForCall := fake.saveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) SaveReturns(result1 *redisa.StatusCmd) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) SaveReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	if fake.saveReturnsOnCall == nil {
		fake.saveReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.saveReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) Scan(arg1 context.Context, arg2 uint64, arg3 string, arg4 int64) *redisa.ScanCmd {
	fake.scanMutex.Lock()
	ret, specificReturn := fake.scanReturnsOnCall[len(fake.scanArgsForCall)]
	fake.scanArgsForCall = append(fake.scanArgsForCall, struct {
		arg1 context.Context
		arg2 uint64
		arg3 string
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.ScanStub
	fakeReturns := fake.scanReturns
	fake.recordInvocation("Scan", []interface{}{arg1, arg2, arg3, arg4})
	fake.scanMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ScanCallCount() int {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	return len(fake.scanArgsForCall)
}

func (fake *FakeCmdable) ScanCalls(stub func(context.Context, uint64, string, int64) *redisa.ScanCmd) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = stub
}

func (fake *FakeCmdable) ScanArgsForCall(i int) (context.Context, uint64, string, int64) {
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	argsForCall := fake.scanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) ScanReturns(result1 *redisa.ScanCmd) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = nil
	fake.scanReturns = struct {
		result1 *redisa.ScanCmd
	}{result1}
}

func (fake *FakeCmdable) ScanReturnsOnCall(i int, result1 *redisa.ScanCmd) {
	fake.scanMutex.Lock()
	defer fake.scanMutex.Unlock()
	fake.ScanStub = nil
	if fake.scanReturnsOnCall == nil {
		fake.scanReturnsOnCall = make(map[int]struct {
			result1 *redisa.ScanCmd
		})
	}
	fake.scanReturnsOnCall[i] = struct {
		result1 *redisa.ScanCmd
	}{result1}
}

func (fake *FakeCmdable) ScanType(arg1 context.Context, arg2 uint64, arg3 string, arg4 int64, arg5 string) *redisa.ScanCmd {
	fake.scanTypeMutex.Lock()
	ret, specificReturn := fake.scanTypeReturnsOnCall[len(fake.scanTypeArgsForCall)]
	fake.scanTypeArgsForCall = append(fake.scanTypeArgsForCall, struct {
		arg1 context.Context
		arg2 uint64
		arg3 string
		arg4 int64
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ScanTypeStub
	fakeReturns := fake.scanTypeReturns
	fake.recordInvocation("ScanType", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.scanTypeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ScanTypeCallCount() int {
	fake.scanTypeMutex.RLock()
	defer fake.scanTypeMutex.RUnlock()
	return len(fake.scanTypeArgsForCall)
}

func (fake *FakeCmdable) ScanTypeCalls(stub func(context.Context, uint64, string, int64, string) *redisa.ScanCmd) {
	fake.scanTypeMutex.Lock()
	defer fake.scanTypeMutex.Unlock()
	fake.ScanTypeStub = stub
}

func (fake *FakeCmdable) ScanTypeArgsForCall(i int) (context.Context, uint64, string, int64, string) {
	fake.scanTypeMutex.RLock()
	defer fake.scanTypeMutex.RUnlock()
	argsForCall := fake.scanTypeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) ScanTypeReturns(result1 *redisa.ScanCmd) {
	fake.scanTypeMutex.Lock()
	defer fake.scanTypeMutex.Unlock()
	fake.ScanTypeStub = nil
	fake.scanTypeReturns = struct {
		result1 *redisa.ScanCmd
	}{result1}
}

func (fake *FakeCmdable) ScanTypeReturnsOnCall(i int, result1 *redisa.ScanCmd) {
	fake.scanTypeMutex.Lock()
	defer fake.scanTypeMutex.Unlock()
	fake.ScanTypeStub = nil
	if fake.scanTypeReturnsOnCall == nil {
		fake.scanTypeReturnsOnCall = make(map[int]struct {
			result1 *redisa.ScanCmd
		})
	}
	fake.scanTypeReturnsOnCall[i] = struct {
		result1 *redisa.ScanCmd
	}{result1}
}

func (fake *FakeCmdable) ScriptExists(arg1 context.Context, arg2 ...string) *redisa.BoolSliceCmd {
	fake.scriptExistsMutex.Lock()
	ret, specificReturn := fake.scriptExistsReturnsOnCall[len(fake.scriptExistsArgsForCall)]
	fake.scriptExistsArgsForCall = append(fake.scriptExistsArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.ScriptExistsStub
	fakeReturns := fake.scriptExistsReturns
	fake.recordInvocation("ScriptExists", []interface{}{arg1, arg2})
	fake.scriptExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ScriptExistsCallCount() int {
	fake.scriptExistsMutex.RLock()
	defer fake.scriptExistsMutex.RUnlock()
	return len(fake.scriptExistsArgsForCall)
}

func (fake *FakeCmdable) ScriptExistsCalls(stub func(context.Context, ...string) *redisa.BoolSliceCmd) {
	fake.scriptExistsMutex.Lock()
	defer fake.scriptExistsMutex.Unlock()
	fake.ScriptExistsStub = stub
}

func (fake *FakeCmdable) ScriptExistsArgsForCall(i int) (context.Context, []string) {
	fake.scriptExistsMutex.RLock()
	defer fake.scriptExistsMutex.RUnlock()
	argsForCall := fake.scriptExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ScriptExistsReturns(result1 *redisa.BoolSliceCmd) {
	fake.scriptExistsMutex.Lock()
	defer fake.scriptExistsMutex.Unlock()
	fake.ScriptExistsStub = nil
	fake.scriptExistsReturns = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ScriptExistsReturnsOnCall(i int, result1 *redisa.BoolSliceCmd) {
	fake.scriptExistsMutex.Lock()
	defer fake.scriptExistsMutex.Unlock()
	fake.ScriptExistsStub = nil
	if fake.scriptExistsReturnsOnCall == nil {
		fake.scriptExistsReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolSliceCmd
		})
	}
	fake.scriptExistsReturnsOnCall[i] = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ScriptFlush(arg1 context.Context) *redisa.StatusCmd {
	fake.scriptFlushMutex.Lock()
	ret, specificReturn := fake.scriptFlushReturnsOnCall[len(fake.scriptFlushArgsForCall)]
	fake.scriptFlushArgsForCall = append(fake.scriptFlushArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ScriptFlushStub
	fakeReturns := fake.scriptFlushReturns
	fake.recordInvocation("ScriptFlush", []interface{}{arg1})
	fake.scriptFlushMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ScriptFlushCallCount() int {
	fake.scriptFlushMutex.RLock()
	defer fake.scriptFlushMutex.RUnlock()
	return len(fake.scriptFlushArgsForCall)
}

func (fake *FakeCmdable) ScriptFlushCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.scriptFlushMutex.Lock()
	defer fake.scriptFlushMutex.Unlock()
	fake.ScriptFlushStub = stub
}

func (fake *FakeCmdable) ScriptFlushArgsForCall(i int) context.Context {
	fake.scriptFlushMutex.RLock()
	defer fake.scriptFlushMutex.RUnlock()
	argsForCall := fake.scriptFlushArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ScriptFlushReturns(result1 *redisa.StatusCmd) {
	fake.scriptFlushMutex.Lock()
	defer fake.scriptFlushMutex.Unlock()
	fake.ScriptFlushStub = nil
	fake.scriptFlushReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ScriptFlushReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.scriptFlushMutex.Lock()
	defer fake.scriptFlushMutex.Unlock()
	fake.ScriptFlushStub = nil
	if fake.scriptFlushReturnsOnCall == nil {
		fake.scriptFlushReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.scriptFlushReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ScriptKill(arg1 context.Context) *redisa.StatusCmd {
	fake.scriptKillMutex.Lock()
	ret, specificReturn := fake.scriptKillReturnsOnCall[len(fake.scriptKillArgsForCall)]
	fake.scriptKillArgsForCall = append(fake.scriptKillArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ScriptKillStub
	fakeReturns := fake.scriptKillReturns
	fake.recordInvocation("ScriptKill", []interface{}{arg1})
	fake.scriptKillMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ScriptKillCallCount() int {
	fake.scriptKillMutex.RLock()
	defer fake.scriptKillMutex.RUnlock()
	return len(fake.scriptKillArgsForCall)
}

func (fake *FakeCmdable) ScriptKillCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.scriptKillMutex.Lock()
	defer fake.scriptKillMutex.Unlock()
	fake.ScriptKillStub = stub
}

func (fake *FakeCmdable) ScriptKillArgsForCall(i int) context.Context {
	fake.scriptKillMutex.RLock()
	defer fake.scriptKillMutex.RUnlock()
	argsForCall := fake.scriptKillArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ScriptKillReturns(result1 *redisa.StatusCmd) {
	fake.scriptKillMutex.Lock()
	defer fake.scriptKillMutex.Unlock()
	fake.ScriptKillStub = nil
	fake.scriptKillReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ScriptKillReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.scriptKillMutex.Lock()
	defer fake.scriptKillMutex.Unlock()
	fake.ScriptKillStub = nil
	if fake.scriptKillReturnsOnCall == nil {
		fake.scriptKillReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.scriptKillReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ScriptLoad(arg1 context.Context, arg2 string) *redisa.StringCmd {
	fake.scriptLoadMutex.Lock()
	ret, specificReturn := fake.scriptLoadReturnsOnCall[len(fake.scriptLoadArgsForCall)]
	fake.scriptLoadArgsForCall = append(fake.scriptLoadArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ScriptLoadStub
	fakeReturns := fake.scriptLoadReturns
	fake.recordInvocation("ScriptLoad", []interface{}{arg1, arg2})
	fake.scriptLoadMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ScriptLoadCallCount() int {
	fake.scriptLoadMutex.RLock()
	defer fake.scriptLoadMutex.RUnlock()
	return len(fake.scriptLoadArgsForCall)
}

func (fake *FakeCmdable) ScriptLoadCalls(stub func(context.Context, string) *redisa.StringCmd) {
	fake.scriptLoadMutex.Lock()
	defer fake.scriptLoadMutex.Unlock()
	fake.ScriptLoadStub = stub
}

func (fake *FakeCmdable) ScriptLoadArgsForCall(i int) (context.Context, string) {
	fake.scriptLoadMutex.RLock()
	defer fake.scriptLoadMutex.RUnlock()
	argsForCall := fake.scriptLoadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ScriptLoadReturns(result1 *redisa.StringCmd) {
	fake.scriptLoadMutex.Lock()
	defer fake.scriptLoadMutex.Unlock()
	fake.ScriptLoadStub = nil
	fake.scriptLoadReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) ScriptLoadReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.scriptLoadMutex.Lock()
	defer fake.scriptLoadMutex.Unlock()
	fake.ScriptLoadStub = nil
	if fake.scriptLoadReturnsOnCall == nil {
		fake.scriptLoadReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.scriptLoadReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) Set(arg1 context.Context, arg2 string, arg3 interface{}, arg4 time.Duration) *redisa.StatusCmd {
	fake.setMutex.Lock()
	ret, specificReturn := fake.setReturnsOnCall[len(fake.setArgsForCall)]
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 time.Duration
	}{arg1, arg2, arg3, arg4})
	stub := fake.SetStub
	fakeReturns := fake.setReturns
	fake.recordInvocation("Set", []interface{}{arg1, arg2, arg3, arg4})
	fake.setMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeCmdable) SetCalls(stub func(context.Context, string, interface{}, time.Duration) *redisa.StatusCmd) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = stub
}

func (fake *FakeCmdable) SetArgsForCall(i int) (context.Context, string, interface{}, time.Duration) {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	argsForCall := fake.setArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) SetReturns(result1 *redisa.StatusCmd) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = nil
	fake.setReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) SetReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = nil
	if fake.setReturnsOnCall == nil {
		fake.setReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.setReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) SetArgs(arg1 context.Context, arg2 string, arg3 interface{}, arg4 redisa.SetArgs) *redisa.StatusCmd {
	fake.setArgsMutex.Lock()
	ret, specificReturn := fake.setArgsReturnsOnCall[len(fake.setArgsArgsForCall)]
	fake.setArgsArgsForCall = append(fake.setArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 redisa.SetArgs
	}{arg1, arg2, arg3, arg4})
	stub := fake.SetArgsStub
	fakeReturns := fake.setArgsReturns
	fake.recordInvocation("SetArgs", []interface{}{arg1, arg2, arg3, arg4})
	fake.setArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SetArgsCallCount() int {
	fake.setArgsMutex.RLock()
	defer fake.setArgsMutex.RUnlock()
	return len(fake.setArgsArgsForCall)
}

func (fake *FakeCmdable) SetArgsCalls(stub func(context.Context, string, interface{}, redisa.SetArgs) *redisa.StatusCmd) {
	fake.setArgsMutex.Lock()
	defer fake.setArgsMutex.Unlock()
	fake.SetArgsStub = stub
}

func (fake *FakeCmdable) SetArgsArgsForCall(i int) (context.Context, string, interface{}, redisa.SetArgs) {
	fake.setArgsMutex.RLock()
	defer fake.setArgsMutex.RUnlock()
	argsForCall := fake.setArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) SetArgsReturns(result1 *redisa.StatusCmd) {
	fake.setArgsMutex.Lock()
	defer fake.setArgsMutex.Unlock()
	fake.SetArgsStub = nil
	fake.setArgsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) SetArgsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.setArgsMutex.Lock()
	defer fake.setArgsMutex.Unlock()
	fake.SetArgsStub = nil
	if fake.setArgsReturnsOnCall == nil {
		fake.setArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.setArgsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) SetBit(arg1 context.Context, arg2 string, arg3 int64, arg4 int) *redisa.IntCmd {
	fake.setBitMutex.Lock()
	ret, specificReturn := fake.setBitReturnsOnCall[len(fake.setBitArgsForCall)]
	fake.setBitArgsForCall = append(fake.setBitArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.SetBitStub
	fakeReturns := fake.setBitReturns
	fake.recordInvocation("SetBit", []interface{}{arg1, arg2, arg3, arg4})
	fake.setBitMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SetBitCallCount() int {
	fake.setBitMutex.RLock()
	defer fake.setBitMutex.RUnlock()
	return len(fake.setBitArgsForCall)
}

func (fake *FakeCmdable) SetBitCalls(stub func(context.Context, string, int64, int) *redisa.IntCmd) {
	fake.setBitMutex.Lock()
	defer fake.setBitMutex.Unlock()
	fake.SetBitStub = stub
}

func (fake *FakeCmdable) SetBitArgsForCall(i int) (context.Context, string, int64, int) {
	fake.setBitMutex.RLock()
	defer fake.setBitMutex.RUnlock()
	argsForCall := fake.setBitArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) SetBitReturns(result1 *redisa.IntCmd) {
	fake.setBitMutex.Lock()
	defer fake.setBitMutex.Unlock()
	fake.SetBitStub = nil
	fake.setBitReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SetBitReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.setBitMutex.Lock()
	defer fake.setBitMutex.Unlock()
	fake.SetBitStub = nil
	if fake.setBitReturnsOnCall == nil {
		fake.setBitReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.setBitReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SetEx(arg1 context.Context, arg2 string, arg3 interface{}, arg4 time.Duration) *redisa.StatusCmd {
	fake.setExMutex.Lock()
	ret, specificReturn := fake.setExReturnsOnCall[len(fake.setExArgsForCall)]
	fake.setExArgsForCall = append(fake.setExArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 time.Duration
	}{arg1, arg2, arg3, arg4})
	stub := fake.SetExStub
	fakeReturns := fake.setExReturns
	fake.recordInvocation("SetEx", []interface{}{arg1, arg2, arg3, arg4})
	fake.setExMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SetExCallCount() int {
	fake.setExMutex.RLock()
	defer fake.setExMutex.RUnlock()
	return len(fake.setExArgsForCall)
}

func (fake *FakeCmdable) SetExCalls(stub func(context.Context, string, interface{}, time.Duration) *redisa.StatusCmd) {
	fake.setExMutex.Lock()
	defer fake.setExMutex.Unlock()
	fake.SetExStub = stub
}

func (fake *FakeCmdable) SetExArgsForCall(i int) (context.Context, string, interface{}, time.Duration) {
	fake.setExMutex.RLock()
	defer fake.setExMutex.RUnlock()
	argsForCall := fake.setExArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) SetExReturns(result1 *redisa.StatusCmd) {
	fake.setExMutex.Lock()
	defer fake.setExMutex.Unlock()
	fake.SetExStub = nil
	fake.setExReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) SetExReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.setExMutex.Lock()
	defer fake.setExMutex.Unlock()
	fake.SetExStub = nil
	if fake.setExReturnsOnCall == nil {
		fake.setExReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.setExReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) SetNX(arg1 context.Context, arg2 string, arg3 interface{}, arg4 time.Duration) *redisa.BoolCmd {
	fake.setNXMutex.Lock()
	ret, specificReturn := fake.setNXReturnsOnCall[len(fake.setNXArgsForCall)]
	fake.setNXArgsForCall = append(fake.setNXArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 time.Duration
	}{arg1, arg2, arg3, arg4})
	stub := fake.SetNXStub
	fakeReturns := fake.setNXReturns
	fake.recordInvocation("SetNX", []interface{}{arg1, arg2, arg3, arg4})
	fake.setNXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SetNXCallCount() int {
	fake.setNXMutex.RLock()
	defer fake.setNXMutex.RUnlock()
	return len(fake.setNXArgsForCall)
}

func (fake *FakeCmdable) SetNXCalls(stub func(context.Context, string, interface{}, time.Duration) *redisa.BoolCmd) {
	fake.setNXMutex.Lock()
	defer fake.setNXMutex.Unlock()
	fake.SetNXStub = stub
}

func (fake *FakeCmdable) SetNXArgsForCall(i int) (context.Context, string, interface{}, time.Duration) {
	fake.setNXMutex.RLock()
	defer fake.setNXMutex.RUnlock()
	argsForCall := fake.setNXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) SetNXReturns(result1 *redisa.BoolCmd) {
	fake.setNXMutex.Lock()
	defer fake.setNXMutex.Unlock()
	fake.SetNXStub = nil
	fake.setNXReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) SetNXReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.setNXMutex.Lock()
	defer fake.setNXMutex.Unlock()
	fake.SetNXStub = nil
	if fake.setNXReturnsOnCall == nil {
		fake.setNXReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.setNXReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) SetRange(arg1 context.Context, arg2 string, arg3 int64, arg4 string) *redisa.IntCmd {
	fake.setRangeMutex.Lock()
	ret, specificReturn := fake.setRangeReturnsOnCall[len(fake.setRangeArgsForCall)]
	fake.setRangeArgsForCall = append(fake.setRangeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.SetRangeStub
	fakeReturns := fake.setRangeReturns
	fake.recordInvocation("SetRange", []interface{}{arg1, arg2, arg3, arg4})
	fake.setRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SetRangeCallCount() int {
	fake.setRangeMutex.RLock()
	defer fake.setRangeMutex.RUnlock()
	return len(fake.setRangeArgsForCall)
}

func (fake *FakeCmdable) SetRangeCalls(stub func(context.Context, string, int64, string) *redisa.IntCmd) {
	fake.setRangeMutex.Lock()
	defer fake.setRangeMutex.Unlock()
	fake.SetRangeStub = stub
}

func (fake *FakeCmdable) SetRangeArgsForCall(i int) (context.Context, string, int64, string) {
	fake.setRangeMutex.RLock()
	defer fake.setRangeMutex.RUnlock()
	argsForCall := fake.setRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) SetRangeReturns(result1 *redisa.IntCmd) {
	fake.setRangeMutex.Lock()
	defer fake.setRangeMutex.Unlock()
	fake.SetRangeStub = nil
	fake.setRangeReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SetRangeReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.setRangeMutex.Lock()
	defer fake.setRangeMutex.Unlock()
	fake.SetRangeStub = nil
	if fake.setRangeReturnsOnCall == nil {
		fake.setRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.setRangeReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SetXX(arg1 context.Context, arg2 string, arg3 interface{}, arg4 time.Duration) *redisa.BoolCmd {
	fake.setXXMutex.Lock()
	ret, specificReturn := fake.setXXReturnsOnCall[len(fake.setXXArgsForCall)]
	fake.setXXArgsForCall = append(fake.setXXArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 time.Duration
	}{arg1, arg2, arg3, arg4})
	stub := fake.SetXXStub
	fakeReturns := fake.setXXReturns
	fake.recordInvocation("SetXX", []interface{}{arg1, arg2, arg3, arg4})
	fake.setXXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SetXXCallCount() int {
	fake.setXXMutex.RLock()
	defer fake.setXXMutex.RUnlock()
	return len(fake.setXXArgsForCall)
}

func (fake *FakeCmdable) SetXXCalls(stub func(context.Context, string, interface{}, time.Duration) *redisa.BoolCmd) {
	fake.setXXMutex.Lock()
	defer fake.setXXMutex.Unlock()
	fake.SetXXStub = stub
}

func (fake *FakeCmdable) SetXXArgsForCall(i int) (context.Context, string, interface{}, time.Duration) {
	fake.setXXMutex.RLock()
	defer fake.setXXMutex.RUnlock()
	argsForCall := fake.setXXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) SetXXReturns(result1 *redisa.BoolCmd) {
	fake.setXXMutex.Lock()
	defer fake.setXXMutex.Unlock()
	fake.SetXXStub = nil
	fake.setXXReturns = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) SetXXReturnsOnCall(i int, result1 *redisa.BoolCmd) {
	fake.setXXMutex.Lock()
	defer fake.setXXMutex.Unlock()
	fake.SetXXStub = nil
	if fake.setXXReturnsOnCall == nil {
		fake.setXXReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolCmd
		})
	}
	fake.setXXReturnsOnCall[i] = struct {
		result1 *redisa.BoolCmd
	}{result1}
}

func (fake *FakeCmdable) Shutdown(arg1 context.Context) *redisa.StatusCmd {
	fake.shutdownMutex.Lock()
	ret, specificReturn := fake.shutdownReturnsOnCall[len(fake.shutdownArgsForCall)]
	fake.shutdownArgsForCall = append(fake.shutdownArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ShutdownStub
	fakeReturns := fake.shutdownReturns
	fake.recordInvocation("Shutdown", []interface{}{arg1})
	fake.shutdownMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ShutdownCallCount() int {
	fake.shutdownMutex.RLock()
	defer fake.shutdownMutex.RUnlock()
	return len(fake.shutdownArgsForCall)
}

func (fake *FakeCmdable) ShutdownCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.shutdownMutex.Lock()
	defer fake.shutdownMutex.Unlock()
	fake.ShutdownStub = stub
}

func (fake *FakeCmdable) ShutdownArgsForCall(i int) context.Context {
	fake.shutdownMutex.RLock()
	defer fake.shutdownMutex.RUnlock()
	argsForCall := fake.shutdownArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ShutdownReturns(result1 *redisa.StatusCmd) {
	fake.shutdownMutex.Lock()
	defer fake.shutdownMutex.Unlock()
	fake.ShutdownStub = nil
	fake.shutdownReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ShutdownReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.shutdownMutex.Lock()
	defer fake.shutdownMutex.Unlock()
	fake.ShutdownStub = nil
	if fake.shutdownReturnsOnCall == nil {
		fake.shutdownReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.shutdownReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ShutdownNoSave(arg1 context.Context) *redisa.StatusCmd {
	fake.shutdownNoSaveMutex.Lock()
	ret, specificReturn := fake.shutdownNoSaveReturnsOnCall[len(fake.shutdownNoSaveArgsForCall)]
	fake.shutdownNoSaveArgsForCall = append(fake.shutdownNoSaveArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ShutdownNoSaveStub
	fakeReturns := fake.shutdownNoSaveReturns
	fake.recordInvocation("ShutdownNoSave", []interface{}{arg1})
	fake.shutdownNoSaveMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ShutdownNoSaveCallCount() int {
	fake.shutdownNoSaveMutex.RLock()
	defer fake.shutdownNoSaveMutex.RUnlock()
	return len(fake.shutdownNoSaveArgsForCall)
}

func (fake *FakeCmdable) ShutdownNoSaveCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.shutdownNoSaveMutex.Lock()
	defer fake.shutdownNoSaveMutex.Unlock()
	fake.ShutdownNoSaveStub = stub
}

func (fake *FakeCmdable) ShutdownNoSaveArgsForCall(i int) context.Context {
	fake.shutdownNoSaveMutex.RLock()
	defer fake.shutdownNoSaveMutex.RUnlock()
	argsForCall := fake.shutdownNoSaveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ShutdownNoSaveReturns(result1 *redisa.StatusCmd) {
	fake.shutdownNoSaveMutex.Lock()
	defer fake.shutdownNoSaveMutex.Unlock()
	fake.ShutdownNoSaveStub = nil
	fake.shutdownNoSaveReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ShutdownNoSaveReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.shutdownNoSaveMutex.Lock()
	defer fake.shutdownNoSaveMutex.Unlock()
	fake.ShutdownNoSaveStub = nil
	if fake.shutdownNoSaveReturnsOnCall == nil {
		fake.shutdownNoSaveReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.shutdownNoSaveReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ShutdownSave(arg1 context.Context) *redisa.StatusCmd {
	fake.shutdownSaveMutex.Lock()
	ret, specificReturn := fake.shutdownSaveReturnsOnCall[len(fake.shutdownSaveArgsForCall)]
	fake.shutdownSaveArgsForCall = append(fake.shutdownSaveArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ShutdownSaveStub
	fakeReturns := fake.shutdownSaveReturns
	fake.recordInvocation("ShutdownSave", []interface{}{arg1})
	fake.shutdownSaveMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ShutdownSaveCallCount() int {
	fake.shutdownSaveMutex.RLock()
	defer fake.shutdownSaveMutex.RUnlock()
	return len(fake.shutdownSaveArgsForCall)
}

func (fake *FakeCmdable) ShutdownSaveCalls(stub func(context.Context) *redisa.StatusCmd) {
	fake.shutdownSaveMutex.Lock()
	defer fake.shutdownSaveMutex.Unlock()
	fake.ShutdownSaveStub = stub
}

func (fake *FakeCmdable) ShutdownSaveArgsForCall(i int) context.Context {
	fake.shutdownSaveMutex.RLock()
	defer fake.shutdownSaveMutex.RUnlock()
	argsForCall := fake.shutdownSaveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) ShutdownSaveReturns(result1 *redisa.StatusCmd) {
	fake.shutdownSaveMutex.Lock()
	defer fake.shutdownSaveMutex.Unlock()
	fake.ShutdownSaveStub = nil
	fake.shutdownSaveReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) ShutdownSaveReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.shutdownSaveMutex.Lock()
	defer fake.shutdownSaveMutex.Unlock()
	fake.ShutdownSaveStub = nil
	if fake.shutdownSaveReturnsOnCall == nil {
		fake.shutdownSaveReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.shutdownSaveReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) SlaveOf(arg1 context.Context, arg2 string, arg3 string) *redisa.StatusCmd {
	fake.slaveOfMutex.Lock()
	ret, specificReturn := fake.slaveOfReturnsOnCall[len(fake.slaveOfArgsForCall)]
	fake.slaveOfArgsForCall = append(fake.slaveOfArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.SlaveOfStub
	fakeReturns := fake.slaveOfReturns
	fake.recordInvocation("SlaveOf", []interface{}{arg1, arg2, arg3})
	fake.slaveOfMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SlaveOfCallCount() int {
	fake.slaveOfMutex.RLock()
	defer fake.slaveOfMutex.RUnlock()
	return len(fake.slaveOfArgsForCall)
}

func (fake *FakeCmdable) SlaveOfCalls(stub func(context.Context, string, string) *redisa.StatusCmd) {
	fake.slaveOfMutex.Lock()
	defer fake.slaveOfMutex.Unlock()
	fake.SlaveOfStub = stub
}

func (fake *FakeCmdable) SlaveOfArgsForCall(i int) (context.Context, string, string) {
	fake.slaveOfMutex.RLock()
	defer fake.slaveOfMutex.RUnlock()
	argsForCall := fake.slaveOfArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SlaveOfReturns(result1 *redisa.StatusCmd) {
	fake.slaveOfMutex.Lock()
	defer fake.slaveOfMutex.Unlock()
	fake.SlaveOfStub = nil
	fake.slaveOfReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) SlaveOfReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.slaveOfMutex.Lock()
	defer fake.slaveOfMutex.Unlock()
	fake.SlaveOfStub = nil
	if fake.slaveOfReturnsOnCall == nil {
		fake.slaveOfReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.slaveOfReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) SlowLogGet(arg1 context.Context, arg2 int64) *redisa.SlowLogCmd {
	fake.slowLogGetMutex.Lock()
	ret, specificReturn := fake.slowLogGetReturnsOnCall[len(fake.slowLogGetArgsForCall)]
	fake.slowLogGetArgsForCall = append(fake.slowLogGetArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.SlowLogGetStub
	fakeReturns := fake.slowLogGetReturns
	fake.recordInvocation("SlowLogGet", []interface{}{arg1, arg2})
	fake.slowLogGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SlowLogGetCallCount() int {
	fake.slowLogGetMutex.RLock()
	defer fake.slowLogGetMutex.RUnlock()
	return len(fake.slowLogGetArgsForCall)
}

func (fake *FakeCmdable) SlowLogGetCalls(stub func(context.Context, int64) *redisa.SlowLogCmd) {
	fake.slowLogGetMutex.Lock()
	defer fake.slowLogGetMutex.Unlock()
	fake.SlowLogGetStub = stub
}

func (fake *FakeCmdable) SlowLogGetArgsForCall(i int) (context.Context, int64) {
	fake.slowLogGetMutex.RLock()
	defer fake.slowLogGetMutex.RUnlock()
	argsForCall := fake.slowLogGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) SlowLogGetReturns(result1 *redisa.SlowLogCmd) {
	fake.slowLogGetMutex.Lock()
	defer fake.slowLogGetMutex.Unlock()
	fake.SlowLogGetStub = nil
	fake.slowLogGetReturns = struct {
		result1 *redisa.SlowLogCmd
	}{result1}
}

func (fake *FakeCmdable) SlowLogGetReturnsOnCall(i int, result1 *redisa.SlowLogCmd) {
	fake.slowLogGetMutex.Lock()
	defer fake.slowLogGetMutex.Unlock()
	fake.SlowLogGetStub = nil
	if fake.slowLogGetReturnsOnCall == nil {
		fake.slowLogGetReturnsOnCall = make(map[int]struct {
			result1 *redisa.SlowLogCmd
		})
	}
	fake.slowLogGetReturnsOnCall[i] = struct {
		result1 *redisa.SlowLogCmd
	}{result1}
}

func (fake *FakeCmdable) Sort(arg1 context.Context, arg2 string, arg3 *redisa.Sort) *redisa.StringSliceCmd {
	fake.sortMutex.Lock()
	ret, specificReturn := fake.sortReturnsOnCall[len(fake.sortArgsForCall)]
	fake.sortArgsForCall = append(fake.sortArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.Sort
	}{arg1, arg2, arg3})
	stub := fake.SortStub
	fakeReturns := fake.sortReturns
	fake.recordInvocation("Sort", []interface{}{arg1, arg2, arg3})
	fake.sortMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SortCallCount() int {
	fake.sortMutex.RLock()
	defer fake.sortMutex.RUnlock()
	return len(fake.sortArgsForCall)
}

func (fake *FakeCmdable) SortCalls(stub func(context.Context, string, *redisa.Sort) *redisa.StringSliceCmd) {
	fake.sortMutex.Lock()
	defer fake.sortMutex.Unlock()
	fake.SortStub = stub
}

func (fake *FakeCmdable) SortArgsForCall(i int) (context.Context, string, *redisa.Sort) {
	fake.sortMutex.RLock()
	defer fake.sortMutex.RUnlock()
	argsForCall := fake.sortArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SortReturns(result1 *redisa.StringSliceCmd) {
	fake.sortMutex.Lock()
	defer fake.sortMutex.Unlock()
	fake.SortStub = nil
	fake.sortReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SortReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.sortMutex.Lock()
	defer fake.sortMutex.Unlock()
	fake.SortStub = nil
	if fake.sortReturnsOnCall == nil {
		fake.sortReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.sortReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SortInterfaces(arg1 context.Context, arg2 string, arg3 *redisa.Sort) *redisa.SliceCmd {
	fake.sortInterfacesMutex.Lock()
	ret, specificReturn := fake.sortInterfacesReturnsOnCall[len(fake.sortInterfacesArgsForCall)]
	fake.sortInterfacesArgsForCall = append(fake.sortInterfacesArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.Sort
	}{arg1, arg2, arg3})
	stub := fake.SortInterfacesStub
	fakeReturns := fake.sortInterfacesReturns
	fake.recordInvocation("SortInterfaces", []interface{}{arg1, arg2, arg3})
	fake.sortInterfacesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SortInterfacesCallCount() int {
	fake.sortInterfacesMutex.RLock()
	defer fake.sortInterfacesMutex.RUnlock()
	return len(fake.sortInterfacesArgsForCall)
}

func (fake *FakeCmdable) SortInterfacesCalls(stub func(context.Context, string, *redisa.Sort) *redisa.SliceCmd) {
	fake.sortInterfacesMutex.Lock()
	defer fake.sortInterfacesMutex.Unlock()
	fake.SortInterfacesStub = stub
}

func (fake *FakeCmdable) SortInterfacesArgsForCall(i int) (context.Context, string, *redisa.Sort) {
	fake.sortInterfacesMutex.RLock()
	defer fake.sortInterfacesMutex.RUnlock()
	argsForCall := fake.sortInterfacesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SortInterfacesReturns(result1 *redisa.SliceCmd) {
	fake.sortInterfacesMutex.Lock()
	defer fake.sortInterfacesMutex.Unlock()
	fake.SortInterfacesStub = nil
	fake.sortInterfacesReturns = struct {
		result1 *redisa.SliceCmd
	}{result1}
}

func (fake *FakeCmdable) SortInterfacesReturnsOnCall(i int, result1 *redisa.SliceCmd) {
	fake.sortInterfacesMutex.Lock()
	defer fake.sortInterfacesMutex.Unlock()
	fake.SortInterfacesStub = nil
	if fake.sortInterfacesReturnsOnCall == nil {
		fake.sortInterfacesReturnsOnCall = make(map[int]struct {
			result1 *redisa.SliceCmd
		})
	}
	fake.sortInterfacesReturnsOnCall[i] = struct {
		result1 *redisa.SliceCmd
	}{result1}
}

func (fake *FakeCmdable) SortRO(arg1 context.Context, arg2 string, arg3 *redisa.Sort) *redisa.StringSliceCmd {
	fake.sortROMutex.Lock()
	ret, specificReturn := fake.sortROReturnsOnCall[len(fake.sortROArgsForCall)]
	fake.sortROArgsForCall = append(fake.sortROArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.Sort
	}{arg1, arg2, arg3})
	stub := fake.SortROStub
	fakeReturns := fake.sortROReturns
	fake.recordInvocation("SortRO", []interface{}{arg1, arg2, arg3})
	fake.sortROMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SortROCallCount() int {
	fake.sortROMutex.RLock()
	defer fake.sortROMutex.RUnlock()
	return len(fake.sortROArgsForCall)
}

func (fake *FakeCmdable) SortROCalls(stub func(context.Context, string, *redisa.Sort) *redisa.StringSliceCmd) {
	fake.sortROMutex.Lock()
	defer fake.sortROMutex.Unlock()
	fake.SortROStub = stub
}

func (fake *FakeCmdable) SortROArgsForCall(i int) (context.Context, string, *redisa.Sort) {
	fake.sortROMutex.RLock()
	defer fake.sortROMutex.RUnlock()
	argsForCall := fake.sortROArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) SortROReturns(result1 *redisa.StringSliceCmd) {
	fake.sortROMutex.Lock()
	defer fake.sortROMutex.Unlock()
	fake.SortROStub = nil
	fake.sortROReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SortROReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.sortROMutex.Lock()
	defer fake.sortROMutex.Unlock()
	fake.SortROStub = nil
	if fake.sortROReturnsOnCall == nil {
		fake.sortROReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.sortROReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) SortStore(arg1 context.Context, arg2 string, arg3 string, arg4 *redisa.Sort) *redisa.IntCmd {
	fake.sortStoreMutex.Lock()
	ret, specificReturn := fake.sortStoreReturnsOnCall[len(fake.sortStoreArgsForCall)]
	fake.sortStoreArgsForCall = append(fake.sortStoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *redisa.Sort
	}{arg1, arg2, arg3, arg4})
	stub := fake.SortStoreStub
	fakeReturns := fake.sortStoreReturns
	fake.recordInvocation("SortStore", []interface{}{arg1, arg2, arg3, arg4})
	fake.sortStoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) SortStoreCallCount() int {
	fake.sortStoreMutex.RLock()
	defer fake.sortStoreMutex.RUnlock()
	return len(fake.sortStoreArgsForCall)
}

func (fake *FakeCmdable) SortStoreCalls(stub func(context.Context, string, string, *redisa.Sort) *redisa.IntCmd) {
	fake.sortStoreMutex.Lock()
	defer fake.sortStoreMutex.Unlock()
	fake.SortStoreStub = stub
}

func (fake *FakeCmdable) SortStoreArgsForCall(i int) (context.Context, string, string, *redisa.Sort) {
	fake.sortStoreMutex.RLock()
	defer fake.sortStoreMutex.RUnlock()
	argsForCall := fake.sortStoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) SortStoreReturns(result1 *redisa.IntCmd) {
	fake.sortStoreMutex.Lock()
	defer fake.sortStoreMutex.Unlock()
	fake.SortStoreStub = nil
	fake.sortStoreReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) SortStoreReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.sortStoreMutex.Lock()
	defer fake.sortStoreMutex.Unlock()
	fake.SortStoreStub = nil
	if fake.sortStoreReturnsOnCall == nil {
		fake.sortStoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.sortStoreReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) StrLen(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.strLenMutex.Lock()
	ret, specificReturn := fake.strLenReturnsOnCall[len(fake.strLenArgsForCall)]
	fake.strLenArgsForCall = append(fake.strLenArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.StrLenStub
	fakeReturns := fake.strLenReturns
	fake.recordInvocation("StrLen", []interface{}{arg1, arg2})
	fake.strLenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) StrLenCallCount() int {
	fake.strLenMutex.RLock()
	defer fake.strLenMutex.RUnlock()
	return len(fake.strLenArgsForCall)
}

func (fake *FakeCmdable) StrLenCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.strLenMutex.Lock()
	defer fake.strLenMutex.Unlock()
	fake.StrLenStub = stub
}

func (fake *FakeCmdable) StrLenArgsForCall(i int) (context.Context, string) {
	fake.strLenMutex.RLock()
	defer fake.strLenMutex.RUnlock()
	argsForCall := fake.strLenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) StrLenReturns(result1 *redisa.IntCmd) {
	fake.strLenMutex.Lock()
	defer fake.strLenMutex.Unlock()
	fake.StrLenStub = nil
	fake.strLenReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) StrLenReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.strLenMutex.Lock()
	defer fake.strLenMutex.Unlock()
	fake.StrLenStub = nil
	if fake.strLenReturnsOnCall == nil {
		fake.strLenReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.strLenReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestAdd(arg1 context.Context, arg2 string, arg3 ...float64) *redisa.StatusCmd {
	fake.tDigestAddMutex.Lock()
	ret, specificReturn := fake.tDigestAddReturnsOnCall[len(fake.tDigestAddArgsForCall)]
	fake.tDigestAddArgsForCall = append(fake.tDigestAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []float64
	}{arg1, arg2, arg3})
	stub := fake.TDigestAddStub
	fakeReturns := fake.tDigestAddReturns
	fake.recordInvocation("TDigestAdd", []interface{}{arg1, arg2, arg3})
	fake.tDigestAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestAddCallCount() int {
	fake.tDigestAddMutex.RLock()
	defer fake.tDigestAddMutex.RUnlock()
	return len(fake.tDigestAddArgsForCall)
}

func (fake *FakeCmdable) TDigestAddCalls(stub func(context.Context, string, ...float64) *redisa.StatusCmd) {
	fake.tDigestAddMutex.Lock()
	defer fake.tDigestAddMutex.Unlock()
	fake.TDigestAddStub = stub
}

func (fake *FakeCmdable) TDigestAddArgsForCall(i int) (context.Context, string, []float64) {
	fake.tDigestAddMutex.RLock()
	defer fake.tDigestAddMutex.RUnlock()
	argsForCall := fake.tDigestAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TDigestAddReturns(result1 *redisa.StatusCmd) {
	fake.tDigestAddMutex.Lock()
	defer fake.tDigestAddMutex.Unlock()
	fake.TDigestAddStub = nil
	fake.tDigestAddReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestAddReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tDigestAddMutex.Lock()
	defer fake.tDigestAddMutex.Unlock()
	fake.TDigestAddStub = nil
	if fake.tDigestAddReturnsOnCall == nil {
		fake.tDigestAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tDigestAddReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestByRank(arg1 context.Context, arg2 string, arg3 ...uint64) *redisa.FloatSliceCmd {
	fake.tDigestByRankMutex.Lock()
	ret, specificReturn := fake.tDigestByRankReturnsOnCall[len(fake.tDigestByRankArgsForCall)]
	fake.tDigestByRankArgsForCall = append(fake.tDigestByRankArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []uint64
	}{arg1, arg2, arg3})
	stub := fake.TDigestByRankStub
	fakeReturns := fake.tDigestByRankReturns
	fake.recordInvocation("TDigestByRank", []interface{}{arg1, arg2, arg3})
	fake.tDigestByRankMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestByRankCallCount() int {
	fake.tDigestByRankMutex.RLock()
	defer fake.tDigestByRankMutex.RUnlock()
	return len(fake.tDigestByRankArgsForCall)
}

func (fake *FakeCmdable) TDigestByRankCalls(stub func(context.Context, string, ...uint64) *redisa.FloatSliceCmd) {
	fake.tDigestByRankMutex.Lock()
	defer fake.tDigestByRankMutex.Unlock()
	fake.TDigestByRankStub = stub
}

func (fake *FakeCmdable) TDigestByRankArgsForCall(i int) (context.Context, string, []uint64) {
	fake.tDigestByRankMutex.RLock()
	defer fake.tDigestByRankMutex.RUnlock()
	argsForCall := fake.tDigestByRankArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TDigestByRankReturns(result1 *redisa.FloatSliceCmd) {
	fake.tDigestByRankMutex.Lock()
	defer fake.tDigestByRankMutex.Unlock()
	fake.TDigestByRankStub = nil
	fake.tDigestByRankReturns = struct {
		result1 *redisa.FloatSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestByRankReturnsOnCall(i int, result1 *redisa.FloatSliceCmd) {
	fake.tDigestByRankMutex.Lock()
	defer fake.tDigestByRankMutex.Unlock()
	fake.TDigestByRankStub = nil
	if fake.tDigestByRankReturnsOnCall == nil {
		fake.tDigestByRankReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatSliceCmd
		})
	}
	fake.tDigestByRankReturnsOnCall[i] = struct {
		result1 *redisa.FloatSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestByRevRank(arg1 context.Context, arg2 string, arg3 ...uint64) *redisa.FloatSliceCmd {
	fake.tDigestByRevRankMutex.Lock()
	ret, specificReturn := fake.tDigestByRevRankReturnsOnCall[len(fake.tDigestByRevRankArgsForCall)]
	fake.tDigestByRevRankArgsForCall = append(fake.tDigestByRevRankArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []uint64
	}{arg1, arg2, arg3})
	stub := fake.TDigestByRevRankStub
	fakeReturns := fake.tDigestByRevRankReturns
	fake.recordInvocation("TDigestByRevRank", []interface{}{arg1, arg2, arg3})
	fake.tDigestByRevRankMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestByRevRankCallCount() int {
	fake.tDigestByRevRankMutex.RLock()
	defer fake.tDigestByRevRankMutex.RUnlock()
	return len(fake.tDigestByRevRankArgsForCall)
}

func (fake *FakeCmdable) TDigestByRevRankCalls(stub func(context.Context, string, ...uint64) *redisa.FloatSliceCmd) {
	fake.tDigestByRevRankMutex.Lock()
	defer fake.tDigestByRevRankMutex.Unlock()
	fake.TDigestByRevRankStub = stub
}

func (fake *FakeCmdable) TDigestByRevRankArgsForCall(i int) (context.Context, string, []uint64) {
	fake.tDigestByRevRankMutex.RLock()
	defer fake.tDigestByRevRankMutex.RUnlock()
	argsForCall := fake.tDigestByRevRankArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TDigestByRevRankReturns(result1 *redisa.FloatSliceCmd) {
	fake.tDigestByRevRankMutex.Lock()
	defer fake.tDigestByRevRankMutex.Unlock()
	fake.TDigestByRevRankStub = nil
	fake.tDigestByRevRankReturns = struct {
		result1 *redisa.FloatSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestByRevRankReturnsOnCall(i int, result1 *redisa.FloatSliceCmd) {
	fake.tDigestByRevRankMutex.Lock()
	defer fake.tDigestByRevRankMutex.Unlock()
	fake.TDigestByRevRankStub = nil
	if fake.tDigestByRevRankReturnsOnCall == nil {
		fake.tDigestByRevRankReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatSliceCmd
		})
	}
	fake.tDigestByRevRankReturnsOnCall[i] = struct {
		result1 *redisa.FloatSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestCDF(arg1 context.Context, arg2 string, arg3 ...float64) *redisa.FloatSliceCmd {
	fake.tDigestCDFMutex.Lock()
	ret, specificReturn := fake.tDigestCDFReturnsOnCall[len(fake.tDigestCDFArgsForCall)]
	fake.tDigestCDFArgsForCall = append(fake.tDigestCDFArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []float64
	}{arg1, arg2, arg3})
	stub := fake.TDigestCDFStub
	fakeReturns := fake.tDigestCDFReturns
	fake.recordInvocation("TDigestCDF", []interface{}{arg1, arg2, arg3})
	fake.tDigestCDFMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestCDFCallCount() int {
	fake.tDigestCDFMutex.RLock()
	defer fake.tDigestCDFMutex.RUnlock()
	return len(fake.tDigestCDFArgsForCall)
}

func (fake *FakeCmdable) TDigestCDFCalls(stub func(context.Context, string, ...float64) *redisa.FloatSliceCmd) {
	fake.tDigestCDFMutex.Lock()
	defer fake.tDigestCDFMutex.Unlock()
	fake.TDigestCDFStub = stub
}

func (fake *FakeCmdable) TDigestCDFArgsForCall(i int) (context.Context, string, []float64) {
	fake.tDigestCDFMutex.RLock()
	defer fake.tDigestCDFMutex.RUnlock()
	argsForCall := fake.tDigestCDFArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TDigestCDFReturns(result1 *redisa.FloatSliceCmd) {
	fake.tDigestCDFMutex.Lock()
	defer fake.tDigestCDFMutex.Unlock()
	fake.TDigestCDFStub = nil
	fake.tDigestCDFReturns = struct {
		result1 *redisa.FloatSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestCDFReturnsOnCall(i int, result1 *redisa.FloatSliceCmd) {
	fake.tDigestCDFMutex.Lock()
	defer fake.tDigestCDFMutex.Unlock()
	fake.TDigestCDFStub = nil
	if fake.tDigestCDFReturnsOnCall == nil {
		fake.tDigestCDFReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatSliceCmd
		})
	}
	fake.tDigestCDFReturnsOnCall[i] = struct {
		result1 *redisa.FloatSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestCreate(arg1 context.Context, arg2 string) *redisa.StatusCmd {
	fake.tDigestCreateMutex.Lock()
	ret, specificReturn := fake.tDigestCreateReturnsOnCall[len(fake.tDigestCreateArgsForCall)]
	fake.tDigestCreateArgsForCall = append(fake.tDigestCreateArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TDigestCreateStub
	fakeReturns := fake.tDigestCreateReturns
	fake.recordInvocation("TDigestCreate", []interface{}{arg1, arg2})
	fake.tDigestCreateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestCreateCallCount() int {
	fake.tDigestCreateMutex.RLock()
	defer fake.tDigestCreateMutex.RUnlock()
	return len(fake.tDigestCreateArgsForCall)
}

func (fake *FakeCmdable) TDigestCreateCalls(stub func(context.Context, string) *redisa.StatusCmd) {
	fake.tDigestCreateMutex.Lock()
	defer fake.tDigestCreateMutex.Unlock()
	fake.TDigestCreateStub = stub
}

func (fake *FakeCmdable) TDigestCreateArgsForCall(i int) (context.Context, string) {
	fake.tDigestCreateMutex.RLock()
	defer fake.tDigestCreateMutex.RUnlock()
	argsForCall := fake.tDigestCreateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TDigestCreateReturns(result1 *redisa.StatusCmd) {
	fake.tDigestCreateMutex.Lock()
	defer fake.tDigestCreateMutex.Unlock()
	fake.TDigestCreateStub = nil
	fake.tDigestCreateReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestCreateReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tDigestCreateMutex.Lock()
	defer fake.tDigestCreateMutex.Unlock()
	fake.TDigestCreateStub = nil
	if fake.tDigestCreateReturnsOnCall == nil {
		fake.tDigestCreateReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tDigestCreateReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestCreateWithCompression(arg1 context.Context, arg2 string, arg3 int64) *redisa.StatusCmd {
	fake.tDigestCreateWithCompressionMutex.Lock()
	ret, specificReturn := fake.tDigestCreateWithCompressionReturnsOnCall[len(fake.tDigestCreateWithCompressionArgsForCall)]
	fake.tDigestCreateWithCompressionArgsForCall = append(fake.tDigestCreateWithCompressionArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.TDigestCreateWithCompressionStub
	fakeReturns := fake.tDigestCreateWithCompressionReturns
	fake.recordInvocation("TDigestCreateWithCompression", []interface{}{arg1, arg2, arg3})
	fake.tDigestCreateWithCompressionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestCreateWithCompressionCallCount() int {
	fake.tDigestCreateWithCompressionMutex.RLock()
	defer fake.tDigestCreateWithCompressionMutex.RUnlock()
	return len(fake.tDigestCreateWithCompressionArgsForCall)
}

func (fake *FakeCmdable) TDigestCreateWithCompressionCalls(stub func(context.Context, string, int64) *redisa.StatusCmd) {
	fake.tDigestCreateWithCompressionMutex.Lock()
	defer fake.tDigestCreateWithCompressionMutex.Unlock()
	fake.TDigestCreateWithCompressionStub = stub
}

func (fake *FakeCmdable) TDigestCreateWithCompressionArgsForCall(i int) (context.Context, string, int64) {
	fake.tDigestCreateWithCompressionMutex.RLock()
	defer fake.tDigestCreateWithCompressionMutex.RUnlock()
	argsForCall := fake.tDigestCreateWithCompressionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TDigestCreateWithCompressionReturns(result1 *redisa.StatusCmd) {
	fake.tDigestCreateWithCompressionMutex.Lock()
	defer fake.tDigestCreateWithCompressionMutex.Unlock()
	fake.TDigestCreateWithCompressionStub = nil
	fake.tDigestCreateWithCompressionReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestCreateWithCompressionReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tDigestCreateWithCompressionMutex.Lock()
	defer fake.tDigestCreateWithCompressionMutex.Unlock()
	fake.TDigestCreateWithCompressionStub = nil
	if fake.tDigestCreateWithCompressionReturnsOnCall == nil {
		fake.tDigestCreateWithCompressionReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tDigestCreateWithCompressionReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestInfo(arg1 context.Context, arg2 string) *redisa.TDigestInfoCmd {
	fake.tDigestInfoMutex.Lock()
	ret, specificReturn := fake.tDigestInfoReturnsOnCall[len(fake.tDigestInfoArgsForCall)]
	fake.tDigestInfoArgsForCall = append(fake.tDigestInfoArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TDigestInfoStub
	fakeReturns := fake.tDigestInfoReturns
	fake.recordInvocation("TDigestInfo", []interface{}{arg1, arg2})
	fake.tDigestInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestInfoCallCount() int {
	fake.tDigestInfoMutex.RLock()
	defer fake.tDigestInfoMutex.RUnlock()
	return len(fake.tDigestInfoArgsForCall)
}

func (fake *FakeCmdable) TDigestInfoCalls(stub func(context.Context, string) *redisa.TDigestInfoCmd) {
	fake.tDigestInfoMutex.Lock()
	defer fake.tDigestInfoMutex.Unlock()
	fake.TDigestInfoStub = stub
}

func (fake *FakeCmdable) TDigestInfoArgsForCall(i int) (context.Context, string) {
	fake.tDigestInfoMutex.RLock()
	defer fake.tDigestInfoMutex.RUnlock()
	argsForCall := fake.tDigestInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TDigestInfoReturns(result1 *redisa.TDigestInfoCmd) {
	fake.tDigestInfoMutex.Lock()
	defer fake.tDigestInfoMutex.Unlock()
	fake.TDigestInfoStub = nil
	fake.tDigestInfoReturns = struct {
		result1 *redisa.TDigestInfoCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestInfoReturnsOnCall(i int, result1 *redisa.TDigestInfoCmd) {
	fake.tDigestInfoMutex.Lock()
	defer fake.tDigestInfoMutex.Unlock()
	fake.TDigestInfoStub = nil
	if fake.tDigestInfoReturnsOnCall == nil {
		fake.tDigestInfoReturnsOnCall = make(map[int]struct {
			result1 *redisa.TDigestInfoCmd
		})
	}
	fake.tDigestInfoReturnsOnCall[i] = struct {
		result1 *redisa.TDigestInfoCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestMax(arg1 context.Context, arg2 string) *redisa.FloatCmd {
	fake.tDigestMaxMutex.Lock()
	ret, specificReturn := fake.tDigestMaxReturnsOnCall[len(fake.tDigestMaxArgsForCall)]
	fake.tDigestMaxArgsForCall = append(fake.tDigestMaxArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TDigestMaxStub
	fakeReturns := fake.tDigestMaxReturns
	fake.recordInvocation("TDigestMax", []interface{}{arg1, arg2})
	fake.tDigestMaxMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestMaxCallCount() int {
	fake.tDigestMaxMutex.RLock()
	defer fake.tDigestMaxMutex.RUnlock()
	return len(fake.tDigestMaxArgsForCall)
}

func (fake *FakeCmdable) TDigestMaxCalls(stub func(context.Context, string) *redisa.FloatCmd) {
	fake.tDigestMaxMutex.Lock()
	defer fake.tDigestMaxMutex.Unlock()
	fake.TDigestMaxStub = stub
}

func (fake *FakeCmdable) TDigestMaxArgsForCall(i int) (context.Context, string) {
	fake.tDigestMaxMutex.RLock()
	defer fake.tDigestMaxMutex.RUnlock()
	argsForCall := fake.tDigestMaxArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TDigestMaxReturns(result1 *redisa.FloatCmd) {
	fake.tDigestMaxMutex.Lock()
	defer fake.tDigestMaxMutex.Unlock()
	fake.TDigestMaxStub = nil
	fake.tDigestMaxReturns = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestMaxReturnsOnCall(i int, result1 *redisa.FloatCmd) {
	fake.tDigestMaxMutex.Lock()
	defer fake.tDigestMaxMutex.Unlock()
	fake.TDigestMaxStub = nil
	if fake.tDigestMaxReturnsOnCall == nil {
		fake.tDigestMaxReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatCmd
		})
	}
	fake.tDigestMaxReturnsOnCall[i] = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestMerge(arg1 context.Context, arg2 string, arg3 *redisa.TDigestMergeOptions, arg4 ...string) *redisa.StatusCmd {
	fake.tDigestMergeMutex.Lock()
	ret, specificReturn := fake.tDigestMergeReturnsOnCall[len(fake.tDigestMergeArgsForCall)]
	fake.tDigestMergeArgsForCall = append(fake.tDigestMergeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.TDigestMergeOptions
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	stub := fake.TDigestMergeStub
	fakeReturns := fake.tDigestMergeReturns
	fake.recordInvocation("TDigestMerge", []interface{}{arg1, arg2, arg3, arg4})
	fake.tDigestMergeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestMergeCallCount() int {
	fake.tDigestMergeMutex.RLock()
	defer fake.tDigestMergeMutex.RUnlock()
	return len(fake.tDigestMergeArgsForCall)
}

func (fake *FakeCmdable) TDigestMergeCalls(stub func(context.Context, string, *redisa.TDigestMergeOptions, ...string) *redisa.StatusCmd) {
	fake.tDigestMergeMutex.Lock()
	defer fake.tDigestMergeMutex.Unlock()
	fake.TDigestMergeStub = stub
}

func (fake *FakeCmdable) TDigestMergeArgsForCall(i int) (context.Context, string, *redisa.TDigestMergeOptions, []string) {
	fake.tDigestMergeMutex.RLock()
	defer fake.tDigestMergeMutex.RUnlock()
	argsForCall := fake.tDigestMergeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) TDigestMergeReturns(result1 *redisa.StatusCmd) {
	fake.tDigestMergeMutex.Lock()
	defer fake.tDigestMergeMutex.Unlock()
	fake.TDigestMergeStub = nil
	fake.tDigestMergeReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestMergeReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tDigestMergeMutex.Lock()
	defer fake.tDigestMergeMutex.Unlock()
	fake.TDigestMergeStub = nil
	if fake.tDigestMergeReturnsOnCall == nil {
		fake.tDigestMergeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tDigestMergeReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestMin(arg1 context.Context, arg2 string) *redisa.FloatCmd {
	fake.tDigestMinMutex.Lock()
	ret, specificReturn := fake.tDigestMinReturnsOnCall[len(fake.tDigestMinArgsForCall)]
	fake.tDigestMinArgsForCall = append(fake.tDigestMinArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TDigestMinStub
	fakeReturns := fake.tDigestMinReturns
	fake.recordInvocation("TDigestMin", []interface{}{arg1, arg2})
	fake.tDigestMinMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestMinCallCount() int {
	fake.tDigestMinMutex.RLock()
	defer fake.tDigestMinMutex.RUnlock()
	return len(fake.tDigestMinArgsForCall)
}

func (fake *FakeCmdable) TDigestMinCalls(stub func(context.Context, string) *redisa.FloatCmd) {
	fake.tDigestMinMutex.Lock()
	defer fake.tDigestMinMutex.Unlock()
	fake.TDigestMinStub = stub
}

func (fake *FakeCmdable) TDigestMinArgsForCall(i int) (context.Context, string) {
	fake.tDigestMinMutex.RLock()
	defer fake.tDigestMinMutex.RUnlock()
	argsForCall := fake.tDigestMinArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TDigestMinReturns(result1 *redisa.FloatCmd) {
	fake.tDigestMinMutex.Lock()
	defer fake.tDigestMinMutex.Unlock()
	fake.TDigestMinStub = nil
	fake.tDigestMinReturns = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestMinReturnsOnCall(i int, result1 *redisa.FloatCmd) {
	fake.tDigestMinMutex.Lock()
	defer fake.tDigestMinMutex.Unlock()
	fake.TDigestMinStub = nil
	if fake.tDigestMinReturnsOnCall == nil {
		fake.tDigestMinReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatCmd
		})
	}
	fake.tDigestMinReturnsOnCall[i] = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestQuantile(arg1 context.Context, arg2 string, arg3 ...float64) *redisa.FloatSliceCmd {
	fake.tDigestQuantileMutex.Lock()
	ret, specificReturn := fake.tDigestQuantileReturnsOnCall[len(fake.tDigestQuantileArgsForCall)]
	fake.tDigestQuantileArgsForCall = append(fake.tDigestQuantileArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []float64
	}{arg1, arg2, arg3})
	stub := fake.TDigestQuantileStub
	fakeReturns := fake.tDigestQuantileReturns
	fake.recordInvocation("TDigestQuantile", []interface{}{arg1, arg2, arg3})
	fake.tDigestQuantileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestQuantileCallCount() int {
	fake.tDigestQuantileMutex.RLock()
	defer fake.tDigestQuantileMutex.RUnlock()
	return len(fake.tDigestQuantileArgsForCall)
}

func (fake *FakeCmdable) TDigestQuantileCalls(stub func(context.Context, string, ...float64) *redisa.FloatSliceCmd) {
	fake.tDigestQuantileMutex.Lock()
	defer fake.tDigestQuantileMutex.Unlock()
	fake.TDigestQuantileStub = stub
}

func (fake *FakeCmdable) TDigestQuantileArgsForCall(i int) (context.Context, string, []float64) {
	fake.tDigestQuantileMutex.RLock()
	defer fake.tDigestQuantileMutex.RUnlock()
	argsForCall := fake.tDigestQuantileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TDigestQuantileReturns(result1 *redisa.FloatSliceCmd) {
	fake.tDigestQuantileMutex.Lock()
	defer fake.tDigestQuantileMutex.Unlock()
	fake.TDigestQuantileStub = nil
	fake.tDigestQuantileReturns = struct {
		result1 *redisa.FloatSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestQuantileReturnsOnCall(i int, result1 *redisa.FloatSliceCmd) {
	fake.tDigestQuantileMutex.Lock()
	defer fake.tDigestQuantileMutex.Unlock()
	fake.TDigestQuantileStub = nil
	if fake.tDigestQuantileReturnsOnCall == nil {
		fake.tDigestQuantileReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatSliceCmd
		})
	}
	fake.tDigestQuantileReturnsOnCall[i] = struct {
		result1 *redisa.FloatSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestRank(arg1 context.Context, arg2 string, arg3 ...float64) *redisa.IntSliceCmd {
	fake.tDigestRankMutex.Lock()
	ret, specificReturn := fake.tDigestRankReturnsOnCall[len(fake.tDigestRankArgsForCall)]
	fake.tDigestRankArgsForCall = append(fake.tDigestRankArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []float64
	}{arg1, arg2, arg3})
	stub := fake.TDigestRankStub
	fakeReturns := fake.tDigestRankReturns
	fake.recordInvocation("TDigestRank", []interface{}{arg1, arg2, arg3})
	fake.tDigestRankMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestRankCallCount() int {
	fake.tDigestRankMutex.RLock()
	defer fake.tDigestRankMutex.RUnlock()
	return len(fake.tDigestRankArgsForCall)
}

func (fake *FakeCmdable) TDigestRankCalls(stub func(context.Context, string, ...float64) *redisa.IntSliceCmd) {
	fake.tDigestRankMutex.Lock()
	defer fake.tDigestRankMutex.Unlock()
	fake.TDigestRankStub = stub
}

func (fake *FakeCmdable) TDigestRankArgsForCall(i int) (context.Context, string, []float64) {
	fake.tDigestRankMutex.RLock()
	defer fake.tDigestRankMutex.RUnlock()
	argsForCall := fake.tDigestRankArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TDigestRankReturns(result1 *redisa.IntSliceCmd) {
	fake.tDigestRankMutex.Lock()
	defer fake.tDigestRankMutex.Unlock()
	fake.TDigestRankStub = nil
	fake.tDigestRankReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestRankReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.tDigestRankMutex.Lock()
	defer fake.tDigestRankMutex.Unlock()
	fake.TDigestRankStub = nil
	if fake.tDigestRankReturnsOnCall == nil {
		fake.tDigestRankReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.tDigestRankReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestReset(arg1 context.Context, arg2 string) *redisa.StatusCmd {
	fake.tDigestResetMutex.Lock()
	ret, specificReturn := fake.tDigestResetReturnsOnCall[len(fake.tDigestResetArgsForCall)]
	fake.tDigestResetArgsForCall = append(fake.tDigestResetArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TDigestResetStub
	fakeReturns := fake.tDigestResetReturns
	fake.recordInvocation("TDigestReset", []interface{}{arg1, arg2})
	fake.tDigestResetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestResetCallCount() int {
	fake.tDigestResetMutex.RLock()
	defer fake.tDigestResetMutex.RUnlock()
	return len(fake.tDigestResetArgsForCall)
}

func (fake *FakeCmdable) TDigestResetCalls(stub func(context.Context, string) *redisa.StatusCmd) {
	fake.tDigestResetMutex.Lock()
	defer fake.tDigestResetMutex.Unlock()
	fake.TDigestResetStub = stub
}

func (fake *FakeCmdable) TDigestResetArgsForCall(i int) (context.Context, string) {
	fake.tDigestResetMutex.RLock()
	defer fake.tDigestResetMutex.RUnlock()
	argsForCall := fake.tDigestResetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TDigestResetReturns(result1 *redisa.StatusCmd) {
	fake.tDigestResetMutex.Lock()
	defer fake.tDigestResetMutex.Unlock()
	fake.TDigestResetStub = nil
	fake.tDigestResetReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestResetReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tDigestResetMutex.Lock()
	defer fake.tDigestResetMutex.Unlock()
	fake.TDigestResetStub = nil
	if fake.tDigestResetReturnsOnCall == nil {
		fake.tDigestResetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tDigestResetReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestRevRank(arg1 context.Context, arg2 string, arg3 ...float64) *redisa.IntSliceCmd {
	fake.tDigestRevRankMutex.Lock()
	ret, specificReturn := fake.tDigestRevRankReturnsOnCall[len(fake.tDigestRevRankArgsForCall)]
	fake.tDigestRevRankArgsForCall = append(fake.tDigestRevRankArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []float64
	}{arg1, arg2, arg3})
	stub := fake.TDigestRevRankStub
	fakeReturns := fake.tDigestRevRankReturns
	fake.recordInvocation("TDigestRevRank", []interface{}{arg1, arg2, arg3})
	fake.tDigestRevRankMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestRevRankCallCount() int {
	fake.tDigestRevRankMutex.RLock()
	defer fake.tDigestRevRankMutex.RUnlock()
	return len(fake.tDigestRevRankArgsForCall)
}

func (fake *FakeCmdable) TDigestRevRankCalls(stub func(context.Context, string, ...float64) *redisa.IntSliceCmd) {
	fake.tDigestRevRankMutex.Lock()
	defer fake.tDigestRevRankMutex.Unlock()
	fake.TDigestRevRankStub = stub
}

func (fake *FakeCmdable) TDigestRevRankArgsForCall(i int) (context.Context, string, []float64) {
	fake.tDigestRevRankMutex.RLock()
	defer fake.tDigestRevRankMutex.RUnlock()
	argsForCall := fake.tDigestRevRankArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TDigestRevRankReturns(result1 *redisa.IntSliceCmd) {
	fake.tDigestRevRankMutex.Lock()
	defer fake.tDigestRevRankMutex.Unlock()
	fake.TDigestRevRankStub = nil
	fake.tDigestRevRankReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestRevRankReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.tDigestRevRankMutex.Lock()
	defer fake.tDigestRevRankMutex.Unlock()
	fake.TDigestRevRankStub = nil
	if fake.tDigestRevRankReturnsOnCall == nil {
		fake.tDigestRevRankReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.tDigestRevRankReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestTrimmedMean(arg1 context.Context, arg2 string, arg3 float64, arg4 float64) *redisa.FloatCmd {
	fake.tDigestTrimmedMeanMutex.Lock()
	ret, specificReturn := fake.tDigestTrimmedMeanReturnsOnCall[len(fake.tDigestTrimmedMeanArgsForCall)]
	fake.tDigestTrimmedMeanArgsForCall = append(fake.tDigestTrimmedMeanArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 float64
	}{arg1, arg2, arg3, arg4})
	stub := fake.TDigestTrimmedMeanStub
	fakeReturns := fake.tDigestTrimmedMeanReturns
	fake.recordInvocation("TDigestTrimmedMean", []interface{}{arg1, arg2, arg3, arg4})
	fake.tDigestTrimmedMeanMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TDigestTrimmedMeanCallCount() int {
	fake.tDigestTrimmedMeanMutex.RLock()
	defer fake.tDigestTrimmedMeanMutex.RUnlock()
	return len(fake.tDigestTrimmedMeanArgsForCall)
}

func (fake *FakeCmdable) TDigestTrimmedMeanCalls(stub func(context.Context, string, float64, float64) *redisa.FloatCmd) {
	fake.tDigestTrimmedMeanMutex.Lock()
	defer fake.tDigestTrimmedMeanMutex.Unlock()
	fake.TDigestTrimmedMeanStub = stub
}

func (fake *FakeCmdable) TDigestTrimmedMeanArgsForCall(i int) (context.Context, string, float64, float64) {
	fake.tDigestTrimmedMeanMutex.RLock()
	defer fake.tDigestTrimmedMeanMutex.RUnlock()
	argsForCall := fake.tDigestTrimmedMeanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) TDigestTrimmedMeanReturns(result1 *redisa.FloatCmd) {
	fake.tDigestTrimmedMeanMutex.Lock()
	defer fake.tDigestTrimmedMeanMutex.Unlock()
	fake.TDigestTrimmedMeanStub = nil
	fake.tDigestTrimmedMeanReturns = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) TDigestTrimmedMeanReturnsOnCall(i int, result1 *redisa.FloatCmd) {
	fake.tDigestTrimmedMeanMutex.Lock()
	defer fake.tDigestTrimmedMeanMutex.Unlock()
	fake.TDigestTrimmedMeanStub = nil
	if fake.tDigestTrimmedMeanReturnsOnCall == nil {
		fake.tDigestTrimmedMeanReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatCmd
		})
	}
	fake.tDigestTrimmedMeanReturnsOnCall[i] = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) TFCall(arg1 context.Context, arg2 string, arg3 string, arg4 int) *redisa.Cmd {
	fake.tFCallMutex.Lock()
	ret, specificReturn := fake.tFCallReturnsOnCall[len(fake.tFCallArgsForCall)]
	fake.tFCallArgsForCall = append(fake.tFCallArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.TFCallStub
	fakeReturns := fake.tFCallReturns
	fake.recordInvocation("TFCall", []interface{}{arg1, arg2, arg3, arg4})
	fake.tFCallMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TFCallCallCount() int {
	fake.tFCallMutex.RLock()
	defer fake.tFCallMutex.RUnlock()
	return len(fake.tFCallArgsForCall)
}

func (fake *FakeCmdable) TFCallCalls(stub func(context.Context, string, string, int) *redisa.Cmd) {
	fake.tFCallMutex.Lock()
	defer fake.tFCallMutex.Unlock()
	fake.TFCallStub = stub
}

func (fake *FakeCmdable) TFCallArgsForCall(i int) (context.Context, string, string, int) {
	fake.tFCallMutex.RLock()
	defer fake.tFCallMutex.RUnlock()
	argsForCall := fake.tFCallArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) TFCallReturns(result1 *redisa.Cmd) {
	fake.tFCallMutex.Lock()
	defer fake.tFCallMutex.Unlock()
	fake.TFCallStub = nil
	fake.tFCallReturns = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) TFCallReturnsOnCall(i int, result1 *redisa.Cmd) {
	fake.tFCallMutex.Lock()
	defer fake.tFCallMutex.Unlock()
	fake.TFCallStub = nil
	if fake.tFCallReturnsOnCall == nil {
		fake.tFCallReturnsOnCall = make(map[int]struct {
			result1 *redisa.Cmd
		})
	}
	fake.tFCallReturnsOnCall[i] = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) TFCallASYNC(arg1 context.Context, arg2 string, arg3 string, arg4 int) *redisa.Cmd {
	fake.tFCallASYNCMutex.Lock()
	ret, specificReturn := fake.tFCallASYNCReturnsOnCall[len(fake.tFCallASYNCArgsForCall)]
	fake.tFCallASYNCArgsForCall = append(fake.tFCallASYNCArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.TFCallASYNCStub
	fakeReturns := fake.tFCallASYNCReturns
	fake.recordInvocation("TFCallASYNC", []interface{}{arg1, arg2, arg3, arg4})
	fake.tFCallASYNCMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TFCallASYNCCallCount() int {
	fake.tFCallASYNCMutex.RLock()
	defer fake.tFCallASYNCMutex.RUnlock()
	return len(fake.tFCallASYNCArgsForCall)
}

func (fake *FakeCmdable) TFCallASYNCCalls(stub func(context.Context, string, string, int) *redisa.Cmd) {
	fake.tFCallASYNCMutex.Lock()
	defer fake.tFCallASYNCMutex.Unlock()
	fake.TFCallASYNCStub = stub
}

func (fake *FakeCmdable) TFCallASYNCArgsForCall(i int) (context.Context, string, string, int) {
	fake.tFCallASYNCMutex.RLock()
	defer fake.tFCallASYNCMutex.RUnlock()
	argsForCall := fake.tFCallASYNCArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) TFCallASYNCReturns(result1 *redisa.Cmd) {
	fake.tFCallASYNCMutex.Lock()
	defer fake.tFCallASYNCMutex.Unlock()
	fake.TFCallASYNCStub = nil
	fake.tFCallASYNCReturns = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) TFCallASYNCReturnsOnCall(i int, result1 *redisa.Cmd) {
	fake.tFCallASYNCMutex.Lock()
	defer fake.tFCallASYNCMutex.Unlock()
	fake.TFCallASYNCStub = nil
	if fake.tFCallASYNCReturnsOnCall == nil {
		fake.tFCallASYNCReturnsOnCall = make(map[int]struct {
			result1 *redisa.Cmd
		})
	}
	fake.tFCallASYNCReturnsOnCall[i] = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) TFCallASYNCArgs(arg1 context.Context, arg2 string, arg3 string, arg4 int, arg5 *redisa.TFCallOptions) *redisa.Cmd {
	fake.tFCallASYNCArgsMutex.Lock()
	ret, specificReturn := fake.tFCallASYNCArgsReturnsOnCall[len(fake.tFCallASYNCArgsArgsForCall)]
	fake.tFCallASYNCArgsArgsForCall = append(fake.tFCallASYNCArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 *redisa.TFCallOptions
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.TFCallASYNCArgsStub
	fakeReturns := fake.tFCallASYNCArgsReturns
	fake.recordInvocation("TFCallASYNCArgs", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.tFCallASYNCArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TFCallASYNCArgsCallCount() int {
	fake.tFCallASYNCArgsMutex.RLock()
	defer fake.tFCallASYNCArgsMutex.RUnlock()
	return len(fake.tFCallASYNCArgsArgsForCall)
}

func (fake *FakeCmdable) TFCallASYNCArgsCalls(stub func(context.Context, string, string, int, *redisa.TFCallOptions) *redisa.Cmd) {
	fake.tFCallASYNCArgsMutex.Lock()
	defer fake.tFCallASYNCArgsMutex.Unlock()
	fake.TFCallASYNCArgsStub = stub
}

func (fake *FakeCmdable) TFCallASYNCArgsArgsForCall(i int) (context.Context, string, string, int, *redisa.TFCallOptions) {
	fake.tFCallASYNCArgsMutex.RLock()
	defer fake.tFCallASYNCArgsMutex.RUnlock()
	argsForCall := fake.tFCallASYNCArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) TFCallASYNCArgsReturns(result1 *redisa.Cmd) {
	fake.tFCallASYNCArgsMutex.Lock()
	defer fake.tFCallASYNCArgsMutex.Unlock()
	fake.TFCallASYNCArgsStub = nil
	fake.tFCallASYNCArgsReturns = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) TFCallASYNCArgsReturnsOnCall(i int, result1 *redisa.Cmd) {
	fake.tFCallASYNCArgsMutex.Lock()
	defer fake.tFCallASYNCArgsMutex.Unlock()
	fake.TFCallASYNCArgsStub = nil
	if fake.tFCallASYNCArgsReturnsOnCall == nil {
		fake.tFCallASYNCArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.Cmd
		})
	}
	fake.tFCallASYNCArgsReturnsOnCall[i] = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) TFCallArgs(arg1 context.Context, arg2 string, arg3 string, arg4 int, arg5 *redisa.TFCallOptions) *redisa.Cmd {
	fake.tFCallArgsMutex.Lock()
	ret, specificReturn := fake.tFCallArgsReturnsOnCall[len(fake.tFCallArgsArgsForCall)]
	fake.tFCallArgsArgsForCall = append(fake.tFCallArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 *redisa.TFCallOptions
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.TFCallArgsStub
	fakeReturns := fake.tFCallArgsReturns
	fake.recordInvocation("TFCallArgs", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.tFCallArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TFCallArgsCallCount() int {
	fake.tFCallArgsMutex.RLock()
	defer fake.tFCallArgsMutex.RUnlock()
	return len(fake.tFCallArgsArgsForCall)
}

func (fake *FakeCmdable) TFCallArgsCalls(stub func(context.Context, string, string, int, *redisa.TFCallOptions) *redisa.Cmd) {
	fake.tFCallArgsMutex.Lock()
	defer fake.tFCallArgsMutex.Unlock()
	fake.TFCallArgsStub = stub
}

func (fake *FakeCmdable) TFCallArgsArgsForCall(i int) (context.Context, string, string, int, *redisa.TFCallOptions) {
	fake.tFCallArgsMutex.RLock()
	defer fake.tFCallArgsMutex.RUnlock()
	argsForCall := fake.tFCallArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) TFCallArgsReturns(result1 *redisa.Cmd) {
	fake.tFCallArgsMutex.Lock()
	defer fake.tFCallArgsMutex.Unlock()
	fake.TFCallArgsStub = nil
	fake.tFCallArgsReturns = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) TFCallArgsReturnsOnCall(i int, result1 *redisa.Cmd) {
	fake.tFCallArgsMutex.Lock()
	defer fake.tFCallArgsMutex.Unlock()
	fake.TFCallArgsStub = nil
	if fake.tFCallArgsReturnsOnCall == nil {
		fake.tFCallArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.Cmd
		})
	}
	fake.tFCallArgsReturnsOnCall[i] = struct {
		result1 *redisa.Cmd
	}{result1}
}

func (fake *FakeCmdable) TFunctionDelete(arg1 context.Context, arg2 string) *redisa.StatusCmd {
	fake.tFunctionDeleteMutex.Lock()
	ret, specificReturn := fake.tFunctionDeleteReturnsOnCall[len(fake.tFunctionDeleteArgsForCall)]
	fake.tFunctionDeleteArgsForCall = append(fake.tFunctionDeleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TFunctionDeleteStub
	fakeReturns := fake.tFunctionDeleteReturns
	fake.recordInvocation("TFunctionDelete", []interface{}{arg1, arg2})
	fake.tFunctionDeleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TFunctionDeleteCallCount() int {
	fake.tFunctionDeleteMutex.RLock()
	defer fake.tFunctionDeleteMutex.RUnlock()
	return len(fake.tFunctionDeleteArgsForCall)
}

func (fake *FakeCmdable) TFunctionDeleteCalls(stub func(context.Context, string) *redisa.StatusCmd) {
	fake.tFunctionDeleteMutex.Lock()
	defer fake.tFunctionDeleteMutex.Unlock()
	fake.TFunctionDeleteStub = stub
}

func (fake *FakeCmdable) TFunctionDeleteArgsForCall(i int) (context.Context, string) {
	fake.tFunctionDeleteMutex.RLock()
	defer fake.tFunctionDeleteMutex.RUnlock()
	argsForCall := fake.tFunctionDeleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TFunctionDeleteReturns(result1 *redisa.StatusCmd) {
	fake.tFunctionDeleteMutex.Lock()
	defer fake.tFunctionDeleteMutex.Unlock()
	fake.TFunctionDeleteStub = nil
	fake.tFunctionDeleteReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TFunctionDeleteReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tFunctionDeleteMutex.Lock()
	defer fake.tFunctionDeleteMutex.Unlock()
	fake.TFunctionDeleteStub = nil
	if fake.tFunctionDeleteReturnsOnCall == nil {
		fake.tFunctionDeleteReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tFunctionDeleteReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TFunctionList(arg1 context.Context) *redisa.MapStringInterfaceSliceCmd {
	fake.tFunctionListMutex.Lock()
	ret, specificReturn := fake.tFunctionListReturnsOnCall[len(fake.tFunctionListArgsForCall)]
	fake.tFunctionListArgsForCall = append(fake.tFunctionListArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.TFunctionListStub
	fakeReturns := fake.tFunctionListReturns
	fake.recordInvocation("TFunctionList", []interface{}{arg1})
	fake.tFunctionListMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TFunctionListCallCount() int {
	fake.tFunctionListMutex.RLock()
	defer fake.tFunctionListMutex.RUnlock()
	return len(fake.tFunctionListArgsForCall)
}

func (fake *FakeCmdable) TFunctionListCalls(stub func(context.Context) *redisa.MapStringInterfaceSliceCmd) {
	fake.tFunctionListMutex.Lock()
	defer fake.tFunctionListMutex.Unlock()
	fake.TFunctionListStub = stub
}

func (fake *FakeCmdable) TFunctionListArgsForCall(i int) context.Context {
	fake.tFunctionListMutex.RLock()
	defer fake.tFunctionListMutex.RUnlock()
	argsForCall := fake.tFunctionListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) TFunctionListReturns(result1 *redisa.MapStringInterfaceSliceCmd) {
	fake.tFunctionListMutex.Lock()
	defer fake.tFunctionListMutex.Unlock()
	fake.TFunctionListStub = nil
	fake.tFunctionListReturns = struct {
		result1 *redisa.MapStringInterfaceSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TFunctionListReturnsOnCall(i int, result1 *redisa.MapStringInterfaceSliceCmd) {
	fake.tFunctionListMutex.Lock()
	defer fake.tFunctionListMutex.Unlock()
	fake.TFunctionListStub = nil
	if fake.tFunctionListReturnsOnCall == nil {
		fake.tFunctionListReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringInterfaceSliceCmd
		})
	}
	fake.tFunctionListReturnsOnCall[i] = struct {
		result1 *redisa.MapStringInterfaceSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TFunctionListArgs(arg1 context.Context, arg2 *redisa.TFunctionListOptions) *redisa.MapStringInterfaceSliceCmd {
	fake.tFunctionListArgsMutex.Lock()
	ret, specificReturn := fake.tFunctionListArgsReturnsOnCall[len(fake.tFunctionListArgsArgsForCall)]
	fake.tFunctionListArgsArgsForCall = append(fake.tFunctionListArgsArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.TFunctionListOptions
	}{arg1, arg2})
	stub := fake.TFunctionListArgsStub
	fakeReturns := fake.tFunctionListArgsReturns
	fake.recordInvocation("TFunctionListArgs", []interface{}{arg1, arg2})
	fake.tFunctionListArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TFunctionListArgsCallCount() int {
	fake.tFunctionListArgsMutex.RLock()
	defer fake.tFunctionListArgsMutex.RUnlock()
	return len(fake.tFunctionListArgsArgsForCall)
}

func (fake *FakeCmdable) TFunctionListArgsCalls(stub func(context.Context, *redisa.TFunctionListOptions) *redisa.MapStringInterfaceSliceCmd) {
	fake.tFunctionListArgsMutex.Lock()
	defer fake.tFunctionListArgsMutex.Unlock()
	fake.TFunctionListArgsStub = stub
}

func (fake *FakeCmdable) TFunctionListArgsArgsForCall(i int) (context.Context, *redisa.TFunctionListOptions) {
	fake.tFunctionListArgsMutex.RLock()
	defer fake.tFunctionListArgsMutex.RUnlock()
	argsForCall := fake.tFunctionListArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TFunctionListArgsReturns(result1 *redisa.MapStringInterfaceSliceCmd) {
	fake.tFunctionListArgsMutex.Lock()
	defer fake.tFunctionListArgsMutex.Unlock()
	fake.TFunctionListArgsStub = nil
	fake.tFunctionListArgsReturns = struct {
		result1 *redisa.MapStringInterfaceSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TFunctionListArgsReturnsOnCall(i int, result1 *redisa.MapStringInterfaceSliceCmd) {
	fake.tFunctionListArgsMutex.Lock()
	defer fake.tFunctionListArgsMutex.Unlock()
	fake.TFunctionListArgsStub = nil
	if fake.tFunctionListArgsReturnsOnCall == nil {
		fake.tFunctionListArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringInterfaceSliceCmd
		})
	}
	fake.tFunctionListArgsReturnsOnCall[i] = struct {
		result1 *redisa.MapStringInterfaceSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TFunctionLoad(arg1 context.Context, arg2 string) *redisa.StatusCmd {
	fake.tFunctionLoadMutex.Lock()
	ret, specificReturn := fake.tFunctionLoadReturnsOnCall[len(fake.tFunctionLoadArgsForCall)]
	fake.tFunctionLoadArgsForCall = append(fake.tFunctionLoadArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TFunctionLoadStub
	fakeReturns := fake.tFunctionLoadReturns
	fake.recordInvocation("TFunctionLoad", []interface{}{arg1, arg2})
	fake.tFunctionLoadMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TFunctionLoadCallCount() int {
	fake.tFunctionLoadMutex.RLock()
	defer fake.tFunctionLoadMutex.RUnlock()
	return len(fake.tFunctionLoadArgsForCall)
}

func (fake *FakeCmdable) TFunctionLoadCalls(stub func(context.Context, string) *redisa.StatusCmd) {
	fake.tFunctionLoadMutex.Lock()
	defer fake.tFunctionLoadMutex.Unlock()
	fake.TFunctionLoadStub = stub
}

func (fake *FakeCmdable) TFunctionLoadArgsForCall(i int) (context.Context, string) {
	fake.tFunctionLoadMutex.RLock()
	defer fake.tFunctionLoadMutex.RUnlock()
	argsForCall := fake.tFunctionLoadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TFunctionLoadReturns(result1 *redisa.StatusCmd) {
	fake.tFunctionLoadMutex.Lock()
	defer fake.tFunctionLoadMutex.Unlock()
	fake.TFunctionLoadStub = nil
	fake.tFunctionLoadReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TFunctionLoadReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tFunctionLoadMutex.Lock()
	defer fake.tFunctionLoadMutex.Unlock()
	fake.TFunctionLoadStub = nil
	if fake.tFunctionLoadReturnsOnCall == nil {
		fake.tFunctionLoadReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tFunctionLoadReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TFunctionLoadArgs(arg1 context.Context, arg2 string, arg3 *redisa.TFunctionLoadOptions) *redisa.StatusCmd {
	fake.tFunctionLoadArgsMutex.Lock()
	ret, specificReturn := fake.tFunctionLoadArgsReturnsOnCall[len(fake.tFunctionLoadArgsArgsForCall)]
	fake.tFunctionLoadArgsArgsForCall = append(fake.tFunctionLoadArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.TFunctionLoadOptions
	}{arg1, arg2, arg3})
	stub := fake.TFunctionLoadArgsStub
	fakeReturns := fake.tFunctionLoadArgsReturns
	fake.recordInvocation("TFunctionLoadArgs", []interface{}{arg1, arg2, arg3})
	fake.tFunctionLoadArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TFunctionLoadArgsCallCount() int {
	fake.tFunctionLoadArgsMutex.RLock()
	defer fake.tFunctionLoadArgsMutex.RUnlock()
	return len(fake.tFunctionLoadArgsArgsForCall)
}

func (fake *FakeCmdable) TFunctionLoadArgsCalls(stub func(context.Context, string, *redisa.TFunctionLoadOptions) *redisa.StatusCmd) {
	fake.tFunctionLoadArgsMutex.Lock()
	defer fake.tFunctionLoadArgsMutex.Unlock()
	fake.TFunctionLoadArgsStub = stub
}

func (fake *FakeCmdable) TFunctionLoadArgsArgsForCall(i int) (context.Context, string, *redisa.TFunctionLoadOptions) {
	fake.tFunctionLoadArgsMutex.RLock()
	defer fake.tFunctionLoadArgsMutex.RUnlock()
	argsForCall := fake.tFunctionLoadArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TFunctionLoadArgsReturns(result1 *redisa.StatusCmd) {
	fake.tFunctionLoadArgsMutex.Lock()
	defer fake.tFunctionLoadArgsMutex.Unlock()
	fake.TFunctionLoadArgsStub = nil
	fake.tFunctionLoadArgsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TFunctionLoadArgsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tFunctionLoadArgsMutex.Lock()
	defer fake.tFunctionLoadArgsMutex.Unlock()
	fake.TFunctionLoadArgsStub = nil
	if fake.tFunctionLoadArgsReturnsOnCall == nil {
		fake.tFunctionLoadArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tFunctionLoadArgsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSAdd(arg1 context.Context, arg2 string, arg3 interface{}, arg4 float64) *redisa.IntCmd {
	fake.tSAddMutex.Lock()
	ret, specificReturn := fake.tSAddReturnsOnCall[len(fake.tSAddArgsForCall)]
	fake.tSAddArgsForCall = append(fake.tSAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 float64
	}{arg1, arg2, arg3, arg4})
	stub := fake.TSAddStub
	fakeReturns := fake.tSAddReturns
	fake.recordInvocation("TSAdd", []interface{}{arg1, arg2, arg3, arg4})
	fake.tSAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSAddCallCount() int {
	fake.tSAddMutex.RLock()
	defer fake.tSAddMutex.RUnlock()
	return len(fake.tSAddArgsForCall)
}

func (fake *FakeCmdable) TSAddCalls(stub func(context.Context, string, interface{}, float64) *redisa.IntCmd) {
	fake.tSAddMutex.Lock()
	defer fake.tSAddMutex.Unlock()
	fake.TSAddStub = stub
}

func (fake *FakeCmdable) TSAddArgsForCall(i int) (context.Context, string, interface{}, float64) {
	fake.tSAddMutex.RLock()
	defer fake.tSAddMutex.RUnlock()
	argsForCall := fake.tSAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) TSAddReturns(result1 *redisa.IntCmd) {
	fake.tSAddMutex.Lock()
	defer fake.tSAddMutex.Unlock()
	fake.TSAddStub = nil
	fake.tSAddReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSAddReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.tSAddMutex.Lock()
	defer fake.tSAddMutex.Unlock()
	fake.TSAddStub = nil
	if fake.tSAddReturnsOnCall == nil {
		fake.tSAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.tSAddReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSAddWithArgs(arg1 context.Context, arg2 string, arg3 interface{}, arg4 float64, arg5 *redisa.TSOptions) *redisa.IntCmd {
	fake.tSAddWithArgsMutex.Lock()
	ret, specificReturn := fake.tSAddWithArgsReturnsOnCall[len(fake.tSAddWithArgsArgsForCall)]
	fake.tSAddWithArgsArgsForCall = append(fake.tSAddWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
		arg4 float64
		arg5 *redisa.TSOptions
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.TSAddWithArgsStub
	fakeReturns := fake.tSAddWithArgsReturns
	fake.recordInvocation("TSAddWithArgs", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.tSAddWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSAddWithArgsCallCount() int {
	fake.tSAddWithArgsMutex.RLock()
	defer fake.tSAddWithArgsMutex.RUnlock()
	return len(fake.tSAddWithArgsArgsForCall)
}

func (fake *FakeCmdable) TSAddWithArgsCalls(stub func(context.Context, string, interface{}, float64, *redisa.TSOptions) *redisa.IntCmd) {
	fake.tSAddWithArgsMutex.Lock()
	defer fake.tSAddWithArgsMutex.Unlock()
	fake.TSAddWithArgsStub = stub
}

func (fake *FakeCmdable) TSAddWithArgsArgsForCall(i int) (context.Context, string, interface{}, float64, *redisa.TSOptions) {
	fake.tSAddWithArgsMutex.RLock()
	defer fake.tSAddWithArgsMutex.RUnlock()
	argsForCall := fake.tSAddWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) TSAddWithArgsReturns(result1 *redisa.IntCmd) {
	fake.tSAddWithArgsMutex.Lock()
	defer fake.tSAddWithArgsMutex.Unlock()
	fake.TSAddWithArgsStub = nil
	fake.tSAddWithArgsReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSAddWithArgsReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.tSAddWithArgsMutex.Lock()
	defer fake.tSAddWithArgsMutex.Unlock()
	fake.TSAddWithArgsStub = nil
	if fake.tSAddWithArgsReturnsOnCall == nil {
		fake.tSAddWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.tSAddWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSAlter(arg1 context.Context, arg2 string, arg3 *redisa.TSAlterOptions) *redisa.StatusCmd {
	fake.tSAlterMutex.Lock()
	ret, specificReturn := fake.tSAlterReturnsOnCall[len(fake.tSAlterArgsForCall)]
	fake.tSAlterArgsForCall = append(fake.tSAlterArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.TSAlterOptions
	}{arg1, arg2, arg3})
	stub := fake.TSAlterStub
	fakeReturns := fake.tSAlterReturns
	fake.recordInvocation("TSAlter", []interface{}{arg1, arg2, arg3})
	fake.tSAlterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSAlterCallCount() int {
	fake.tSAlterMutex.RLock()
	defer fake.tSAlterMutex.RUnlock()
	return len(fake.tSAlterArgsForCall)
}

func (fake *FakeCmdable) TSAlterCalls(stub func(context.Context, string, *redisa.TSAlterOptions) *redisa.StatusCmd) {
	fake.tSAlterMutex.Lock()
	defer fake.tSAlterMutex.Unlock()
	fake.TSAlterStub = stub
}

func (fake *FakeCmdable) TSAlterArgsForCall(i int) (context.Context, string, *redisa.TSAlterOptions) {
	fake.tSAlterMutex.RLock()
	defer fake.tSAlterMutex.RUnlock()
	argsForCall := fake.tSAlterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TSAlterReturns(result1 *redisa.StatusCmd) {
	fake.tSAlterMutex.Lock()
	defer fake.tSAlterMutex.Unlock()
	fake.TSAlterStub = nil
	fake.tSAlterReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSAlterReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tSAlterMutex.Lock()
	defer fake.tSAlterMutex.Unlock()
	fake.TSAlterStub = nil
	if fake.tSAlterReturnsOnCall == nil {
		fake.tSAlterReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tSAlterReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSCreate(arg1 context.Context, arg2 string) *redisa.StatusCmd {
	fake.tSCreateMutex.Lock()
	ret, specificReturn := fake.tSCreateReturnsOnCall[len(fake.tSCreateArgsForCall)]
	fake.tSCreateArgsForCall = append(fake.tSCreateArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TSCreateStub
	fakeReturns := fake.tSCreateReturns
	fake.recordInvocation("TSCreate", []interface{}{arg1, arg2})
	fake.tSCreateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSCreateCallCount() int {
	fake.tSCreateMutex.RLock()
	defer fake.tSCreateMutex.RUnlock()
	return len(fake.tSCreateArgsForCall)
}

func (fake *FakeCmdable) TSCreateCalls(stub func(context.Context, string) *redisa.StatusCmd) {
	fake.tSCreateMutex.Lock()
	defer fake.tSCreateMutex.Unlock()
	fake.TSCreateStub = stub
}

func (fake *FakeCmdable) TSCreateArgsForCall(i int) (context.Context, string) {
	fake.tSCreateMutex.RLock()
	defer fake.tSCreateMutex.RUnlock()
	argsForCall := fake.tSCreateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TSCreateReturns(result1 *redisa.StatusCmd) {
	fake.tSCreateMutex.Lock()
	defer fake.tSCreateMutex.Unlock()
	fake.TSCreateStub = nil
	fake.tSCreateReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSCreateReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tSCreateMutex.Lock()
	defer fake.tSCreateMutex.Unlock()
	fake.TSCreateStub = nil
	if fake.tSCreateReturnsOnCall == nil {
		fake.tSCreateReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tSCreateReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSCreateRule(arg1 context.Context, arg2 string, arg3 string, arg4 redisa.Aggregator, arg5 int) *redisa.StatusCmd {
	fake.tSCreateRuleMutex.Lock()
	ret, specificReturn := fake.tSCreateRuleReturnsOnCall[len(fake.tSCreateRuleArgsForCall)]
	fake.tSCreateRuleArgsForCall = append(fake.tSCreateRuleArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 redisa.Aggregator
		arg5 int
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.TSCreateRuleStub
	fakeReturns := fake.tSCreateRuleReturns
	fake.recordInvocation("TSCreateRule", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.tSCreateRuleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSCreateRuleCallCount() int {
	fake.tSCreateRuleMutex.RLock()
	defer fake.tSCreateRuleMutex.RUnlock()
	return len(fake.tSCreateRuleArgsForCall)
}

func (fake *FakeCmdable) TSCreateRuleCalls(stub func(context.Context, string, string, redisa.Aggregator, int) *redisa.StatusCmd) {
	fake.tSCreateRuleMutex.Lock()
	defer fake.tSCreateRuleMutex.Unlock()
	fake.TSCreateRuleStub = stub
}

func (fake *FakeCmdable) TSCreateRuleArgsForCall(i int) (context.Context, string, string, redisa.Aggregator, int) {
	fake.tSCreateRuleMutex.RLock()
	defer fake.tSCreateRuleMutex.RUnlock()
	argsForCall := fake.tSCreateRuleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) TSCreateRuleReturns(result1 *redisa.StatusCmd) {
	fake.tSCreateRuleMutex.Lock()
	defer fake.tSCreateRuleMutex.Unlock()
	fake.TSCreateRuleStub = nil
	fake.tSCreateRuleReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSCreateRuleReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tSCreateRuleMutex.Lock()
	defer fake.tSCreateRuleMutex.Unlock()
	fake.TSCreateRuleStub = nil
	if fake.tSCreateRuleReturnsOnCall == nil {
		fake.tSCreateRuleReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tSCreateRuleReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSCreateRuleWithArgs(arg1 context.Context, arg2 string, arg3 string, arg4 redisa.Aggregator, arg5 int, arg6 *redisa.TSCreateRuleOptions) *redisa.StatusCmd {
	fake.tSCreateRuleWithArgsMutex.Lock()
	ret, specificReturn := fake.tSCreateRuleWithArgsReturnsOnCall[len(fake.tSCreateRuleWithArgsArgsForCall)]
	fake.tSCreateRuleWithArgsArgsForCall = append(fake.tSCreateRuleWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 redisa.Aggregator
		arg5 int
		arg6 *redisa.TSCreateRuleOptions
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.TSCreateRuleWithArgsStub
	fakeReturns := fake.tSCreateRuleWithArgsReturns
	fake.recordInvocation("TSCreateRuleWithArgs", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.tSCreateRuleWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSCreateRuleWithArgsCallCount() int {
	fake.tSCreateRuleWithArgsMutex.RLock()
	defer fake.tSCreateRuleWithArgsMutex.RUnlock()
	return len(fake.tSCreateRuleWithArgsArgsForCall)
}

func (fake *FakeCmdable) TSCreateRuleWithArgsCalls(stub func(context.Context, string, string, redisa.Aggregator, int, *redisa.TSCreateRuleOptions) *redisa.StatusCmd) {
	fake.tSCreateRuleWithArgsMutex.Lock()
	defer fake.tSCreateRuleWithArgsMutex.Unlock()
	fake.TSCreateRuleWithArgsStub = stub
}

func (fake *FakeCmdable) TSCreateRuleWithArgsArgsForCall(i int) (context.Context, string, string, redisa.Aggregator, int, *redisa.TSCreateRuleOptions) {
	fake.tSCreateRuleWithArgsMutex.RLock()
	defer fake.tSCreateRuleWithArgsMutex.RUnlock()
	argsForCall := fake.tSCreateRuleWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeCmdable) TSCreateRuleWithArgsReturns(result1 *redisa.StatusCmd) {
	fake.tSCreateRuleWithArgsMutex.Lock()
	defer fake.tSCreateRuleWithArgsMutex.Unlock()
	fake.TSCreateRuleWithArgsStub = nil
	fake.tSCreateRuleWithArgsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSCreateRuleWithArgsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tSCreateRuleWithArgsMutex.Lock()
	defer fake.tSCreateRuleWithArgsMutex.Unlock()
	fake.TSCreateRuleWithArgsStub = nil
	if fake.tSCreateRuleWithArgsReturnsOnCall == nil {
		fake.tSCreateRuleWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tSCreateRuleWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSCreateWithArgs(arg1 context.Context, arg2 string, arg3 *redisa.TSOptions) *redisa.StatusCmd {
	fake.tSCreateWithArgsMutex.Lock()
	ret, specificReturn := fake.tSCreateWithArgsReturnsOnCall[len(fake.tSCreateWithArgsArgsForCall)]
	fake.tSCreateWithArgsArgsForCall = append(fake.tSCreateWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.TSOptions
	}{arg1, arg2, arg3})
	stub := fake.TSCreateWithArgsStub
	fakeReturns := fake.tSCreateWithArgsReturns
	fake.recordInvocation("TSCreateWithArgs", []interface{}{arg1, arg2, arg3})
	fake.tSCreateWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSCreateWithArgsCallCount() int {
	fake.tSCreateWithArgsMutex.RLock()
	defer fake.tSCreateWithArgsMutex.RUnlock()
	return len(fake.tSCreateWithArgsArgsForCall)
}

func (fake *FakeCmdable) TSCreateWithArgsCalls(stub func(context.Context, string, *redisa.TSOptions) *redisa.StatusCmd) {
	fake.tSCreateWithArgsMutex.Lock()
	defer fake.tSCreateWithArgsMutex.Unlock()
	fake.TSCreateWithArgsStub = stub
}

func (fake *FakeCmdable) TSCreateWithArgsArgsForCall(i int) (context.Context, string, *redisa.TSOptions) {
	fake.tSCreateWithArgsMutex.RLock()
	defer fake.tSCreateWithArgsMutex.RUnlock()
	argsForCall := fake.tSCreateWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TSCreateWithArgsReturns(result1 *redisa.StatusCmd) {
	fake.tSCreateWithArgsMutex.Lock()
	defer fake.tSCreateWithArgsMutex.Unlock()
	fake.TSCreateWithArgsStub = nil
	fake.tSCreateWithArgsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSCreateWithArgsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tSCreateWithArgsMutex.Lock()
	defer fake.tSCreateWithArgsMutex.Unlock()
	fake.TSCreateWithArgsStub = nil
	if fake.tSCreateWithArgsReturnsOnCall == nil {
		fake.tSCreateWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tSCreateWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSDecrBy(arg1 context.Context, arg2 string, arg3 float64) *redisa.IntCmd {
	fake.tSDecrByMutex.Lock()
	ret, specificReturn := fake.tSDecrByReturnsOnCall[len(fake.tSDecrByArgsForCall)]
	fake.tSDecrByArgsForCall = append(fake.tSDecrByArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
	}{arg1, arg2, arg3})
	stub := fake.TSDecrByStub
	fakeReturns := fake.tSDecrByReturns
	fake.recordInvocation("TSDecrBy", []interface{}{arg1, arg2, arg3})
	fake.tSDecrByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSDecrByCallCount() int {
	fake.tSDecrByMutex.RLock()
	defer fake.tSDecrByMutex.RUnlock()
	return len(fake.tSDecrByArgsForCall)
}

func (fake *FakeCmdable) TSDecrByCalls(stub func(context.Context, string, float64) *redisa.IntCmd) {
	fake.tSDecrByMutex.Lock()
	defer fake.tSDecrByMutex.Unlock()
	fake.TSDecrByStub = stub
}

func (fake *FakeCmdable) TSDecrByArgsForCall(i int) (context.Context, string, float64) {
	fake.tSDecrByMutex.RLock()
	defer fake.tSDecrByMutex.RUnlock()
	argsForCall := fake.tSDecrByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TSDecrByReturns(result1 *redisa.IntCmd) {
	fake.tSDecrByMutex.Lock()
	defer fake.tSDecrByMutex.Unlock()
	fake.TSDecrByStub = nil
	fake.tSDecrByReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSDecrByReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.tSDecrByMutex.Lock()
	defer fake.tSDecrByMutex.Unlock()
	fake.TSDecrByStub = nil
	if fake.tSDecrByReturnsOnCall == nil {
		fake.tSDecrByReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.tSDecrByReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSDecrByWithArgs(arg1 context.Context, arg2 string, arg3 float64, arg4 *redisa.TSIncrDecrOptions) *redisa.IntCmd {
	fake.tSDecrByWithArgsMutex.Lock()
	ret, specificReturn := fake.tSDecrByWithArgsReturnsOnCall[len(fake.tSDecrByWithArgsArgsForCall)]
	fake.tSDecrByWithArgsArgsForCall = append(fake.tSDecrByWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 *redisa.TSIncrDecrOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.TSDecrByWithArgsStub
	fakeReturns := fake.tSDecrByWithArgsReturns
	fake.recordInvocation("TSDecrByWithArgs", []interface{}{arg1, arg2, arg3, arg4})
	fake.tSDecrByWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSDecrByWithArgsCallCount() int {
	fake.tSDecrByWithArgsMutex.RLock()
	defer fake.tSDecrByWithArgsMutex.RUnlock()
	return len(fake.tSDecrByWithArgsArgsForCall)
}

func (fake *FakeCmdable) TSDecrByWithArgsCalls(stub func(context.Context, string, float64, *redisa.TSIncrDecrOptions) *redisa.IntCmd) {
	fake.tSDecrByWithArgsMutex.Lock()
	defer fake.tSDecrByWithArgsMutex.Unlock()
	fake.TSDecrByWithArgsStub = stub
}

func (fake *FakeCmdable) TSDecrByWithArgsArgsForCall(i int) (context.Context, string, float64, *redisa.TSIncrDecrOptions) {
	fake.tSDecrByWithArgsMutex.RLock()
	defer fake.tSDecrByWithArgsMutex.RUnlock()
	argsForCall := fake.tSDecrByWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) TSDecrByWithArgsReturns(result1 *redisa.IntCmd) {
	fake.tSDecrByWithArgsMutex.Lock()
	defer fake.tSDecrByWithArgsMutex.Unlock()
	fake.TSDecrByWithArgsStub = nil
	fake.tSDecrByWithArgsReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSDecrByWithArgsReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.tSDecrByWithArgsMutex.Lock()
	defer fake.tSDecrByWithArgsMutex.Unlock()
	fake.TSDecrByWithArgsStub = nil
	if fake.tSDecrByWithArgsReturnsOnCall == nil {
		fake.tSDecrByWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.tSDecrByWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSDel(arg1 context.Context, arg2 string, arg3 int, arg4 int) *redisa.IntCmd {
	fake.tSDelMutex.Lock()
	ret, specificReturn := fake.tSDelReturnsOnCall[len(fake.tSDelArgsForCall)]
	fake.tSDelArgsForCall = append(fake.tSDelArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.TSDelStub
	fakeReturns := fake.tSDelReturns
	fake.recordInvocation("TSDel", []interface{}{arg1, arg2, arg3, arg4})
	fake.tSDelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSDelCallCount() int {
	fake.tSDelMutex.RLock()
	defer fake.tSDelMutex.RUnlock()
	return len(fake.tSDelArgsForCall)
}

func (fake *FakeCmdable) TSDelCalls(stub func(context.Context, string, int, int) *redisa.IntCmd) {
	fake.tSDelMutex.Lock()
	defer fake.tSDelMutex.Unlock()
	fake.TSDelStub = stub
}

func (fake *FakeCmdable) TSDelArgsForCall(i int) (context.Context, string, int, int) {
	fake.tSDelMutex.RLock()
	defer fake.tSDelMutex.RUnlock()
	argsForCall := fake.tSDelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) TSDelReturns(result1 *redisa.IntCmd) {
	fake.tSDelMutex.Lock()
	defer fake.tSDelMutex.Unlock()
	fake.TSDelStub = nil
	fake.tSDelReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSDelReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.tSDelMutex.Lock()
	defer fake.tSDelMutex.Unlock()
	fake.TSDelStub = nil
	if fake.tSDelReturnsOnCall == nil {
		fake.tSDelReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.tSDelReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSDeleteRule(arg1 context.Context, arg2 string, arg3 string) *redisa.StatusCmd {
	fake.tSDeleteRuleMutex.Lock()
	ret, specificReturn := fake.tSDeleteRuleReturnsOnCall[len(fake.tSDeleteRuleArgsForCall)]
	fake.tSDeleteRuleArgsForCall = append(fake.tSDeleteRuleArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.TSDeleteRuleStub
	fakeReturns := fake.tSDeleteRuleReturns
	fake.recordInvocation("TSDeleteRule", []interface{}{arg1, arg2, arg3})
	fake.tSDeleteRuleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSDeleteRuleCallCount() int {
	fake.tSDeleteRuleMutex.RLock()
	defer fake.tSDeleteRuleMutex.RUnlock()
	return len(fake.tSDeleteRuleArgsForCall)
}

func (fake *FakeCmdable) TSDeleteRuleCalls(stub func(context.Context, string, string) *redisa.StatusCmd) {
	fake.tSDeleteRuleMutex.Lock()
	defer fake.tSDeleteRuleMutex.Unlock()
	fake.TSDeleteRuleStub = stub
}

func (fake *FakeCmdable) TSDeleteRuleArgsForCall(i int) (context.Context, string, string) {
	fake.tSDeleteRuleMutex.RLock()
	defer fake.tSDeleteRuleMutex.RUnlock()
	argsForCall := fake.tSDeleteRuleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TSDeleteRuleReturns(result1 *redisa.StatusCmd) {
	fake.tSDeleteRuleMutex.Lock()
	defer fake.tSDeleteRuleMutex.Unlock()
	fake.TSDeleteRuleStub = nil
	fake.tSDeleteRuleReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSDeleteRuleReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.tSDeleteRuleMutex.Lock()
	defer fake.tSDeleteRuleMutex.Unlock()
	fake.TSDeleteRuleStub = nil
	if fake.tSDeleteRuleReturnsOnCall == nil {
		fake.tSDeleteRuleReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.tSDeleteRuleReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TSGet(arg1 context.Context, arg2 string) *redisa.TSTimestampValueCmd {
	fake.tSGetMutex.Lock()
	ret, specificReturn := fake.tSGetReturnsOnCall[len(fake.tSGetArgsForCall)]
	fake.tSGetArgsForCall = append(fake.tSGetArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TSGetStub
	fakeReturns := fake.tSGetReturns
	fake.recordInvocation("TSGet", []interface{}{arg1, arg2})
	fake.tSGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSGetCallCount() int {
	fake.tSGetMutex.RLock()
	defer fake.tSGetMutex.RUnlock()
	return len(fake.tSGetArgsForCall)
}

func (fake *FakeCmdable) TSGetCalls(stub func(context.Context, string) *redisa.TSTimestampValueCmd) {
	fake.tSGetMutex.Lock()
	defer fake.tSGetMutex.Unlock()
	fake.TSGetStub = stub
}

func (fake *FakeCmdable) TSGetArgsForCall(i int) (context.Context, string) {
	fake.tSGetMutex.RLock()
	defer fake.tSGetMutex.RUnlock()
	argsForCall := fake.tSGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TSGetReturns(result1 *redisa.TSTimestampValueCmd) {
	fake.tSGetMutex.Lock()
	defer fake.tSGetMutex.Unlock()
	fake.TSGetStub = nil
	fake.tSGetReturns = struct {
		result1 *redisa.TSTimestampValueCmd
	}{result1}
}

func (fake *FakeCmdable) TSGetReturnsOnCall(i int, result1 *redisa.TSTimestampValueCmd) {
	fake.tSGetMutex.Lock()
	defer fake.tSGetMutex.Unlock()
	fake.TSGetStub = nil
	if fake.tSGetReturnsOnCall == nil {
		fake.tSGetReturnsOnCall = make(map[int]struct {
			result1 *redisa.TSTimestampValueCmd
		})
	}
	fake.tSGetReturnsOnCall[i] = struct {
		result1 *redisa.TSTimestampValueCmd
	}{result1}
}

func (fake *FakeCmdable) TSGetWithArgs(arg1 context.Context, arg2 string, arg3 *redisa.TSGetOptions) *redisa.TSTimestampValueCmd {
	fake.tSGetWithArgsMutex.Lock()
	ret, specificReturn := fake.tSGetWithArgsReturnsOnCall[len(fake.tSGetWithArgsArgsForCall)]
	fake.tSGetWithArgsArgsForCall = append(fake.tSGetWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.TSGetOptions
	}{arg1, arg2, arg3})
	stub := fake.TSGetWithArgsStub
	fakeReturns := fake.tSGetWithArgsReturns
	fake.recordInvocation("TSGetWithArgs", []interface{}{arg1, arg2, arg3})
	fake.tSGetWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSGetWithArgsCallCount() int {
	fake.tSGetWithArgsMutex.RLock()
	defer fake.tSGetWithArgsMutex.RUnlock()
	return len(fake.tSGetWithArgsArgsForCall)
}

func (fake *FakeCmdable) TSGetWithArgsCalls(stub func(context.Context, string, *redisa.TSGetOptions) *redisa.TSTimestampValueCmd) {
	fake.tSGetWithArgsMutex.Lock()
	defer fake.tSGetWithArgsMutex.Unlock()
	fake.TSGetWithArgsStub = stub
}

func (fake *FakeCmdable) TSGetWithArgsArgsForCall(i int) (context.Context, string, *redisa.TSGetOptions) {
	fake.tSGetWithArgsMutex.RLock()
	defer fake.tSGetWithArgsMutex.RUnlock()
	argsForCall := fake.tSGetWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TSGetWithArgsReturns(result1 *redisa.TSTimestampValueCmd) {
	fake.tSGetWithArgsMutex.Lock()
	defer fake.tSGetWithArgsMutex.Unlock()
	fake.TSGetWithArgsStub = nil
	fake.tSGetWithArgsReturns = struct {
		result1 *redisa.TSTimestampValueCmd
	}{result1}
}

func (fake *FakeCmdable) TSGetWithArgsReturnsOnCall(i int, result1 *redisa.TSTimestampValueCmd) {
	fake.tSGetWithArgsMutex.Lock()
	defer fake.tSGetWithArgsMutex.Unlock()
	fake.TSGetWithArgsStub = nil
	if fake.tSGetWithArgsReturnsOnCall == nil {
		fake.tSGetWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.TSTimestampValueCmd
		})
	}
	fake.tSGetWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.TSTimestampValueCmd
	}{result1}
}

func (fake *FakeCmdable) TSIncrBy(arg1 context.Context, arg2 string, arg3 float64) *redisa.IntCmd {
	fake.tSIncrByMutex.Lock()
	ret, specificReturn := fake.tSIncrByReturnsOnCall[len(fake.tSIncrByArgsForCall)]
	fake.tSIncrByArgsForCall = append(fake.tSIncrByArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
	}{arg1, arg2, arg3})
	stub := fake.TSIncrByStub
	fakeReturns := fake.tSIncrByReturns
	fake.recordInvocation("TSIncrBy", []interface{}{arg1, arg2, arg3})
	fake.tSIncrByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSIncrByCallCount() int {
	fake.tSIncrByMutex.RLock()
	defer fake.tSIncrByMutex.RUnlock()
	return len(fake.tSIncrByArgsForCall)
}

func (fake *FakeCmdable) TSIncrByCalls(stub func(context.Context, string, float64) *redisa.IntCmd) {
	fake.tSIncrByMutex.Lock()
	defer fake.tSIncrByMutex.Unlock()
	fake.TSIncrByStub = stub
}

func (fake *FakeCmdable) TSIncrByArgsForCall(i int) (context.Context, string, float64) {
	fake.tSIncrByMutex.RLock()
	defer fake.tSIncrByMutex.RUnlock()
	argsForCall := fake.tSIncrByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TSIncrByReturns(result1 *redisa.IntCmd) {
	fake.tSIncrByMutex.Lock()
	defer fake.tSIncrByMutex.Unlock()
	fake.TSIncrByStub = nil
	fake.tSIncrByReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSIncrByReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.tSIncrByMutex.Lock()
	defer fake.tSIncrByMutex.Unlock()
	fake.TSIncrByStub = nil
	if fake.tSIncrByReturnsOnCall == nil {
		fake.tSIncrByReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.tSIncrByReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSIncrByWithArgs(arg1 context.Context, arg2 string, arg3 float64, arg4 *redisa.TSIncrDecrOptions) *redisa.IntCmd {
	fake.tSIncrByWithArgsMutex.Lock()
	ret, specificReturn := fake.tSIncrByWithArgsReturnsOnCall[len(fake.tSIncrByWithArgsArgsForCall)]
	fake.tSIncrByWithArgsArgsForCall = append(fake.tSIncrByWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 *redisa.TSIncrDecrOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.TSIncrByWithArgsStub
	fakeReturns := fake.tSIncrByWithArgsReturns
	fake.recordInvocation("TSIncrByWithArgs", []interface{}{arg1, arg2, arg3, arg4})
	fake.tSIncrByWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSIncrByWithArgsCallCount() int {
	fake.tSIncrByWithArgsMutex.RLock()
	defer fake.tSIncrByWithArgsMutex.RUnlock()
	return len(fake.tSIncrByWithArgsArgsForCall)
}

func (fake *FakeCmdable) TSIncrByWithArgsCalls(stub func(context.Context, string, float64, *redisa.TSIncrDecrOptions) *redisa.IntCmd) {
	fake.tSIncrByWithArgsMutex.Lock()
	defer fake.tSIncrByWithArgsMutex.Unlock()
	fake.TSIncrByWithArgsStub = stub
}

func (fake *FakeCmdable) TSIncrByWithArgsArgsForCall(i int) (context.Context, string, float64, *redisa.TSIncrDecrOptions) {
	fake.tSIncrByWithArgsMutex.RLock()
	defer fake.tSIncrByWithArgsMutex.RUnlock()
	argsForCall := fake.tSIncrByWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) TSIncrByWithArgsReturns(result1 *redisa.IntCmd) {
	fake.tSIncrByWithArgsMutex.Lock()
	defer fake.tSIncrByWithArgsMutex.Unlock()
	fake.TSIncrByWithArgsStub = nil
	fake.tSIncrByWithArgsReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSIncrByWithArgsReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.tSIncrByWithArgsMutex.Lock()
	defer fake.tSIncrByWithArgsMutex.Unlock()
	fake.TSIncrByWithArgsStub = nil
	if fake.tSIncrByWithArgsReturnsOnCall == nil {
		fake.tSIncrByWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.tSIncrByWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TSInfo(arg1 context.Context, arg2 string) *redisa.MapStringInterfaceCmd {
	fake.tSInfoMutex.Lock()
	ret, specificReturn := fake.tSInfoReturnsOnCall[len(fake.tSInfoArgsForCall)]
	fake.tSInfoArgsForCall = append(fake.tSInfoArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TSInfoStub
	fakeReturns := fake.tSInfoReturns
	fake.recordInvocation("TSInfo", []interface{}{arg1, arg2})
	fake.tSInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSInfoCallCount() int {
	fake.tSInfoMutex.RLock()
	defer fake.tSInfoMutex.RUnlock()
	return len(fake.tSInfoArgsForCall)
}

func (fake *FakeCmdable) TSInfoCalls(stub func(context.Context, string) *redisa.MapStringInterfaceCmd) {
	fake.tSInfoMutex.Lock()
	defer fake.tSInfoMutex.Unlock()
	fake.TSInfoStub = stub
}

func (fake *FakeCmdable) TSInfoArgsForCall(i int) (context.Context, string) {
	fake.tSInfoMutex.RLock()
	defer fake.tSInfoMutex.RUnlock()
	argsForCall := fake.tSInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TSInfoReturns(result1 *redisa.MapStringInterfaceCmd) {
	fake.tSInfoMutex.Lock()
	defer fake.tSInfoMutex.Unlock()
	fake.TSInfoStub = nil
	fake.tSInfoReturns = struct {
		result1 *redisa.MapStringInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSInfoReturnsOnCall(i int, result1 *redisa.MapStringInterfaceCmd) {
	fake.tSInfoMutex.Lock()
	defer fake.tSInfoMutex.Unlock()
	fake.TSInfoStub = nil
	if fake.tSInfoReturnsOnCall == nil {
		fake.tSInfoReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringInterfaceCmd
		})
	}
	fake.tSInfoReturnsOnCall[i] = struct {
		result1 *redisa.MapStringInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSInfoWithArgs(arg1 context.Context, arg2 string, arg3 *redisa.TSInfoOptions) *redisa.MapStringInterfaceCmd {
	fake.tSInfoWithArgsMutex.Lock()
	ret, specificReturn := fake.tSInfoWithArgsReturnsOnCall[len(fake.tSInfoWithArgsArgsForCall)]
	fake.tSInfoWithArgsArgsForCall = append(fake.tSInfoWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.TSInfoOptions
	}{arg1, arg2, arg3})
	stub := fake.TSInfoWithArgsStub
	fakeReturns := fake.tSInfoWithArgsReturns
	fake.recordInvocation("TSInfoWithArgs", []interface{}{arg1, arg2, arg3})
	fake.tSInfoWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSInfoWithArgsCallCount() int {
	fake.tSInfoWithArgsMutex.RLock()
	defer fake.tSInfoWithArgsMutex.RUnlock()
	return len(fake.tSInfoWithArgsArgsForCall)
}

func (fake *FakeCmdable) TSInfoWithArgsCalls(stub func(context.Context, string, *redisa.TSInfoOptions) *redisa.MapStringInterfaceCmd) {
	fake.tSInfoWithArgsMutex.Lock()
	defer fake.tSInfoWithArgsMutex.Unlock()
	fake.TSInfoWithArgsStub = stub
}

func (fake *FakeCmdable) TSInfoWithArgsArgsForCall(i int) (context.Context, string, *redisa.TSInfoOptions) {
	fake.tSInfoWithArgsMutex.RLock()
	defer fake.tSInfoWithArgsMutex.RUnlock()
	argsForCall := fake.tSInfoWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TSInfoWithArgsReturns(result1 *redisa.MapStringInterfaceCmd) {
	fake.tSInfoWithArgsMutex.Lock()
	defer fake.tSInfoWithArgsMutex.Unlock()
	fake.TSInfoWithArgsStub = nil
	fake.tSInfoWithArgsReturns = struct {
		result1 *redisa.MapStringInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSInfoWithArgsReturnsOnCall(i int, result1 *redisa.MapStringInterfaceCmd) {
	fake.tSInfoWithArgsMutex.Lock()
	defer fake.tSInfoWithArgsMutex.Unlock()
	fake.TSInfoWithArgsStub = nil
	if fake.tSInfoWithArgsReturnsOnCall == nil {
		fake.tSInfoWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringInterfaceCmd
		})
	}
	fake.tSInfoWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.MapStringInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMAdd(arg1 context.Context, arg2 [][]interface{}) *redisa.IntSliceCmd {
	var arg2Copy [][]interface{}
	if arg2 != nil {
		arg2Copy = make([][]interface{}, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.tSMAddMutex.Lock()
	ret, specificReturn := fake.tSMAddReturnsOnCall[len(fake.tSMAddArgsForCall)]
	fake.tSMAddArgsForCall = append(fake.tSMAddArgsForCall, struct {
		arg1 context.Context
		arg2 [][]interface{}
	}{arg1, arg2Copy})
	stub := fake.TSMAddStub
	fakeReturns := fake.tSMAddReturns
	fake.recordInvocation("TSMAdd", []interface{}{arg1, arg2Copy})
	fake.tSMAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSMAddCallCount() int {
	fake.tSMAddMutex.RLock()
	defer fake.tSMAddMutex.RUnlock()
	return len(fake.tSMAddArgsForCall)
}

func (fake *FakeCmdable) TSMAddCalls(stub func(context.Context, [][]interface{}) *redisa.IntSliceCmd) {
	fake.tSMAddMutex.Lock()
	defer fake.tSMAddMutex.Unlock()
	fake.TSMAddStub = stub
}

func (fake *FakeCmdable) TSMAddArgsForCall(i int) (context.Context, [][]interface{}) {
	fake.tSMAddMutex.RLock()
	defer fake.tSMAddMutex.RUnlock()
	argsForCall := fake.tSMAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TSMAddReturns(result1 *redisa.IntSliceCmd) {
	fake.tSMAddMutex.Lock()
	defer fake.tSMAddMutex.Unlock()
	fake.TSMAddStub = nil
	fake.tSMAddReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMAddReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.tSMAddMutex.Lock()
	defer fake.tSMAddMutex.Unlock()
	fake.TSMAddStub = nil
	if fake.tSMAddReturnsOnCall == nil {
		fake.tSMAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.tSMAddReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMGet(arg1 context.Context, arg2 []string) *redisa.MapStringSliceInterfaceCmd {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.tSMGetMutex.Lock()
	ret, specificReturn := fake.tSMGetReturnsOnCall[len(fake.tSMGetArgsForCall)]
	fake.tSMGetArgsForCall = append(fake.tSMGetArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.TSMGetStub
	fakeReturns := fake.tSMGetReturns
	fake.recordInvocation("TSMGet", []interface{}{arg1, arg2Copy})
	fake.tSMGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSMGetCallCount() int {
	fake.tSMGetMutex.RLock()
	defer fake.tSMGetMutex.RUnlock()
	return len(fake.tSMGetArgsForCall)
}

func (fake *FakeCmdable) TSMGetCalls(stub func(context.Context, []string) *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMGetMutex.Lock()
	defer fake.tSMGetMutex.Unlock()
	fake.TSMGetStub = stub
}

func (fake *FakeCmdable) TSMGetArgsForCall(i int) (context.Context, []string) {
	fake.tSMGetMutex.RLock()
	defer fake.tSMGetMutex.RUnlock()
	argsForCall := fake.tSMGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TSMGetReturns(result1 *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMGetMutex.Lock()
	defer fake.tSMGetMutex.Unlock()
	fake.TSMGetStub = nil
	fake.tSMGetReturns = struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMGetReturnsOnCall(i int, result1 *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMGetMutex.Lock()
	defer fake.tSMGetMutex.Unlock()
	fake.TSMGetStub = nil
	if fake.tSMGetReturnsOnCall == nil {
		fake.tSMGetReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringSliceInterfaceCmd
		})
	}
	fake.tSMGetReturnsOnCall[i] = struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMGetWithArgs(arg1 context.Context, arg2 []string, arg3 *redisa.TSMGetOptions) *redisa.MapStringSliceInterfaceCmd {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.tSMGetWithArgsMutex.Lock()
	ret, specificReturn := fake.tSMGetWithArgsReturnsOnCall[len(fake.tSMGetWithArgsArgsForCall)]
	fake.tSMGetWithArgsArgsForCall = append(fake.tSMGetWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 []string
		arg3 *redisa.TSMGetOptions
	}{arg1, arg2Copy, arg3})
	stub := fake.TSMGetWithArgsStub
	fakeReturns := fake.tSMGetWithArgsReturns
	fake.recordInvocation("TSMGetWithArgs", []interface{}{arg1, arg2Copy, arg3})
	fake.tSMGetWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSMGetWithArgsCallCount() int {
	fake.tSMGetWithArgsMutex.RLock()
	defer fake.tSMGetWithArgsMutex.RUnlock()
	return len(fake.tSMGetWithArgsArgsForCall)
}

func (fake *FakeCmdable) TSMGetWithArgsCalls(stub func(context.Context, []string, *redisa.TSMGetOptions) *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMGetWithArgsMutex.Lock()
	defer fake.tSMGetWithArgsMutex.Unlock()
	fake.TSMGetWithArgsStub = stub
}

func (fake *FakeCmdable) TSMGetWithArgsArgsForCall(i int) (context.Context, []string, *redisa.TSMGetOptions) {
	fake.tSMGetWithArgsMutex.RLock()
	defer fake.tSMGetWithArgsMutex.RUnlock()
	argsForCall := fake.tSMGetWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TSMGetWithArgsReturns(result1 *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMGetWithArgsMutex.Lock()
	defer fake.tSMGetWithArgsMutex.Unlock()
	fake.TSMGetWithArgsStub = nil
	fake.tSMGetWithArgsReturns = struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMGetWithArgsReturnsOnCall(i int, result1 *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMGetWithArgsMutex.Lock()
	defer fake.tSMGetWithArgsMutex.Unlock()
	fake.TSMGetWithArgsStub = nil
	if fake.tSMGetWithArgsReturnsOnCall == nil {
		fake.tSMGetWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringSliceInterfaceCmd
		})
	}
	fake.tSMGetWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMRange(arg1 context.Context, arg2 int, arg3 int, arg4 []string) *redisa.MapStringSliceInterfaceCmd {
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.tSMRangeMutex.Lock()
	ret, specificReturn := fake.tSMRangeReturnsOnCall[len(fake.tSMRangeArgsForCall)]
	fake.tSMRangeArgsForCall = append(fake.tSMRangeArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 []string
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.TSMRangeStub
	fakeReturns := fake.tSMRangeReturns
	fake.recordInvocation("TSMRange", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.tSMRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSMRangeCallCount() int {
	fake.tSMRangeMutex.RLock()
	defer fake.tSMRangeMutex.RUnlock()
	return len(fake.tSMRangeArgsForCall)
}

func (fake *FakeCmdable) TSMRangeCalls(stub func(context.Context, int, int, []string) *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMRangeMutex.Lock()
	defer fake.tSMRangeMutex.Unlock()
	fake.TSMRangeStub = stub
}

func (fake *FakeCmdable) TSMRangeArgsForCall(i int) (context.Context, int, int, []string) {
	fake.tSMRangeMutex.RLock()
	defer fake.tSMRangeMutex.RUnlock()
	argsForCall := fake.tSMRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) TSMRangeReturns(result1 *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMRangeMutex.Lock()
	defer fake.tSMRangeMutex.Unlock()
	fake.TSMRangeStub = nil
	fake.tSMRangeReturns = struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMRangeReturnsOnCall(i int, result1 *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMRangeMutex.Lock()
	defer fake.tSMRangeMutex.Unlock()
	fake.TSMRangeStub = nil
	if fake.tSMRangeReturnsOnCall == nil {
		fake.tSMRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringSliceInterfaceCmd
		})
	}
	fake.tSMRangeReturnsOnCall[i] = struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMRangeWithArgs(arg1 context.Context, arg2 int, arg3 int, arg4 []string, arg5 *redisa.TSMRangeOptions) *redisa.MapStringSliceInterfaceCmd {
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.tSMRangeWithArgsMutex.Lock()
	ret, specificReturn := fake.tSMRangeWithArgsReturnsOnCall[len(fake.tSMRangeWithArgsArgsForCall)]
	fake.tSMRangeWithArgsArgsForCall = append(fake.tSMRangeWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 []string
		arg5 *redisa.TSMRangeOptions
	}{arg1, arg2, arg3, arg4Copy, arg5})
	stub := fake.TSMRangeWithArgsStub
	fakeReturns := fake.tSMRangeWithArgsReturns
	fake.recordInvocation("TSMRangeWithArgs", []interface{}{arg1, arg2, arg3, arg4Copy, arg5})
	fake.tSMRangeWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSMRangeWithArgsCallCount() int {
	fake.tSMRangeWithArgsMutex.RLock()
	defer fake.tSMRangeWithArgsMutex.RUnlock()
	return len(fake.tSMRangeWithArgsArgsForCall)
}

func (fake *FakeCmdable) TSMRangeWithArgsCalls(stub func(context.Context, int, int, []string, *redisa.TSMRangeOptions) *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMRangeWithArgsMutex.Lock()
	defer fake.tSMRangeWithArgsMutex.Unlock()
	fake.TSMRangeWithArgsStub = stub
}

func (fake *FakeCmdable) TSMRangeWithArgsArgsForCall(i int) (context.Context, int, int, []string, *redisa.TSMRangeOptions) {
	fake.tSMRangeWithArgsMutex.RLock()
	defer fake.tSMRangeWithArgsMutex.RUnlock()
	argsForCall := fake.tSMRangeWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) TSMRangeWithArgsReturns(result1 *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMRangeWithArgsMutex.Lock()
	defer fake.tSMRangeWithArgsMutex.Unlock()
	fake.TSMRangeWithArgsStub = nil
	fake.tSMRangeWithArgsReturns = struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMRangeWithArgsReturnsOnCall(i int, result1 *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMRangeWithArgsMutex.Lock()
	defer fake.tSMRangeWithArgsMutex.Unlock()
	fake.TSMRangeWithArgsStub = nil
	if fake.tSMRangeWithArgsReturnsOnCall == nil {
		fake.tSMRangeWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringSliceInterfaceCmd
		})
	}
	fake.tSMRangeWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMRevRange(arg1 context.Context, arg2 int, arg3 int, arg4 []string) *redisa.MapStringSliceInterfaceCmd {
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.tSMRevRangeMutex.Lock()
	ret, specificReturn := fake.tSMRevRangeReturnsOnCall[len(fake.tSMRevRangeArgsForCall)]
	fake.tSMRevRangeArgsForCall = append(fake.tSMRevRangeArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 []string
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.TSMRevRangeStub
	fakeReturns := fake.tSMRevRangeReturns
	fake.recordInvocation("TSMRevRange", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.tSMRevRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSMRevRangeCallCount() int {
	fake.tSMRevRangeMutex.RLock()
	defer fake.tSMRevRangeMutex.RUnlock()
	return len(fake.tSMRevRangeArgsForCall)
}

func (fake *FakeCmdable) TSMRevRangeCalls(stub func(context.Context, int, int, []string) *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMRevRangeMutex.Lock()
	defer fake.tSMRevRangeMutex.Unlock()
	fake.TSMRevRangeStub = stub
}

func (fake *FakeCmdable) TSMRevRangeArgsForCall(i int) (context.Context, int, int, []string) {
	fake.tSMRevRangeMutex.RLock()
	defer fake.tSMRevRangeMutex.RUnlock()
	argsForCall := fake.tSMRevRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) TSMRevRangeReturns(result1 *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMRevRangeMutex.Lock()
	defer fake.tSMRevRangeMutex.Unlock()
	fake.TSMRevRangeStub = nil
	fake.tSMRevRangeReturns = struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMRevRangeReturnsOnCall(i int, result1 *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMRevRangeMutex.Lock()
	defer fake.tSMRevRangeMutex.Unlock()
	fake.TSMRevRangeStub = nil
	if fake.tSMRevRangeReturnsOnCall == nil {
		fake.tSMRevRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringSliceInterfaceCmd
		})
	}
	fake.tSMRevRangeReturnsOnCall[i] = struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMRevRangeWithArgs(arg1 context.Context, arg2 int, arg3 int, arg4 []string, arg5 *redisa.TSMRevRangeOptions) *redisa.MapStringSliceInterfaceCmd {
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.tSMRevRangeWithArgsMutex.Lock()
	ret, specificReturn := fake.tSMRevRangeWithArgsReturnsOnCall[len(fake.tSMRevRangeWithArgsArgsForCall)]
	fake.tSMRevRangeWithArgsArgsForCall = append(fake.tSMRevRangeWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 []string
		arg5 *redisa.TSMRevRangeOptions
	}{arg1, arg2, arg3, arg4Copy, arg5})
	stub := fake.TSMRevRangeWithArgsStub
	fakeReturns := fake.tSMRevRangeWithArgsReturns
	fake.recordInvocation("TSMRevRangeWithArgs", []interface{}{arg1, arg2, arg3, arg4Copy, arg5})
	fake.tSMRevRangeWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSMRevRangeWithArgsCallCount() int {
	fake.tSMRevRangeWithArgsMutex.RLock()
	defer fake.tSMRevRangeWithArgsMutex.RUnlock()
	return len(fake.tSMRevRangeWithArgsArgsForCall)
}

func (fake *FakeCmdable) TSMRevRangeWithArgsCalls(stub func(context.Context, int, int, []string, *redisa.TSMRevRangeOptions) *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMRevRangeWithArgsMutex.Lock()
	defer fake.tSMRevRangeWithArgsMutex.Unlock()
	fake.TSMRevRangeWithArgsStub = stub
}

func (fake *FakeCmdable) TSMRevRangeWithArgsArgsForCall(i int) (context.Context, int, int, []string, *redisa.TSMRevRangeOptions) {
	fake.tSMRevRangeWithArgsMutex.RLock()
	defer fake.tSMRevRangeWithArgsMutex.RUnlock()
	argsForCall := fake.tSMRevRangeWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) TSMRevRangeWithArgsReturns(result1 *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMRevRangeWithArgsMutex.Lock()
	defer fake.tSMRevRangeWithArgsMutex.Unlock()
	fake.TSMRevRangeWithArgsStub = nil
	fake.tSMRevRangeWithArgsReturns = struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSMRevRangeWithArgsReturnsOnCall(i int, result1 *redisa.MapStringSliceInterfaceCmd) {
	fake.tSMRevRangeWithArgsMutex.Lock()
	defer fake.tSMRevRangeWithArgsMutex.Unlock()
	fake.TSMRevRangeWithArgsStub = nil
	if fake.tSMRevRangeWithArgsReturnsOnCall == nil {
		fake.tSMRevRangeWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringSliceInterfaceCmd
		})
	}
	fake.tSMRevRangeWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.MapStringSliceInterfaceCmd
	}{result1}
}

func (fake *FakeCmdable) TSQueryIndex(arg1 context.Context, arg2 []string) *redisa.StringSliceCmd {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.tSQueryIndexMutex.Lock()
	ret, specificReturn := fake.tSQueryIndexReturnsOnCall[len(fake.tSQueryIndexArgsForCall)]
	fake.tSQueryIndexArgsForCall = append(fake.tSQueryIndexArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.TSQueryIndexStub
	fakeReturns := fake.tSQueryIndexReturns
	fake.recordInvocation("TSQueryIndex", []interface{}{arg1, arg2Copy})
	fake.tSQueryIndexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSQueryIndexCallCount() int {
	fake.tSQueryIndexMutex.RLock()
	defer fake.tSQueryIndexMutex.RUnlock()
	return len(fake.tSQueryIndexArgsForCall)
}

func (fake *FakeCmdable) TSQueryIndexCalls(stub func(context.Context, []string) *redisa.StringSliceCmd) {
	fake.tSQueryIndexMutex.Lock()
	defer fake.tSQueryIndexMutex.Unlock()
	fake.TSQueryIndexStub = stub
}

func (fake *FakeCmdable) TSQueryIndexArgsForCall(i int) (context.Context, []string) {
	fake.tSQueryIndexMutex.RLock()
	defer fake.tSQueryIndexMutex.RUnlock()
	argsForCall := fake.tSQueryIndexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TSQueryIndexReturns(result1 *redisa.StringSliceCmd) {
	fake.tSQueryIndexMutex.Lock()
	defer fake.tSQueryIndexMutex.Unlock()
	fake.TSQueryIndexStub = nil
	fake.tSQueryIndexReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TSQueryIndexReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.tSQueryIndexMutex.Lock()
	defer fake.tSQueryIndexMutex.Unlock()
	fake.TSQueryIndexStub = nil
	if fake.tSQueryIndexReturnsOnCall == nil {
		fake.tSQueryIndexReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.tSQueryIndexReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TSRange(arg1 context.Context, arg2 string, arg3 int, arg4 int) *redisa.TSTimestampValueSliceCmd {
	fake.tSRangeMutex.Lock()
	ret, specificReturn := fake.tSRangeReturnsOnCall[len(fake.tSRangeArgsForCall)]
	fake.tSRangeArgsForCall = append(fake.tSRangeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.TSRangeStub
	fakeReturns := fake.tSRangeReturns
	fake.recordInvocation("TSRange", []interface{}{arg1, arg2, arg3, arg4})
	fake.tSRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSRangeCallCount() int {
	fake.tSRangeMutex.RLock()
	defer fake.tSRangeMutex.RUnlock()
	return len(fake.tSRangeArgsForCall)
}

func (fake *FakeCmdable) TSRangeCalls(stub func(context.Context, string, int, int) *redisa.TSTimestampValueSliceCmd) {
	fake.tSRangeMutex.Lock()
	defer fake.tSRangeMutex.Unlock()
	fake.TSRangeStub = stub
}

func (fake *FakeCmdable) TSRangeArgsForCall(i int) (context.Context, string, int, int) {
	fake.tSRangeMutex.RLock()
	defer fake.tSRangeMutex.RUnlock()
	argsForCall := fake.tSRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) TSRangeReturns(result1 *redisa.TSTimestampValueSliceCmd) {
	fake.tSRangeMutex.Lock()
	defer fake.tSRangeMutex.Unlock()
	fake.TSRangeStub = nil
	fake.tSRangeReturns = struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TSRangeReturnsOnCall(i int, result1 *redisa.TSTimestampValueSliceCmd) {
	fake.tSRangeMutex.Lock()
	defer fake.tSRangeMutex.Unlock()
	fake.TSRangeStub = nil
	if fake.tSRangeReturnsOnCall == nil {
		fake.tSRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.TSTimestampValueSliceCmd
		})
	}
	fake.tSRangeReturnsOnCall[i] = struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TSRangeWithArgs(arg1 context.Context, arg2 string, arg3 int, arg4 int, arg5 *redisa.TSRangeOptions) *redisa.TSTimestampValueSliceCmd {
	fake.tSRangeWithArgsMutex.Lock()
	ret, specificReturn := fake.tSRangeWithArgsReturnsOnCall[len(fake.tSRangeWithArgsArgsForCall)]
	fake.tSRangeWithArgsArgsForCall = append(fake.tSRangeWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
		arg5 *redisa.TSRangeOptions
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.TSRangeWithArgsStub
	fakeReturns := fake.tSRangeWithArgsReturns
	fake.recordInvocation("TSRangeWithArgs", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.tSRangeWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSRangeWithArgsCallCount() int {
	fake.tSRangeWithArgsMutex.RLock()
	defer fake.tSRangeWithArgsMutex.RUnlock()
	return len(fake.tSRangeWithArgsArgsForCall)
}

func (fake *FakeCmdable) TSRangeWithArgsCalls(stub func(context.Context, string, int, int, *redisa.TSRangeOptions) *redisa.TSTimestampValueSliceCmd) {
	fake.tSRangeWithArgsMutex.Lock()
	defer fake.tSRangeWithArgsMutex.Unlock()
	fake.TSRangeWithArgsStub = stub
}

func (fake *FakeCmdable) TSRangeWithArgsArgsForCall(i int) (context.Context, string, int, int, *redisa.TSRangeOptions) {
	fake.tSRangeWithArgsMutex.RLock()
	defer fake.tSRangeWithArgsMutex.RUnlock()
	argsForCall := fake.tSRangeWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) TSRangeWithArgsReturns(result1 *redisa.TSTimestampValueSliceCmd) {
	fake.tSRangeWithArgsMutex.Lock()
	defer fake.tSRangeWithArgsMutex.Unlock()
	fake.TSRangeWithArgsStub = nil
	fake.tSRangeWithArgsReturns = struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TSRangeWithArgsReturnsOnCall(i int, result1 *redisa.TSTimestampValueSliceCmd) {
	fake.tSRangeWithArgsMutex.Lock()
	defer fake.tSRangeWithArgsMutex.Unlock()
	fake.TSRangeWithArgsStub = nil
	if fake.tSRangeWithArgsReturnsOnCall == nil {
		fake.tSRangeWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.TSTimestampValueSliceCmd
		})
	}
	fake.tSRangeWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TSRevRange(arg1 context.Context, arg2 string, arg3 int, arg4 int) *redisa.TSTimestampValueSliceCmd {
	fake.tSRevRangeMutex.Lock()
	ret, specificReturn := fake.tSRevRangeReturnsOnCall[len(fake.tSRevRangeArgsForCall)]
	fake.tSRevRangeArgsForCall = append(fake.tSRevRangeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.TSRevRangeStub
	fakeReturns := fake.tSRevRangeReturns
	fake.recordInvocation("TSRevRange", []interface{}{arg1, arg2, arg3, arg4})
	fake.tSRevRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSRevRangeCallCount() int {
	fake.tSRevRangeMutex.RLock()
	defer fake.tSRevRangeMutex.RUnlock()
	return len(fake.tSRevRangeArgsForCall)
}

func (fake *FakeCmdable) TSRevRangeCalls(stub func(context.Context, string, int, int) *redisa.TSTimestampValueSliceCmd) {
	fake.tSRevRangeMutex.Lock()
	defer fake.tSRevRangeMutex.Unlock()
	fake.TSRevRangeStub = stub
}

func (fake *FakeCmdable) TSRevRangeArgsForCall(i int) (context.Context, string, int, int) {
	fake.tSRevRangeMutex.RLock()
	defer fake.tSRevRangeMutex.RUnlock()
	argsForCall := fake.tSRevRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) TSRevRangeReturns(result1 *redisa.TSTimestampValueSliceCmd) {
	fake.tSRevRangeMutex.Lock()
	defer fake.tSRevRangeMutex.Unlock()
	fake.TSRevRangeStub = nil
	fake.tSRevRangeReturns = struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TSRevRangeReturnsOnCall(i int, result1 *redisa.TSTimestampValueSliceCmd) {
	fake.tSRevRangeMutex.Lock()
	defer fake.tSRevRangeMutex.Unlock()
	fake.TSRevRangeStub = nil
	if fake.tSRevRangeReturnsOnCall == nil {
		fake.tSRevRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.TSTimestampValueSliceCmd
		})
	}
	fake.tSRevRangeReturnsOnCall[i] = struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TSRevRangeWithArgs(arg1 context.Context, arg2 string, arg3 int, arg4 int, arg5 *redisa.TSRevRangeOptions) *redisa.TSTimestampValueSliceCmd {
	fake.tSRevRangeWithArgsMutex.Lock()
	ret, specificReturn := fake.tSRevRangeWithArgsReturnsOnCall[len(fake.tSRevRangeWithArgsArgsForCall)]
	fake.tSRevRangeWithArgsArgsForCall = append(fake.tSRevRangeWithArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
		arg5 *redisa.TSRevRangeOptions
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.TSRevRangeWithArgsStub
	fakeReturns := fake.tSRevRangeWithArgsReturns
	fake.recordInvocation("TSRevRangeWithArgs", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.tSRevRangeWithArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TSRevRangeWithArgsCallCount() int {
	fake.tSRevRangeWithArgsMutex.RLock()
	defer fake.tSRevRangeWithArgsMutex.RUnlock()
	return len(fake.tSRevRangeWithArgsArgsForCall)
}

func (fake *FakeCmdable) TSRevRangeWithArgsCalls(stub func(context.Context, string, int, int, *redisa.TSRevRangeOptions) *redisa.TSTimestampValueSliceCmd) {
	fake.tSRevRangeWithArgsMutex.Lock()
	defer fake.tSRevRangeWithArgsMutex.Unlock()
	fake.TSRevRangeWithArgsStub = stub
}

func (fake *FakeCmdable) TSRevRangeWithArgsArgsForCall(i int) (context.Context, string, int, int, *redisa.TSRevRangeOptions) {
	fake.tSRevRangeWithArgsMutex.RLock()
	defer fake.tSRevRangeWithArgsMutex.RUnlock()
	argsForCall := fake.tSRevRangeWithArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) TSRevRangeWithArgsReturns(result1 *redisa.TSTimestampValueSliceCmd) {
	fake.tSRevRangeWithArgsMutex.Lock()
	defer fake.tSRevRangeWithArgsMutex.Unlock()
	fake.TSRevRangeWithArgsStub = nil
	fake.tSRevRangeWithArgsReturns = struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TSRevRangeWithArgsReturnsOnCall(i int, result1 *redisa.TSTimestampValueSliceCmd) {
	fake.tSRevRangeWithArgsMutex.Lock()
	defer fake.tSRevRangeWithArgsMutex.Unlock()
	fake.TSRevRangeWithArgsStub = nil
	if fake.tSRevRangeWithArgsReturnsOnCall == nil {
		fake.tSRevRangeWithArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.TSTimestampValueSliceCmd
		})
	}
	fake.tSRevRangeWithArgsReturnsOnCall[i] = struct {
		result1 *redisa.TSTimestampValueSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TTL(arg1 context.Context, arg2 string) *redisa.DurationCmd {
	fake.tTLMutex.Lock()
	ret, specificReturn := fake.tTLReturnsOnCall[len(fake.tTLArgsForCall)]
	fake.tTLArgsForCall = append(fake.tTLArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TTLStub
	fakeReturns := fake.tTLReturns
	fake.recordInvocation("TTL", []interface{}{arg1, arg2})
	fake.tTLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TTLCallCount() int {
	fake.tTLMutex.RLock()
	defer fake.tTLMutex.RUnlock()
	return len(fake.tTLArgsForCall)
}

func (fake *FakeCmdable) TTLCalls(stub func(context.Context, string) *redisa.DurationCmd) {
	fake.tTLMutex.Lock()
	defer fake.tTLMutex.Unlock()
	fake.TTLStub = stub
}

func (fake *FakeCmdable) TTLArgsForCall(i int) (context.Context, string) {
	fake.tTLMutex.RLock()
	defer fake.tTLMutex.RUnlock()
	argsForCall := fake.tTLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TTLReturns(result1 *redisa.DurationCmd) {
	fake.tTLMutex.Lock()
	defer fake.tTLMutex.Unlock()
	fake.TTLStub = nil
	fake.tTLReturns = struct {
		result1 *redisa.DurationCmd
	}{result1}
}

func (fake *FakeCmdable) TTLReturnsOnCall(i int, result1 *redisa.DurationCmd) {
	fake.tTLMutex.Lock()
	defer fake.tTLMutex.Unlock()
	fake.TTLStub = nil
	if fake.tTLReturnsOnCall == nil {
		fake.tTLReturnsOnCall = make(map[int]struct {
			result1 *redisa.DurationCmd
		})
	}
	fake.tTLReturnsOnCall[i] = struct {
		result1 *redisa.DurationCmd
	}{result1}
}

func (fake *FakeCmdable) Time(arg1 context.Context) *redisa.TimeCmd {
	fake.timeMutex.Lock()
	ret, specificReturn := fake.timeReturnsOnCall[len(fake.timeArgsForCall)]
	fake.timeArgsForCall = append(fake.timeArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.TimeStub
	fakeReturns := fake.timeReturns
	fake.recordInvocation("Time", []interface{}{arg1})
	fake.timeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TimeCallCount() int {
	fake.timeMutex.RLock()
	defer fake.timeMutex.RUnlock()
	return len(fake.timeArgsForCall)
}

func (fake *FakeCmdable) TimeCalls(stub func(context.Context) *redisa.TimeCmd) {
	fake.timeMutex.Lock()
	defer fake.timeMutex.Unlock()
	fake.TimeStub = stub
}

func (fake *FakeCmdable) TimeArgsForCall(i int) context.Context {
	fake.timeMutex.RLock()
	defer fake.timeMutex.RUnlock()
	argsForCall := fake.timeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdable) TimeReturns(result1 *redisa.TimeCmd) {
	fake.timeMutex.Lock()
	defer fake.timeMutex.Unlock()
	fake.TimeStub = nil
	fake.timeReturns = struct {
		result1 *redisa.TimeCmd
	}{result1}
}

func (fake *FakeCmdable) TimeReturnsOnCall(i int, result1 *redisa.TimeCmd) {
	fake.timeMutex.Lock()
	defer fake.timeMutex.Unlock()
	fake.TimeStub = nil
	if fake.timeReturnsOnCall == nil {
		fake.timeReturnsOnCall = make(map[int]struct {
			result1 *redisa.TimeCmd
		})
	}
	fake.timeReturnsOnCall[i] = struct {
		result1 *redisa.TimeCmd
	}{result1}
}

func (fake *FakeCmdable) TopKAdd(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.StringSliceCmd {
	fake.topKAddMutex.Lock()
	ret, specificReturn := fake.topKAddReturnsOnCall[len(fake.topKAddArgsForCall)]
	fake.topKAddArgsForCall = append(fake.topKAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.TopKAddStub
	fakeReturns := fake.topKAddReturns
	fake.recordInvocation("TopKAdd", []interface{}{arg1, arg2, arg3})
	fake.topKAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TopKAddCallCount() int {
	fake.topKAddMutex.RLock()
	defer fake.topKAddMutex.RUnlock()
	return len(fake.topKAddArgsForCall)
}

func (fake *FakeCmdable) TopKAddCalls(stub func(context.Context, string, ...interface{}) *redisa.StringSliceCmd) {
	fake.topKAddMutex.Lock()
	defer fake.topKAddMutex.Unlock()
	fake.TopKAddStub = stub
}

func (fake *FakeCmdable) TopKAddArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.topKAddMutex.RLock()
	defer fake.topKAddMutex.RUnlock()
	argsForCall := fake.topKAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TopKAddReturns(result1 *redisa.StringSliceCmd) {
	fake.topKAddMutex.Lock()
	defer fake.topKAddMutex.Unlock()
	fake.TopKAddStub = nil
	fake.topKAddReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TopKAddReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.topKAddMutex.Lock()
	defer fake.topKAddMutex.Unlock()
	fake.TopKAddStub = nil
	if fake.topKAddReturnsOnCall == nil {
		fake.topKAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.topKAddReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TopKCount(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntSliceCmd {
	fake.topKCountMutex.Lock()
	ret, specificReturn := fake.topKCountReturnsOnCall[len(fake.topKCountArgsForCall)]
	fake.topKCountArgsForCall = append(fake.topKCountArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.TopKCountStub
	fakeReturns := fake.topKCountReturns
	fake.recordInvocation("TopKCount", []interface{}{arg1, arg2, arg3})
	fake.topKCountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TopKCountCallCount() int {
	fake.topKCountMutex.RLock()
	defer fake.topKCountMutex.RUnlock()
	return len(fake.topKCountArgsForCall)
}

func (fake *FakeCmdable) TopKCountCalls(stub func(context.Context, string, ...interface{}) *redisa.IntSliceCmd) {
	fake.topKCountMutex.Lock()
	defer fake.topKCountMutex.Unlock()
	fake.TopKCountStub = stub
}

func (fake *FakeCmdable) TopKCountArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.topKCountMutex.RLock()
	defer fake.topKCountMutex.RUnlock()
	argsForCall := fake.topKCountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TopKCountReturns(result1 *redisa.IntSliceCmd) {
	fake.topKCountMutex.Lock()
	defer fake.topKCountMutex.Unlock()
	fake.TopKCountStub = nil
	fake.topKCountReturns = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TopKCountReturnsOnCall(i int, result1 *redisa.IntSliceCmd) {
	fake.topKCountMutex.Lock()
	defer fake.topKCountMutex.Unlock()
	fake.TopKCountStub = nil
	if fake.topKCountReturnsOnCall == nil {
		fake.topKCountReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntSliceCmd
		})
	}
	fake.topKCountReturnsOnCall[i] = struct {
		result1 *redisa.IntSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TopKIncrBy(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.StringSliceCmd {
	fake.topKIncrByMutex.Lock()
	ret, specificReturn := fake.topKIncrByReturnsOnCall[len(fake.topKIncrByArgsForCall)]
	fake.topKIncrByArgsForCall = append(fake.topKIncrByArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.TopKIncrByStub
	fakeReturns := fake.topKIncrByReturns
	fake.recordInvocation("TopKIncrBy", []interface{}{arg1, arg2, arg3})
	fake.topKIncrByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TopKIncrByCallCount() int {
	fake.topKIncrByMutex.RLock()
	defer fake.topKIncrByMutex.RUnlock()
	return len(fake.topKIncrByArgsForCall)
}

func (fake *FakeCmdable) TopKIncrByCalls(stub func(context.Context, string, ...interface{}) *redisa.StringSliceCmd) {
	fake.topKIncrByMutex.Lock()
	defer fake.topKIncrByMutex.Unlock()
	fake.TopKIncrByStub = stub
}

func (fake *FakeCmdable) TopKIncrByArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.topKIncrByMutex.RLock()
	defer fake.topKIncrByMutex.RUnlock()
	argsForCall := fake.topKIncrByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TopKIncrByReturns(result1 *redisa.StringSliceCmd) {
	fake.topKIncrByMutex.Lock()
	defer fake.topKIncrByMutex.Unlock()
	fake.TopKIncrByStub = nil
	fake.topKIncrByReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TopKIncrByReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.topKIncrByMutex.Lock()
	defer fake.topKIncrByMutex.Unlock()
	fake.TopKIncrByStub = nil
	if fake.topKIncrByReturnsOnCall == nil {
		fake.topKIncrByReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.topKIncrByReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TopKInfo(arg1 context.Context, arg2 string) *redisa.TopKInfoCmd {
	fake.topKInfoMutex.Lock()
	ret, specificReturn := fake.topKInfoReturnsOnCall[len(fake.topKInfoArgsForCall)]
	fake.topKInfoArgsForCall = append(fake.topKInfoArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TopKInfoStub
	fakeReturns := fake.topKInfoReturns
	fake.recordInvocation("TopKInfo", []interface{}{arg1, arg2})
	fake.topKInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TopKInfoCallCount() int {
	fake.topKInfoMutex.RLock()
	defer fake.topKInfoMutex.RUnlock()
	return len(fake.topKInfoArgsForCall)
}

func (fake *FakeCmdable) TopKInfoCalls(stub func(context.Context, string) *redisa.TopKInfoCmd) {
	fake.topKInfoMutex.Lock()
	defer fake.topKInfoMutex.Unlock()
	fake.TopKInfoStub = stub
}

func (fake *FakeCmdable) TopKInfoArgsForCall(i int) (context.Context, string) {
	fake.topKInfoMutex.RLock()
	defer fake.topKInfoMutex.RUnlock()
	argsForCall := fake.topKInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TopKInfoReturns(result1 *redisa.TopKInfoCmd) {
	fake.topKInfoMutex.Lock()
	defer fake.topKInfoMutex.Unlock()
	fake.TopKInfoStub = nil
	fake.topKInfoReturns = struct {
		result1 *redisa.TopKInfoCmd
	}{result1}
}

func (fake *FakeCmdable) TopKInfoReturnsOnCall(i int, result1 *redisa.TopKInfoCmd) {
	fake.topKInfoMutex.Lock()
	defer fake.topKInfoMutex.Unlock()
	fake.TopKInfoStub = nil
	if fake.topKInfoReturnsOnCall == nil {
		fake.topKInfoReturnsOnCall = make(map[int]struct {
			result1 *redisa.TopKInfoCmd
		})
	}
	fake.topKInfoReturnsOnCall[i] = struct {
		result1 *redisa.TopKInfoCmd
	}{result1}
}

func (fake *FakeCmdable) TopKList(arg1 context.Context, arg2 string) *redisa.StringSliceCmd {
	fake.topKListMutex.Lock()
	ret, specificReturn := fake.topKListReturnsOnCall[len(fake.topKListArgsForCall)]
	fake.topKListArgsForCall = append(fake.topKListArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TopKListStub
	fakeReturns := fake.topKListReturns
	fake.recordInvocation("TopKList", []interface{}{arg1, arg2})
	fake.topKListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TopKListCallCount() int {
	fake.topKListMutex.RLock()
	defer fake.topKListMutex.RUnlock()
	return len(fake.topKListArgsForCall)
}

func (fake *FakeCmdable) TopKListCalls(stub func(context.Context, string) *redisa.StringSliceCmd) {
	fake.topKListMutex.Lock()
	defer fake.topKListMutex.Unlock()
	fake.TopKListStub = stub
}

func (fake *FakeCmdable) TopKListArgsForCall(i int) (context.Context, string) {
	fake.topKListMutex.RLock()
	defer fake.topKListMutex.RUnlock()
	argsForCall := fake.topKListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TopKListReturns(result1 *redisa.StringSliceCmd) {
	fake.topKListMutex.Lock()
	defer fake.topKListMutex.Unlock()
	fake.TopKListStub = nil
	fake.topKListReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TopKListReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.topKListMutex.Lock()
	defer fake.topKListMutex.Unlock()
	fake.TopKListStub = nil
	if fake.topKListReturnsOnCall == nil {
		fake.topKListReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.topKListReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TopKListWithCount(arg1 context.Context, arg2 string) *redisa.MapStringIntCmd {
	fake.topKListWithCountMutex.Lock()
	ret, specificReturn := fake.topKListWithCountReturnsOnCall[len(fake.topKListWithCountArgsForCall)]
	fake.topKListWithCountArgsForCall = append(fake.topKListWithCountArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TopKListWithCountStub
	fakeReturns := fake.topKListWithCountReturns
	fake.recordInvocation("TopKListWithCount", []interface{}{arg1, arg2})
	fake.topKListWithCountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TopKListWithCountCallCount() int {
	fake.topKListWithCountMutex.RLock()
	defer fake.topKListWithCountMutex.RUnlock()
	return len(fake.topKListWithCountArgsForCall)
}

func (fake *FakeCmdable) TopKListWithCountCalls(stub func(context.Context, string) *redisa.MapStringIntCmd) {
	fake.topKListWithCountMutex.Lock()
	defer fake.topKListWithCountMutex.Unlock()
	fake.TopKListWithCountStub = stub
}

func (fake *FakeCmdable) TopKListWithCountArgsForCall(i int) (context.Context, string) {
	fake.topKListWithCountMutex.RLock()
	defer fake.topKListWithCountMutex.RUnlock()
	argsForCall := fake.topKListWithCountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TopKListWithCountReturns(result1 *redisa.MapStringIntCmd) {
	fake.topKListWithCountMutex.Lock()
	defer fake.topKListWithCountMutex.Unlock()
	fake.TopKListWithCountStub = nil
	fake.topKListWithCountReturns = struct {
		result1 *redisa.MapStringIntCmd
	}{result1}
}

func (fake *FakeCmdable) TopKListWithCountReturnsOnCall(i int, result1 *redisa.MapStringIntCmd) {
	fake.topKListWithCountMutex.Lock()
	defer fake.topKListWithCountMutex.Unlock()
	fake.TopKListWithCountStub = nil
	if fake.topKListWithCountReturnsOnCall == nil {
		fake.topKListWithCountReturnsOnCall = make(map[int]struct {
			result1 *redisa.MapStringIntCmd
		})
	}
	fake.topKListWithCountReturnsOnCall[i] = struct {
		result1 *redisa.MapStringIntCmd
	}{result1}
}

func (fake *FakeCmdable) TopKQuery(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.BoolSliceCmd {
	fake.topKQueryMutex.Lock()
	ret, specificReturn := fake.topKQueryReturnsOnCall[len(fake.topKQueryArgsForCall)]
	fake.topKQueryArgsForCall = append(fake.topKQueryArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.TopKQueryStub
	fakeReturns := fake.topKQueryReturns
	fake.recordInvocation("TopKQuery", []interface{}{arg1, arg2, arg3})
	fake.topKQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TopKQueryCallCount() int {
	fake.topKQueryMutex.RLock()
	defer fake.topKQueryMutex.RUnlock()
	return len(fake.topKQueryArgsForCall)
}

func (fake *FakeCmdable) TopKQueryCalls(stub func(context.Context, string, ...interface{}) *redisa.BoolSliceCmd) {
	fake.topKQueryMutex.Lock()
	defer fake.topKQueryMutex.Unlock()
	fake.TopKQueryStub = stub
}

func (fake *FakeCmdable) TopKQueryArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.topKQueryMutex.RLock()
	defer fake.topKQueryMutex.RUnlock()
	argsForCall := fake.topKQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TopKQueryReturns(result1 *redisa.BoolSliceCmd) {
	fake.topKQueryMutex.Lock()
	defer fake.topKQueryMutex.Unlock()
	fake.TopKQueryStub = nil
	fake.topKQueryReturns = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TopKQueryReturnsOnCall(i int, result1 *redisa.BoolSliceCmd) {
	fake.topKQueryMutex.Lock()
	defer fake.topKQueryMutex.Unlock()
	fake.TopKQueryStub = nil
	if fake.topKQueryReturnsOnCall == nil {
		fake.topKQueryReturnsOnCall = make(map[int]struct {
			result1 *redisa.BoolSliceCmd
		})
	}
	fake.topKQueryReturnsOnCall[i] = struct {
		result1 *redisa.BoolSliceCmd
	}{result1}
}

func (fake *FakeCmdable) TopKReserve(arg1 context.Context, arg2 string, arg3 int64) *redisa.StatusCmd {
	fake.topKReserveMutex.Lock()
	ret, specificReturn := fake.topKReserveReturnsOnCall[len(fake.topKReserveArgsForCall)]
	fake.topKReserveArgsForCall = append(fake.topKReserveArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.TopKReserveStub
	fakeReturns := fake.topKReserveReturns
	fake.recordInvocation("TopKReserve", []interface{}{arg1, arg2, arg3})
	fake.topKReserveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TopKReserveCallCount() int {
	fake.topKReserveMutex.RLock()
	defer fake.topKReserveMutex.RUnlock()
	return len(fake.topKReserveArgsForCall)
}

func (fake *FakeCmdable) TopKReserveCalls(stub func(context.Context, string, int64) *redisa.StatusCmd) {
	fake.topKReserveMutex.Lock()
	defer fake.topKReserveMutex.Unlock()
	fake.TopKReserveStub = stub
}

func (fake *FakeCmdable) TopKReserveArgsForCall(i int) (context.Context, string, int64) {
	fake.topKReserveMutex.RLock()
	defer fake.topKReserveMutex.RUnlock()
	argsForCall := fake.topKReserveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) TopKReserveReturns(result1 *redisa.StatusCmd) {
	fake.topKReserveMutex.Lock()
	defer fake.topKReserveMutex.Unlock()
	fake.TopKReserveStub = nil
	fake.topKReserveReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TopKReserveReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.topKReserveMutex.Lock()
	defer fake.topKReserveMutex.Unlock()
	fake.TopKReserveStub = nil
	if fake.topKReserveReturnsOnCall == nil {
		fake.topKReserveReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.topKReserveReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TopKReserveWithOptions(arg1 context.Context, arg2 string, arg3 int64, arg4 int64, arg5 int64, arg6 float64) *redisa.StatusCmd {
	fake.topKReserveWithOptionsMutex.Lock()
	ret, specificReturn := fake.topKReserveWithOptionsReturnsOnCall[len(fake.topKReserveWithOptionsArgsForCall)]
	fake.topKReserveWithOptionsArgsForCall = append(fake.topKReserveWithOptionsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
		arg5 int64
		arg6 float64
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.TopKReserveWithOptionsStub
	fakeReturns := fake.topKReserveWithOptionsReturns
	fake.recordInvocation("TopKReserveWithOptions", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.topKReserveWithOptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TopKReserveWithOptionsCallCount() int {
	fake.topKReserveWithOptionsMutex.RLock()
	defer fake.topKReserveWithOptionsMutex.RUnlock()
	return len(fake.topKReserveWithOptionsArgsForCall)
}

func (fake *FakeCmdable) TopKReserveWithOptionsCalls(stub func(context.Context, string, int64, int64, int64, float64) *redisa.StatusCmd) {
	fake.topKReserveWithOptionsMutex.Lock()
	defer fake.topKReserveWithOptionsMutex.Unlock()
	fake.TopKReserveWithOptionsStub = stub
}

func (fake *FakeCmdable) TopKReserveWithOptionsArgsForCall(i int) (context.Context, string, int64, int64, int64, float64) {
	fake.topKReserveWithOptionsMutex.RLock()
	defer fake.topKReserveWithOptionsMutex.RUnlock()
	argsForCall := fake.topKReserveWithOptionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeCmdable) TopKReserveWithOptionsReturns(result1 *redisa.StatusCmd) {
	fake.topKReserveWithOptionsMutex.Lock()
	defer fake.topKReserveWithOptionsMutex.Unlock()
	fake.TopKReserveWithOptionsStub = nil
	fake.topKReserveWithOptionsReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TopKReserveWithOptionsReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.topKReserveWithOptionsMutex.Lock()
	defer fake.topKReserveWithOptionsMutex.Unlock()
	fake.TopKReserveWithOptionsStub = nil
	if fake.topKReserveWithOptionsReturnsOnCall == nil {
		fake.topKReserveWithOptionsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.topKReserveWithOptionsReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) Touch(arg1 context.Context, arg2 ...string) *redisa.IntCmd {
	fake.touchMutex.Lock()
	ret, specificReturn := fake.touchReturnsOnCall[len(fake.touchArgsForCall)]
	fake.touchArgsForCall = append(fake.touchArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.TouchStub
	fakeReturns := fake.touchReturns
	fake.recordInvocation("Touch", []interface{}{arg1, arg2})
	fake.touchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TouchCallCount() int {
	fake.touchMutex.RLock()
	defer fake.touchMutex.RUnlock()
	return len(fake.touchArgsForCall)
}

func (fake *FakeCmdable) TouchCalls(stub func(context.Context, ...string) *redisa.IntCmd) {
	fake.touchMutex.Lock()
	defer fake.touchMutex.Unlock()
	fake.TouchStub = stub
}

func (fake *FakeCmdable) TouchArgsForCall(i int) (context.Context, []string) {
	fake.touchMutex.RLock()
	defer fake.touchMutex.RUnlock()
	argsForCall := fake.touchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TouchReturns(result1 *redisa.IntCmd) {
	fake.touchMutex.Lock()
	defer fake.touchMutex.Unlock()
	fake.TouchStub = nil
	fake.touchReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TouchReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.touchMutex.Lock()
	defer fake.touchMutex.Unlock()
	fake.TouchStub = nil
	if fake.touchReturnsOnCall == nil {
		fake.touchReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.touchReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) TxPipeline() redisa.Pipeliner {
	fake.txPipelineMutex.Lock()
	ret, specificReturn := fake.txPipelineReturnsOnCall[len(fake.txPipelineArgsForCall)]
	fake.txPipelineArgsForCall = append(fake.txPipelineArgsForCall, struct {
	}{})
	stub := fake.TxPipelineStub
	fakeReturns := fake.txPipelineReturns
	fake.recordInvocation("TxPipeline", []interface{}{})
	fake.txPipelineMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TxPipelineCallCount() int {
	fake.txPipelineMutex.RLock()
	defer fake.txPipelineMutex.RUnlock()
	return len(fake.txPipelineArgsForCall)
}

func (fake *FakeCmdable) TxPipelineCalls(stub func() redisa.Pipeliner) {
	fake.txPipelineMutex.Lock()
	defer fake.txPipelineMutex.Unlock()
	fake.TxPipelineStub = stub
}

func (fake *FakeCmdable) TxPipelineReturns(result1 redisa.Pipeliner) {
	fake.txPipelineMutex.Lock()
	defer fake.txPipelineMutex.Unlock()
	fake.TxPipelineStub = nil
	fake.txPipelineReturns = struct {
		result1 redisa.Pipeliner
	}{result1}
}

func (fake *FakeCmdable) TxPipelineReturnsOnCall(i int, result1 redisa.Pipeliner) {
	fake.txPipelineMutex.Lock()
	defer fake.txPipelineMutex.Unlock()
	fake.TxPipelineStub = nil
	if fake.txPipelineReturnsOnCall == nil {
		fake.txPipelineReturnsOnCall = make(map[int]struct {
			result1 redisa.Pipeliner
		})
	}
	fake.txPipelineReturnsOnCall[i] = struct {
		result1 redisa.Pipeliner
	}{result1}
}

func (fake *FakeCmdable) TxPipelined(arg1 context.Context, arg2 func(redisa.Pipeliner) error) ([]redisa.Cmder, error) {
	fake.txPipelinedMutex.Lock()
	ret, specificReturn := fake.txPipelinedReturnsOnCall[len(fake.txPipelinedArgsForCall)]
	fake.txPipelinedArgsForCall = append(fake.txPipelinedArgsForCall, struct {
		arg1 context.Context
		arg2 func(redisa.Pipeliner) error
	}{arg1, arg2})
	stub := fake.TxPipelinedStub
	fakeReturns := fake.txPipelinedReturns
	fake.recordInvocation("TxPipelined", []interface{}{arg1, arg2})
	fake.txPipelinedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCmdable) TxPipelinedCallCount() int {
	fake.txPipelinedMutex.RLock()
	defer fake.txPipelinedMutex.RUnlock()
	return len(fake.txPipelinedArgsForCall)
}

func (fake *FakeCmdable) TxPipelinedCalls(stub func(context.Context, func(redisa.Pipeliner) error) ([]redisa.Cmder, error)) {
	fake.txPipelinedMutex.Lock()
	defer fake.txPipelinedMutex.Unlock()
	fake.TxPipelinedStub = stub
}

func (fake *FakeCmdable) TxPipelinedArgsForCall(i int) (context.Context, func(redisa.Pipeliner) error) {
	fake.txPipelinedMutex.RLock()
	defer fake.txPipelinedMutex.RUnlock()
	argsForCall := fake.txPipelinedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TxPipelinedReturns(result1 []redisa.Cmder, result2 error) {
	fake.txPipelinedMutex.Lock()
	defer fake.txPipelinedMutex.Unlock()
	fake.TxPipelinedStub = nil
	fake.txPipelinedReturns = struct {
		result1 []redisa.Cmder
		result2 error
	}{result1, result2}
}

func (fake *FakeCmdable) TxPipelinedReturnsOnCall(i int, result1 []redisa.Cmder, result2 error) {
	fake.txPipelinedMutex.Lock()
	defer fake.txPipelinedMutex.Unlock()
	fake.TxPipelinedStub = nil
	if fake.txPipelinedReturnsOnCall == nil {
		fake.txPipelinedReturnsOnCall = make(map[int]struct {
			result1 []redisa.Cmder
			result2 error
		})
	}
	fake.txPipelinedReturnsOnCall[i] = struct {
		result1 []redisa.Cmder
		result2 error
	}{result1, result2}
}

func (fake *FakeCmdable) Type(arg1 context.Context, arg2 string) *redisa.StatusCmd {
	fake.typeMutex.Lock()
	ret, specificReturn := fake.typeReturnsOnCall[len(fake.typeArgsForCall)]
	fake.typeArgsForCall = append(fake.typeArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TypeStub
	fakeReturns := fake.typeReturns
	fake.recordInvocation("Type", []interface{}{arg1, arg2})
	fake.typeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) TypeCallCount() int {
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	return len(fake.typeArgsForCall)
}

func (fake *FakeCmdable) TypeCalls(stub func(context.Context, string) *redisa.StatusCmd) {
	fake.typeMutex.Lock()
	defer fake.typeMutex.Unlock()
	fake.TypeStub = stub
}

func (fake *FakeCmdable) TypeArgsForCall(i int) (context.Context, string) {
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	argsForCall := fake.typeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) TypeReturns(result1 *redisa.StatusCmd) {
	fake.typeMutex.Lock()
	defer fake.typeMutex.Unlock()
	fake.TypeStub = nil
	fake.typeReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) TypeReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.typeMutex.Lock()
	defer fake.typeMutex.Unlock()
	fake.TypeStub = nil
	if fake.typeReturnsOnCall == nil {
		fake.typeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.typeReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) Unlink(arg1 context.Context, arg2 ...string) *redisa.IntCmd {
	fake.unlinkMutex.Lock()
	ret, specificReturn := fake.unlinkReturnsOnCall[len(fake.unlinkArgsForCall)]
	fake.unlinkArgsForCall = append(fake.unlinkArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.UnlinkStub
	fakeReturns := fake.unlinkReturns
	fake.recordInvocation("Unlink", []interface{}{arg1, arg2})
	fake.unlinkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) UnlinkCallCount() int {
	fake.unlinkMutex.RLock()
	defer fake.unlinkMutex.RUnlock()
	return len(fake.unlinkArgsForCall)
}

func (fake *FakeCmdable) UnlinkCalls(stub func(context.Context, ...string) *redisa.IntCmd) {
	fake.unlinkMutex.Lock()
	defer fake.unlinkMutex.Unlock()
	fake.UnlinkStub = stub
}

func (fake *FakeCmdable) UnlinkArgsForCall(i int) (context.Context, []string) {
	fake.unlinkMutex.RLock()
	defer fake.unlinkMutex.RUnlock()
	argsForCall := fake.unlinkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) UnlinkReturns(result1 *redisa.IntCmd) {
	fake.unlinkMutex.Lock()
	defer fake.unlinkMutex.Unlock()
	fake.UnlinkStub = nil
	fake.unlinkReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) UnlinkReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.unlinkMutex.Lock()
	defer fake.unlinkMutex.Unlock()
	fake.UnlinkStub = nil
	if fake.unlinkReturnsOnCall == nil {
		fake.unlinkReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.unlinkReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XAck(arg1 context.Context, arg2 string, arg3 string, arg4 ...string) *redisa.IntCmd {
	fake.xAckMutex.Lock()
	ret, specificReturn := fake.xAckReturnsOnCall[len(fake.xAckArgsForCall)]
	fake.xAckArgsForCall = append(fake.xAckArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	stub := fake.XAckStub
	fakeReturns := fake.xAckReturns
	fake.recordInvocation("XAck", []interface{}{arg1, arg2, arg3, arg4})
	fake.xAckMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XAckCallCount() int {
	fake.xAckMutex.RLock()
	defer fake.xAckMutex.RUnlock()
	return len(fake.xAckArgsForCall)
}

func (fake *FakeCmdable) XAckCalls(stub func(context.Context, string, string, ...string) *redisa.IntCmd) {
	fake.xAckMutex.Lock()
	defer fake.xAckMutex.Unlock()
	fake.XAckStub = stub
}

func (fake *FakeCmdable) XAckArgsForCall(i int) (context.Context, string, string, []string) {
	fake.xAckMutex.RLock()
	defer fake.xAckMutex.RUnlock()
	argsForCall := fake.xAckArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) XAckReturns(result1 *redisa.IntCmd) {
	fake.xAckMutex.Lock()
	defer fake.xAckMutex.Unlock()
	fake.XAckStub = nil
	fake.xAckReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XAckReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.xAckMutex.Lock()
	defer fake.xAckMutex.Unlock()
	fake.XAckStub = nil
	if fake.xAckReturnsOnCall == nil {
		fake.xAckReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.xAckReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XAdd(arg1 context.Context, arg2 *redisa.XAddArgs) *redisa.StringCmd {
	fake.xAddMutex.Lock()
	ret, specificReturn := fake.xAddReturnsOnCall[len(fake.xAddArgsForCall)]
	fake.xAddArgsForCall = append(fake.xAddArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.XAddArgs
	}{arg1, arg2})
	stub := fake.XAddStub
	fakeReturns := fake.xAddReturns
	fake.recordInvocation("XAdd", []interface{}{arg1, arg2})
	fake.xAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XAddCallCount() int {
	fake.xAddMutex.RLock()
	defer fake.xAddMutex.RUnlock()
	return len(fake.xAddArgsForCall)
}

func (fake *FakeCmdable) XAddCalls(stub func(context.Context, *redisa.XAddArgs) *redisa.StringCmd) {
	fake.xAddMutex.Lock()
	defer fake.xAddMutex.Unlock()
	fake.XAddStub = stub
}

func (fake *FakeCmdable) XAddArgsForCall(i int) (context.Context, *redisa.XAddArgs) {
	fake.xAddMutex.RLock()
	defer fake.xAddMutex.RUnlock()
	argsForCall := fake.xAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) XAddReturns(result1 *redisa.StringCmd) {
	fake.xAddMutex.Lock()
	defer fake.xAddMutex.Unlock()
	fake.XAddStub = nil
	fake.xAddReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) XAddReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.xAddMutex.Lock()
	defer fake.xAddMutex.Unlock()
	fake.XAddStub = nil
	if fake.xAddReturnsOnCall == nil {
		fake.xAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.xAddReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeCmdable) XAutoClaim(arg1 context.Context, arg2 *redisa.XAutoClaimArgs) *redisa.XAutoClaimCmd {
	fake.xAutoClaimMutex.Lock()
	ret, specificReturn := fake.xAutoClaimReturnsOnCall[len(fake.xAutoClaimArgsForCall)]
	fake.xAutoClaimArgsForCall = append(fake.xAutoClaimArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.XAutoClaimArgs
	}{arg1, arg2})
	stub := fake.XAutoClaimStub
	fakeReturns := fake.xAutoClaimReturns
	fake.recordInvocation("XAutoClaim", []interface{}{arg1, arg2})
	fake.xAutoClaimMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XAutoClaimCallCount() int {
	fake.xAutoClaimMutex.RLock()
	defer fake.xAutoClaimMutex.RUnlock()
	return len(fake.xAutoClaimArgsForCall)
}

func (fake *FakeCmdable) XAutoClaimCalls(stub func(context.Context, *redisa.XAutoClaimArgs) *redisa.XAutoClaimCmd) {
	fake.xAutoClaimMutex.Lock()
	defer fake.xAutoClaimMutex.Unlock()
	fake.XAutoClaimStub = stub
}

func (fake *FakeCmdable) XAutoClaimArgsForCall(i int) (context.Context, *redisa.XAutoClaimArgs) {
	fake.xAutoClaimMutex.RLock()
	defer fake.xAutoClaimMutex.RUnlock()
	argsForCall := fake.xAutoClaimArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) XAutoClaimReturns(result1 *redisa.XAutoClaimCmd) {
	fake.xAutoClaimMutex.Lock()
	defer fake.xAutoClaimMutex.Unlock()
	fake.XAutoClaimStub = nil
	fake.xAutoClaimReturns = struct {
		result1 *redisa.XAutoClaimCmd
	}{result1}
}

func (fake *FakeCmdable) XAutoClaimReturnsOnCall(i int, result1 *redisa.XAutoClaimCmd) {
	fake.xAutoClaimMutex.Lock()
	defer fake.xAutoClaimMutex.Unlock()
	fake.XAutoClaimStub = nil
	if fake.xAutoClaimReturnsOnCall == nil {
		fake.xAutoClaimReturnsOnCall = make(map[int]struct {
			result1 *redisa.XAutoClaimCmd
		})
	}
	fake.xAutoClaimReturnsOnCall[i] = struct {
		result1 *redisa.XAutoClaimCmd
	}{result1}
}

func (fake *FakeCmdable) XAutoClaimJustID(arg1 context.Context, arg2 *redisa.XAutoClaimArgs) *redisa.XAutoClaimJustIDCmd {
	fake.xAutoClaimJustIDMutex.Lock()
	ret, specificReturn := fake.xAutoClaimJustIDReturnsOnCall[len(fake.xAutoClaimJustIDArgsForCall)]
	fake.xAutoClaimJustIDArgsForCall = append(fake.xAutoClaimJustIDArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.XAutoClaimArgs
	}{arg1, arg2})
	stub := fake.XAutoClaimJustIDStub
	fakeReturns := fake.xAutoClaimJustIDReturns
	fake.recordInvocation("XAutoClaimJustID", []interface{}{arg1, arg2})
	fake.xAutoClaimJustIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XAutoClaimJustIDCallCount() int {
	fake.xAutoClaimJustIDMutex.RLock()
	defer fake.xAutoClaimJustIDMutex.RUnlock()
	return len(fake.xAutoClaimJustIDArgsForCall)
}

func (fake *FakeCmdable) XAutoClaimJustIDCalls(stub func(context.Context, *redisa.XAutoClaimArgs) *redisa.XAutoClaimJustIDCmd) {
	fake.xAutoClaimJustIDMutex.Lock()
	defer fake.xAutoClaimJustIDMutex.Unlock()
	fake.XAutoClaimJustIDStub = stub
}

func (fake *FakeCmdable) XAutoClaimJustIDArgsForCall(i int) (context.Context, *redisa.XAutoClaimArgs) {
	fake.xAutoClaimJustIDMutex.RLock()
	defer fake.xAutoClaimJustIDMutex.RUnlock()
	argsForCall := fake.xAutoClaimJustIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) XAutoClaimJustIDReturns(result1 *redisa.XAutoClaimJustIDCmd) {
	fake.xAutoClaimJustIDMutex.Lock()
	defer fake.xAutoClaimJustIDMutex.Unlock()
	fake.XAutoClaimJustIDStub = nil
	fake.xAutoClaimJustIDReturns = struct {
		result1 *redisa.XAutoClaimJustIDCmd
	}{result1}
}

func (fake *FakeCmdable) XAutoClaimJustIDReturnsOnCall(i int, result1 *redisa.XAutoClaimJustIDCmd) {
	fake.xAutoClaimJustIDMutex.Lock()
	defer fake.xAutoClaimJustIDMutex.Unlock()
	fake.XAutoClaimJustIDStub = nil
	if fake.xAutoClaimJustIDReturnsOnCall == nil {
		fake.xAutoClaimJustIDReturnsOnCall = make(map[int]struct {
			result1 *redisa.XAutoClaimJustIDCmd
		})
	}
	fake.xAutoClaimJustIDReturnsOnCall[i] = struct {
		result1 *redisa.XAutoClaimJustIDCmd
	}{result1}
}

func (fake *FakeCmdable) XClaim(arg1 context.Context, arg2 *redisa.XClaimArgs) *redisa.XMessageSliceCmd {
	fake.xClaimMutex.Lock()
	ret, specificReturn := fake.xClaimReturnsOnCall[len(fake.xClaimArgsForCall)]
	fake.xClaimArgsForCall = append(fake.xClaimArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.XClaimArgs
	}{arg1, arg2})
	stub := fake.XClaimStub
	fakeReturns := fake.xClaimReturns
	fake.recordInvocation("XClaim", []interface{}{arg1, arg2})
	fake.xClaimMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XClaimCallCount() int {
	fake.xClaimMutex.RLock()
	defer fake.xClaimMutex.RUnlock()
	return len(fake.xClaimArgsForCall)
}

func (fake *FakeCmdable) XClaimCalls(stub func(context.Context, *redisa.XClaimArgs) *redisa.XMessageSliceCmd) {
	fake.xClaimMutex.Lock()
	defer fake.xClaimMutex.Unlock()
	fake.XClaimStub = stub
}

func (fake *FakeCmdable) XClaimArgsForCall(i int) (context.Context, *redisa.XClaimArgs) {
	fake.xClaimMutex.RLock()
	defer fake.xClaimMutex.RUnlock()
	argsForCall := fake.xClaimArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) XClaimReturns(result1 *redisa.XMessageSliceCmd) {
	fake.xClaimMutex.Lock()
	defer fake.xClaimMutex.Unlock()
	fake.XClaimStub = nil
	fake.xClaimReturns = struct {
		result1 *redisa.XMessageSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XClaimReturnsOnCall(i int, result1 *redisa.XMessageSliceCmd) {
	fake.xClaimMutex.Lock()
	defer fake.xClaimMutex.Unlock()
	fake.XClaimStub = nil
	if fake.xClaimReturnsOnCall == nil {
		fake.xClaimReturnsOnCall = make(map[int]struct {
			result1 *redisa.XMessageSliceCmd
		})
	}
	fake.xClaimReturnsOnCall[i] = struct {
		result1 *redisa.XMessageSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XClaimJustID(arg1 context.Context, arg2 *redisa.XClaimArgs) *redisa.StringSliceCmd {
	fake.xClaimJustIDMutex.Lock()
	ret, specificReturn := fake.xClaimJustIDReturnsOnCall[len(fake.xClaimJustIDArgsForCall)]
	fake.xClaimJustIDArgsForCall = append(fake.xClaimJustIDArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.XClaimArgs
	}{arg1, arg2})
	stub := fake.XClaimJustIDStub
	fakeReturns := fake.xClaimJustIDReturns
	fake.recordInvocation("XClaimJustID", []interface{}{arg1, arg2})
	fake.xClaimJustIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XClaimJustIDCallCount() int {
	fake.xClaimJustIDMutex.RLock()
	defer fake.xClaimJustIDMutex.RUnlock()
	return len(fake.xClaimJustIDArgsForCall)
}

func (fake *FakeCmdable) XClaimJustIDCalls(stub func(context.Context, *redisa.XClaimArgs) *redisa.StringSliceCmd) {
	fake.xClaimJustIDMutex.Lock()
	defer fake.xClaimJustIDMutex.Unlock()
	fake.XClaimJustIDStub = stub
}

func (fake *FakeCmdable) XClaimJustIDArgsForCall(i int) (context.Context, *redisa.XClaimArgs) {
	fake.xClaimJustIDMutex.RLock()
	defer fake.xClaimJustIDMutex.RUnlock()
	argsForCall := fake.xClaimJustIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) XClaimJustIDReturns(result1 *redisa.StringSliceCmd) {
	fake.xClaimJustIDMutex.Lock()
	defer fake.xClaimJustIDMutex.Unlock()
	fake.XClaimJustIDStub = nil
	fake.xClaimJustIDReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XClaimJustIDReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.xClaimJustIDMutex.Lock()
	defer fake.xClaimJustIDMutex.Unlock()
	fake.XClaimJustIDStub = nil
	if fake.xClaimJustIDReturnsOnCall == nil {
		fake.xClaimJustIDReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.xClaimJustIDReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XDel(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntCmd {
	fake.xDelMutex.Lock()
	ret, specificReturn := fake.xDelReturnsOnCall[len(fake.xDelArgsForCall)]
	fake.xDelArgsForCall = append(fake.xDelArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.XDelStub
	fakeReturns := fake.xDelReturns
	fake.recordInvocation("XDel", []interface{}{arg1, arg2, arg3})
	fake.xDelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XDelCallCount() int {
	fake.xDelMutex.RLock()
	defer fake.xDelMutex.RUnlock()
	return len(fake.xDelArgsForCall)
}

func (fake *FakeCmdable) XDelCalls(stub func(context.Context, string, ...string) *redisa.IntCmd) {
	fake.xDelMutex.Lock()
	defer fake.xDelMutex.Unlock()
	fake.XDelStub = stub
}

func (fake *FakeCmdable) XDelArgsForCall(i int) (context.Context, string, []string) {
	fake.xDelMutex.RLock()
	defer fake.xDelMutex.RUnlock()
	argsForCall := fake.xDelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) XDelReturns(result1 *redisa.IntCmd) {
	fake.xDelMutex.Lock()
	defer fake.xDelMutex.Unlock()
	fake.XDelStub = nil
	fake.xDelReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XDelReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.xDelMutex.Lock()
	defer fake.xDelMutex.Unlock()
	fake.XDelStub = nil
	if fake.xDelReturnsOnCall == nil {
		fake.xDelReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.xDelReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XGroupCreate(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.StatusCmd {
	fake.xGroupCreateMutex.Lock()
	ret, specificReturn := fake.xGroupCreateReturnsOnCall[len(fake.xGroupCreateArgsForCall)]
	fake.xGroupCreateArgsForCall = append(fake.xGroupCreateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.XGroupCreateStub
	fakeReturns := fake.xGroupCreateReturns
	fake.recordInvocation("XGroupCreate", []interface{}{arg1, arg2, arg3, arg4})
	fake.xGroupCreateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XGroupCreateCallCount() int {
	fake.xGroupCreateMutex.RLock()
	defer fake.xGroupCreateMutex.RUnlock()
	return len(fake.xGroupCreateArgsForCall)
}

func (fake *FakeCmdable) XGroupCreateCalls(stub func(context.Context, string, string, string) *redisa.StatusCmd) {
	fake.xGroupCreateMutex.Lock()
	defer fake.xGroupCreateMutex.Unlock()
	fake.XGroupCreateStub = stub
}

func (fake *FakeCmdable) XGroupCreateArgsForCall(i int) (context.Context, string, string, string) {
	fake.xGroupCreateMutex.RLock()
	defer fake.xGroupCreateMutex.RUnlock()
	argsForCall := fake.xGroupCreateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) XGroupCreateReturns(result1 *redisa.StatusCmd) {
	fake.xGroupCreateMutex.Lock()
	defer fake.xGroupCreateMutex.Unlock()
	fake.XGroupCreateStub = nil
	fake.xGroupCreateReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) XGroupCreateReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.xGroupCreateMutex.Lock()
	defer fake.xGroupCreateMutex.Unlock()
	fake.XGroupCreateStub = nil
	if fake.xGroupCreateReturnsOnCall == nil {
		fake.xGroupCreateReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.xGroupCreateReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) XGroupCreateConsumer(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.IntCmd {
	fake.xGroupCreateConsumerMutex.Lock()
	ret, specificReturn := fake.xGroupCreateConsumerReturnsOnCall[len(fake.xGroupCreateConsumerArgsForCall)]
	fake.xGroupCreateConsumerArgsForCall = append(fake.xGroupCreateConsumerArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.XGroupCreateConsumerStub
	fakeReturns := fake.xGroupCreateConsumerReturns
	fake.recordInvocation("XGroupCreateConsumer", []interface{}{arg1, arg2, arg3, arg4})
	fake.xGroupCreateConsumerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XGroupCreateConsumerCallCount() int {
	fake.xGroupCreateConsumerMutex.RLock()
	defer fake.xGroupCreateConsumerMutex.RUnlock()
	return len(fake.xGroupCreateConsumerArgsForCall)
}

func (fake *FakeCmdable) XGroupCreateConsumerCalls(stub func(context.Context, string, string, string) *redisa.IntCmd) {
	fake.xGroupCreateConsumerMutex.Lock()
	defer fake.xGroupCreateConsumerMutex.Unlock()
	fake.XGroupCreateConsumerStub = stub
}

func (fake *FakeCmdable) XGroupCreateConsumerArgsForCall(i int) (context.Context, string, string, string) {
	fake.xGroupCreateConsumerMutex.RLock()
	defer fake.xGroupCreateConsumerMutex.RUnlock()
	argsForCall := fake.xGroupCreateConsumerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) XGroupCreateConsumerReturns(result1 *redisa.IntCmd) {
	fake.xGroupCreateConsumerMutex.Lock()
	defer fake.xGroupCreateConsumerMutex.Unlock()
	fake.XGroupCreateConsumerStub = nil
	fake.xGroupCreateConsumerReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XGroupCreateConsumerReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.xGroupCreateConsumerMutex.Lock()
	defer fake.xGroupCreateConsumerMutex.Unlock()
	fake.XGroupCreateConsumerStub = nil
	if fake.xGroupCreateConsumerReturnsOnCall == nil {
		fake.xGroupCreateConsumerReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.xGroupCreateConsumerReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XGroupCreateMkStream(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.StatusCmd {
	fake.xGroupCreateMkStreamMutex.Lock()
	ret, specificReturn := fake.xGroupCreateMkStreamReturnsOnCall[len(fake.xGroupCreateMkStreamArgsForCall)]
	fake.xGroupCreateMkStreamArgsForCall = append(fake.xGroupCreateMkStreamArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.XGroupCreateMkStreamStub
	fakeReturns := fake.xGroupCreateMkStreamReturns
	fake.recordInvocation("XGroupCreateMkStream", []interface{}{arg1, arg2, arg3, arg4})
	fake.xGroupCreateMkStreamMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XGroupCreateMkStreamCallCount() int {
	fake.xGroupCreateMkStreamMutex.RLock()
	defer fake.xGroupCreateMkStreamMutex.RUnlock()
	return len(fake.xGroupCreateMkStreamArgsForCall)
}

func (fake *FakeCmdable) XGroupCreateMkStreamCalls(stub func(context.Context, string, string, string) *redisa.StatusCmd) {
	fake.xGroupCreateMkStreamMutex.Lock()
	defer fake.xGroupCreateMkStreamMutex.Unlock()
	fake.XGroupCreateMkStreamStub = stub
}

func (fake *FakeCmdable) XGroupCreateMkStreamArgsForCall(i int) (context.Context, string, string, string) {
	fake.xGroupCreateMkStreamMutex.RLock()
	defer fake.xGroupCreateMkStreamMutex.RUnlock()
	argsForCall := fake.xGroupCreateMkStreamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) XGroupCreateMkStreamReturns(result1 *redisa.StatusCmd) {
	fake.xGroupCreateMkStreamMutex.Lock()
	defer fake.xGroupCreateMkStreamMutex.Unlock()
	fake.XGroupCreateMkStreamStub = nil
	fake.xGroupCreateMkStreamReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) XGroupCreateMkStreamReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.xGroupCreateMkStreamMutex.Lock()
	defer fake.xGroupCreateMkStreamMutex.Unlock()
	fake.XGroupCreateMkStreamStub = nil
	if fake.xGroupCreateMkStreamReturnsOnCall == nil {
		fake.xGroupCreateMkStreamReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.xGroupCreateMkStreamReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) XGroupDelConsumer(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.IntCmd {
	fake.xGroupDelConsumerMutex.Lock()
	ret, specificReturn := fake.xGroupDelConsumerReturnsOnCall[len(fake.xGroupDelConsumerArgsForCall)]
	fake.xGroupDelConsumerArgsForCall = append(fake.xGroupDelConsumerArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.XGroupDelConsumerStub
	fakeReturns := fake.xGroupDelConsumerReturns
	fake.recordInvocation("XGroupDelConsumer", []interface{}{arg1, arg2, arg3, arg4})
	fake.xGroupDelConsumerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XGroupDelConsumerCallCount() int {
	fake.xGroupDelConsumerMutex.RLock()
	defer fake.xGroupDelConsumerMutex.RUnlock()
	return len(fake.xGroupDelConsumerArgsForCall)
}

func (fake *FakeCmdable) XGroupDelConsumerCalls(stub func(context.Context, string, string, string) *redisa.IntCmd) {
	fake.xGroupDelConsumerMutex.Lock()
	defer fake.xGroupDelConsumerMutex.Unlock()
	fake.XGroupDelConsumerStub = stub
}

func (fake *FakeCmdable) XGroupDelConsumerArgsForCall(i int) (context.Context, string, string, string) {
	fake.xGroupDelConsumerMutex.RLock()
	defer fake.xGroupDelConsumerMutex.RUnlock()
	argsForCall := fake.xGroupDelConsumerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) XGroupDelConsumerReturns(result1 *redisa.IntCmd) {
	fake.xGroupDelConsumerMutex.Lock()
	defer fake.xGroupDelConsumerMutex.Unlock()
	fake.XGroupDelConsumerStub = nil
	fake.xGroupDelConsumerReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XGroupDelConsumerReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.xGroupDelConsumerMutex.Lock()
	defer fake.xGroupDelConsumerMutex.Unlock()
	fake.XGroupDelConsumerStub = nil
	if fake.xGroupDelConsumerReturnsOnCall == nil {
		fake.xGroupDelConsumerReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.xGroupDelConsumerReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XGroupDestroy(arg1 context.Context, arg2 string, arg3 string) *redisa.IntCmd {
	fake.xGroupDestroyMutex.Lock()
	ret, specificReturn := fake.xGroupDestroyReturnsOnCall[len(fake.xGroupDestroyArgsForCall)]
	fake.xGroupDestroyArgsForCall = append(fake.xGroupDestroyArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.XGroupDestroyStub
	fakeReturns := fake.xGroupDestroyReturns
	fake.recordInvocation("XGroupDestroy", []interface{}{arg1, arg2, arg3})
	fake.xGroupDestroyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XGroupDestroyCallCount() int {
	fake.xGroupDestroyMutex.RLock()
	defer fake.xGroupDestroyMutex.RUnlock()
	return len(fake.xGroupDestroyArgsForCall)
}

func (fake *FakeCmdable) XGroupDestroyCalls(stub func(context.Context, string, string) *redisa.IntCmd) {
	fake.xGroupDestroyMutex.Lock()
	defer fake.xGroupDestroyMutex.Unlock()
	fake.XGroupDestroyStub = stub
}

func (fake *FakeCmdable) XGroupDestroyArgsForCall(i int) (context.Context, string, string) {
	fake.xGroupDestroyMutex.RLock()
	defer fake.xGroupDestroyMutex.RUnlock()
	argsForCall := fake.xGroupDestroyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) XGroupDestroyReturns(result1 *redisa.IntCmd) {
	fake.xGroupDestroyMutex.Lock()
	defer fake.xGroupDestroyMutex.Unlock()
	fake.XGroupDestroyStub = nil
	fake.xGroupDestroyReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XGroupDestroyReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.xGroupDestroyMutex.Lock()
	defer fake.xGroupDestroyMutex.Unlock()
	fake.XGroupDestroyStub = nil
	if fake.xGroupDestroyReturnsOnCall == nil {
		fake.xGroupDestroyReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.xGroupDestroyReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XGroupSetID(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.StatusCmd {
	fake.xGroupSetIDMutex.Lock()
	ret, specificReturn := fake.xGroupSetIDReturnsOnCall[len(fake.xGroupSetIDArgsForCall)]
	fake.xGroupSetIDArgsForCall = append(fake.xGroupSetIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.XGroupSetIDStub
	fakeReturns := fake.xGroupSetIDReturns
	fake.recordInvocation("XGroupSetID", []interface{}{arg1, arg2, arg3, arg4})
	fake.xGroupSetIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XGroupSetIDCallCount() int {
	fake.xGroupSetIDMutex.RLock()
	defer fake.xGroupSetIDMutex.RUnlock()
	return len(fake.xGroupSetIDArgsForCall)
}

func (fake *FakeCmdable) XGroupSetIDCalls(stub func(context.Context, string, string, string) *redisa.StatusCmd) {
	fake.xGroupSetIDMutex.Lock()
	defer fake.xGroupSetIDMutex.Unlock()
	fake.XGroupSetIDStub = stub
}

func (fake *FakeCmdable) XGroupSetIDArgsForCall(i int) (context.Context, string, string, string) {
	fake.xGroupSetIDMutex.RLock()
	defer fake.xGroupSetIDMutex.RUnlock()
	argsForCall := fake.xGroupSetIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) XGroupSetIDReturns(result1 *redisa.StatusCmd) {
	fake.xGroupSetIDMutex.Lock()
	defer fake.xGroupSetIDMutex.Unlock()
	fake.XGroupSetIDStub = nil
	fake.xGroupSetIDReturns = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) XGroupSetIDReturnsOnCall(i int, result1 *redisa.StatusCmd) {
	fake.xGroupSetIDMutex.Lock()
	defer fake.xGroupSetIDMutex.Unlock()
	fake.XGroupSetIDStub = nil
	if fake.xGroupSetIDReturnsOnCall == nil {
		fake.xGroupSetIDReturnsOnCall = make(map[int]struct {
			result1 *redisa.StatusCmd
		})
	}
	fake.xGroupSetIDReturnsOnCall[i] = struct {
		result1 *redisa.StatusCmd
	}{result1}
}

func (fake *FakeCmdable) XInfoConsumers(arg1 context.Context, arg2 string, arg3 string) *redisa.XInfoConsumersCmd {
	fake.xInfoConsumersMutex.Lock()
	ret, specificReturn := fake.xInfoConsumersReturnsOnCall[len(fake.xInfoConsumersArgsForCall)]
	fake.xInfoConsumersArgsForCall = append(fake.xInfoConsumersArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.XInfoConsumersStub
	fakeReturns := fake.xInfoConsumersReturns
	fake.recordInvocation("XInfoConsumers", []interface{}{arg1, arg2, arg3})
	fake.xInfoConsumersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XInfoConsumersCallCount() int {
	fake.xInfoConsumersMutex.RLock()
	defer fake.xInfoConsumersMutex.RUnlock()
	return len(fake.xInfoConsumersArgsForCall)
}

func (fake *FakeCmdable) XInfoConsumersCalls(stub func(context.Context, string, string) *redisa.XInfoConsumersCmd) {
	fake.xInfoConsumersMutex.Lock()
	defer fake.xInfoConsumersMutex.Unlock()
	fake.XInfoConsumersStub = stub
}

func (fake *FakeCmdable) XInfoConsumersArgsForCall(i int) (context.Context, string, string) {
	fake.xInfoConsumersMutex.RLock()
	defer fake.xInfoConsumersMutex.RUnlock()
	argsForCall := fake.xInfoConsumersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) XInfoConsumersReturns(result1 *redisa.XInfoConsumersCmd) {
	fake.xInfoConsumersMutex.Lock()
	defer fake.xInfoConsumersMutex.Unlock()
	fake.XInfoConsumersStub = nil
	fake.xInfoConsumersReturns = struct {
		result1 *redisa.XInfoConsumersCmd
	}{result1}
}

func (fake *FakeCmdable) XInfoConsumersReturnsOnCall(i int, result1 *redisa.XInfoConsumersCmd) {
	fake.xInfoConsumersMutex.Lock()
	defer fake.xInfoConsumersMutex.Unlock()
	fake.XInfoConsumersStub = nil
	if fake.xInfoConsumersReturnsOnCall == nil {
		fake.xInfoConsumersReturnsOnCall = make(map[int]struct {
			result1 *redisa.XInfoConsumersCmd
		})
	}
	fake.xInfoConsumersReturnsOnCall[i] = struct {
		result1 *redisa.XInfoConsumersCmd
	}{result1}
}

func (fake *FakeCmdable) XInfoGroups(arg1 context.Context, arg2 string) *redisa.XInfoGroupsCmd {
	fake.xInfoGroupsMutex.Lock()
	ret, specificReturn := fake.xInfoGroupsReturnsOnCall[len(fake.xInfoGroupsArgsForCall)]
	fake.xInfoGroupsArgsForCall = append(fake.xInfoGroupsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.XInfoGroupsStub
	fakeReturns := fake.xInfoGroupsReturns
	fake.recordInvocation("XInfoGroups", []interface{}{arg1, arg2})
	fake.xInfoGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XInfoGroupsCallCount() int {
	fake.xInfoGroupsMutex.RLock()
	defer fake.xInfoGroupsMutex.RUnlock()
	return len(fake.xInfoGroupsArgsForCall)
}

func (fake *FakeCmdable) XInfoGroupsCalls(stub func(context.Context, string) *redisa.XInfoGroupsCmd) {
	fake.xInfoGroupsMutex.Lock()
	defer fake.xInfoGroupsMutex.Unlock()
	fake.XInfoGroupsStub = stub
}

func (fake *FakeCmdable) XInfoGroupsArgsForCall(i int) (context.Context, string) {
	fake.xInfoGroupsMutex.RLock()
	defer fake.xInfoGroupsMutex.RUnlock()
	argsForCall := fake.xInfoGroupsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) XInfoGroupsReturns(result1 *redisa.XInfoGroupsCmd) {
	fake.xInfoGroupsMutex.Lock()
	defer fake.xInfoGroupsMutex.Unlock()
	fake.XInfoGroupsStub = nil
	fake.xInfoGroupsReturns = struct {
		result1 *redisa.XInfoGroupsCmd
	}{result1}
}

func (fake *FakeCmdable) XInfoGroupsReturnsOnCall(i int, result1 *redisa.XInfoGroupsCmd) {
	fake.xInfoGroupsMutex.Lock()
	defer fake.xInfoGroupsMutex.Unlock()
	fake.XInfoGroupsStub = nil
	if fake.xInfoGroupsReturnsOnCall == nil {
		fake.xInfoGroupsReturnsOnCall = make(map[int]struct {
			result1 *redisa.XInfoGroupsCmd
		})
	}
	fake.xInfoGroupsReturnsOnCall[i] = struct {
		result1 *redisa.XInfoGroupsCmd
	}{result1}
}

func (fake *FakeCmdable) XInfoStream(arg1 context.Context, arg2 string) *redisa.XInfoStreamCmd {
	fake.xInfoStreamMutex.Lock()
	ret, specificReturn := fake.xInfoStreamReturnsOnCall[len(fake.xInfoStreamArgsForCall)]
	fake.xInfoStreamArgsForCall = append(fake.xInfoStreamArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.XInfoStreamStub
	fakeReturns := fake.xInfoStreamReturns
	fake.recordInvocation("XInfoStream", []interface{}{arg1, arg2})
	fake.xInfoStreamMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XInfoStreamCallCount() int {
	fake.xInfoStreamMutex.RLock()
	defer fake.xInfoStreamMutex.RUnlock()
	return len(fake.xInfoStreamArgsForCall)
}

func (fake *FakeCmdable) XInfoStreamCalls(stub func(context.Context, string) *redisa.XInfoStreamCmd) {
	fake.xInfoStreamMutex.Lock()
	defer fake.xInfoStreamMutex.Unlock()
	fake.XInfoStreamStub = stub
}

func (fake *FakeCmdable) XInfoStreamArgsForCall(i int) (context.Context, string) {
	fake.xInfoStreamMutex.RLock()
	defer fake.xInfoStreamMutex.RUnlock()
	argsForCall := fake.xInfoStreamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) XInfoStreamReturns(result1 *redisa.XInfoStreamCmd) {
	fake.xInfoStreamMutex.Lock()
	defer fake.xInfoStreamMutex.Unlock()
	fake.XInfoStreamStub = nil
	fake.xInfoStreamReturns = struct {
		result1 *redisa.XInfoStreamCmd
	}{result1}
}

func (fake *FakeCmdable) XInfoStreamReturnsOnCall(i int, result1 *redisa.XInfoStreamCmd) {
	fake.xInfoStreamMutex.Lock()
	defer fake.xInfoStreamMutex.Unlock()
	fake.XInfoStreamStub = nil
	if fake.xInfoStreamReturnsOnCall == nil {
		fake.xInfoStreamReturnsOnCall = make(map[int]struct {
			result1 *redisa.XInfoStreamCmd
		})
	}
	fake.xInfoStreamReturnsOnCall[i] = struct {
		result1 *redisa.XInfoStreamCmd
	}{result1}
}

func (fake *FakeCmdable) XInfoStreamFull(arg1 context.Context, arg2 string, arg3 int) *redisa.XInfoStreamFullCmd {
	fake.xInfoStreamFullMutex.Lock()
	ret, specificReturn := fake.xInfoStreamFullReturnsOnCall[len(fake.xInfoStreamFullArgsForCall)]
	fake.xInfoStreamFullArgsForCall = append(fake.xInfoStreamFullArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.XInfoStreamFullStub
	fakeReturns := fake.xInfoStreamFullReturns
	fake.recordInvocation("XInfoStreamFull", []interface{}{arg1, arg2, arg3})
	fake.xInfoStreamFullMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XInfoStreamFullCallCount() int {
	fake.xInfoStreamFullMutex.RLock()
	defer fake.xInfoStreamFullMutex.RUnlock()
	return len(fake.xInfoStreamFullArgsForCall)
}

func (fake *FakeCmdable) XInfoStreamFullCalls(stub func(context.Context, string, int) *redisa.XInfoStreamFullCmd) {
	fake.xInfoStreamFullMutex.Lock()
	defer fake.xInfoStreamFullMutex.Unlock()
	fake.XInfoStreamFullStub = stub
}

func (fake *FakeCmdable) XInfoStreamFullArgsForCall(i int) (context.Context, string, int) {
	fake.xInfoStreamFullMutex.RLock()
	defer fake.xInfoStreamFullMutex.RUnlock()
	argsForCall := fake.xInfoStreamFullArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) XInfoStreamFullReturns(result1 *redisa.XInfoStreamFullCmd) {
	fake.xInfoStreamFullMutex.Lock()
	defer fake.xInfoStreamFullMutex.Unlock()
	fake.XInfoStreamFullStub = nil
	fake.xInfoStreamFullReturns = struct {
		result1 *redisa.XInfoStreamFullCmd
	}{result1}
}

func (fake *FakeCmdable) XInfoStreamFullReturnsOnCall(i int, result1 *redisa.XInfoStreamFullCmd) {
	fake.xInfoStreamFullMutex.Lock()
	defer fake.xInfoStreamFullMutex.Unlock()
	fake.XInfoStreamFullStub = nil
	if fake.xInfoStreamFullReturnsOnCall == nil {
		fake.xInfoStreamFullReturnsOnCall = make(map[int]struct {
			result1 *redisa.XInfoStreamFullCmd
		})
	}
	fake.xInfoStreamFullReturnsOnCall[i] = struct {
		result1 *redisa.XInfoStreamFullCmd
	}{result1}
}

func (fake *FakeCmdable) XLen(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.xLenMutex.Lock()
	ret, specificReturn := fake.xLenReturnsOnCall[len(fake.xLenArgsForCall)]
	fake.xLenArgsForCall = append(fake.xLenArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.XLenStub
	fakeReturns := fake.xLenReturns
	fake.recordInvocation("XLen", []interface{}{arg1, arg2})
	fake.xLenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XLenCallCount() int {
	fake.xLenMutex.RLock()
	defer fake.xLenMutex.RUnlock()
	return len(fake.xLenArgsForCall)
}

func (fake *FakeCmdable) XLenCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.xLenMutex.Lock()
	defer fake.xLenMutex.Unlock()
	fake.XLenStub = stub
}

func (fake *FakeCmdable) XLenArgsForCall(i int) (context.Context, string) {
	fake.xLenMutex.RLock()
	defer fake.xLenMutex.RUnlock()
	argsForCall := fake.xLenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) XLenReturns(result1 *redisa.IntCmd) {
	fake.xLenMutex.Lock()
	defer fake.xLenMutex.Unlock()
	fake.XLenStub = nil
	fake.xLenReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XLenReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.xLenMutex.Lock()
	defer fake.xLenMutex.Unlock()
	fake.XLenStub = nil
	if fake.xLenReturnsOnCall == nil {
		fake.xLenReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.xLenReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XPending(arg1 context.Context, arg2 string, arg3 string) *redisa.XPendingCmd {
	fake.xPendingMutex.Lock()
	ret, specificReturn := fake.xPendingReturnsOnCall[len(fake.xPendingArgsForCall)]
	fake.xPendingArgsForCall = append(fake.xPendingArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.XPendingStub
	fakeReturns := fake.xPendingReturns
	fake.recordInvocation("XPending", []interface{}{arg1, arg2, arg3})
	fake.xPendingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XPendingCallCount() int {
	fake.xPendingMutex.RLock()
	defer fake.xPendingMutex.RUnlock()
	return len(fake.xPendingArgsForCall)
}

func (fake *FakeCmdable) XPendingCalls(stub func(context.Context, string, string) *redisa.XPendingCmd) {
	fake.xPendingMutex.Lock()
	defer fake.xPendingMutex.Unlock()
	fake.XPendingStub = stub
}

func (fake *FakeCmdable) XPendingArgsForCall(i int) (context.Context, string, string) {
	fake.xPendingMutex.RLock()
	defer fake.xPendingMutex.RUnlock()
	argsForCall := fake.xPendingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) XPendingReturns(result1 *redisa.XPendingCmd) {
	fake.xPendingMutex.Lock()
	defer fake.xPendingMutex.Unlock()
	fake.XPendingStub = nil
	fake.xPendingReturns = struct {
		result1 *redisa.XPendingCmd
	}{result1}
}

func (fake *FakeCmdable) XPendingReturnsOnCall(i int, result1 *redisa.XPendingCmd) {
	fake.xPendingMutex.Lock()
	defer fake.xPendingMutex.Unlock()
	fake.XPendingStub = nil
	if fake.xPendingReturnsOnCall == nil {
		fake.xPendingReturnsOnCall = make(map[int]struct {
			result1 *redisa.XPendingCmd
		})
	}
	fake.xPendingReturnsOnCall[i] = struct {
		result1 *redisa.XPendingCmd
	}{result1}
}

func (fake *FakeCmdable) XPendingExt(arg1 context.Context, arg2 *redisa.XPendingExtArgs) *redisa.XPendingExtCmd {
	fake.xPendingExtMutex.Lock()
	ret, specificReturn := fake.xPendingExtReturnsOnCall[len(fake.xPendingExtArgsForCall)]
	fake.xPendingExtArgsForCall = append(fake.xPendingExtArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.XPendingExtArgs
	}{arg1, arg2})
	stub := fake.XPendingExtStub
	fakeReturns := fake.xPendingExtReturns
	fake.recordInvocation("XPendingExt", []interface{}{arg1, arg2})
	fake.xPendingExtMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XPendingExtCallCount() int {
	fake.xPendingExtMutex.RLock()
	defer fake.xPendingExtMutex.RUnlock()
	return len(fake.xPendingExtArgsForCall)
}

func (fake *FakeCmdable) XPendingExtCalls(stub func(context.Context, *redisa.XPendingExtArgs) *redisa.XPendingExtCmd) {
	fake.xPendingExtMutex.Lock()
	defer fake.xPendingExtMutex.Unlock()
	fake.XPendingExtStub = stub
}

func (fake *FakeCmdable) XPendingExtArgsForCall(i int) (context.Context, *redisa.XPendingExtArgs) {
	fake.xPendingExtMutex.RLock()
	defer fake.xPendingExtMutex.RUnlock()
	argsForCall := fake.xPendingExtArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) XPendingExtReturns(result1 *redisa.XPendingExtCmd) {
	fake.xPendingExtMutex.Lock()
	defer fake.xPendingExtMutex.Unlock()
	fake.XPendingExtStub = nil
	fake.xPendingExtReturns = struct {
		result1 *redisa.XPendingExtCmd
	}{result1}
}

func (fake *FakeCmdable) XPendingExtReturnsOnCall(i int, result1 *redisa.XPendingExtCmd) {
	fake.xPendingExtMutex.Lock()
	defer fake.xPendingExtMutex.Unlock()
	fake.XPendingExtStub = nil
	if fake.xPendingExtReturnsOnCall == nil {
		fake.xPendingExtReturnsOnCall = make(map[int]struct {
			result1 *redisa.XPendingExtCmd
		})
	}
	fake.xPendingExtReturnsOnCall[i] = struct {
		result1 *redisa.XPendingExtCmd
	}{result1}
}

func (fake *FakeCmdable) XRange(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.XMessageSliceCmd {
	fake.xRangeMutex.Lock()
	ret, specificReturn := fake.xRangeReturnsOnCall[len(fake.xRangeArgsForCall)]
	fake.xRangeArgsForCall = append(fake.xRangeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.XRangeStub
	fakeReturns := fake.xRangeReturns
	fake.recordInvocation("XRange", []interface{}{arg1, arg2, arg3, arg4})
	fake.xRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XRangeCallCount() int {
	fake.xRangeMutex.RLock()
	defer fake.xRangeMutex.RUnlock()
	return len(fake.xRangeArgsForCall)
}

func (fake *FakeCmdable) XRangeCalls(stub func(context.Context, string, string, string) *redisa.XMessageSliceCmd) {
	fake.xRangeMutex.Lock()
	defer fake.xRangeMutex.Unlock()
	fake.XRangeStub = stub
}

func (fake *FakeCmdable) XRangeArgsForCall(i int) (context.Context, string, string, string) {
	fake.xRangeMutex.RLock()
	defer fake.xRangeMutex.RUnlock()
	argsForCall := fake.xRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) XRangeReturns(result1 *redisa.XMessageSliceCmd) {
	fake.xRangeMutex.Lock()
	defer fake.xRangeMutex.Unlock()
	fake.XRangeStub = nil
	fake.xRangeReturns = struct {
		result1 *redisa.XMessageSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XRangeReturnsOnCall(i int, result1 *redisa.XMessageSliceCmd) {
	fake.xRangeMutex.Lock()
	defer fake.xRangeMutex.Unlock()
	fake.XRangeStub = nil
	if fake.xRangeReturnsOnCall == nil {
		fake.xRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.XMessageSliceCmd
		})
	}
	fake.xRangeReturnsOnCall[i] = struct {
		result1 *redisa.XMessageSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XRangeN(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 int64) *redisa.XMessageSliceCmd {
	fake.xRangeNMutex.Lock()
	ret, specificReturn := fake.xRangeNReturnsOnCall[len(fake.xRangeNArgsForCall)]
	fake.xRangeNArgsForCall = append(fake.xRangeNArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 int64
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.XRangeNStub
	fakeReturns := fake.xRangeNReturns
	fake.recordInvocation("XRangeN", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.xRangeNMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XRangeNCallCount() int {
	fake.xRangeNMutex.RLock()
	defer fake.xRangeNMutex.RUnlock()
	return len(fake.xRangeNArgsForCall)
}

func (fake *FakeCmdable) XRangeNCalls(stub func(context.Context, string, string, string, int64) *redisa.XMessageSliceCmd) {
	fake.xRangeNMutex.Lock()
	defer fake.xRangeNMutex.Unlock()
	fake.XRangeNStub = stub
}

func (fake *FakeCmdable) XRangeNArgsForCall(i int) (context.Context, string, string, string, int64) {
	fake.xRangeNMutex.RLock()
	defer fake.xRangeNMutex.RUnlock()
	argsForCall := fake.xRangeNArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) XRangeNReturns(result1 *redisa.XMessageSliceCmd) {
	fake.xRangeNMutex.Lock()
	defer fake.xRangeNMutex.Unlock()
	fake.XRangeNStub = nil
	fake.xRangeNReturns = struct {
		result1 *redisa.XMessageSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XRangeNReturnsOnCall(i int, result1 *redisa.XMessageSliceCmd) {
	fake.xRangeNMutex.Lock()
	defer fake.xRangeNMutex.Unlock()
	fake.XRangeNStub = nil
	if fake.xRangeNReturnsOnCall == nil {
		fake.xRangeNReturnsOnCall = make(map[int]struct {
			result1 *redisa.XMessageSliceCmd
		})
	}
	fake.xRangeNReturnsOnCall[i] = struct {
		result1 *redisa.XMessageSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XRead(arg1 context.Context, arg2 *redisa.XReadArgs) *redisa.XStreamSliceCmd {
	fake.xReadMutex.Lock()
	ret, specificReturn := fake.xReadReturnsOnCall[len(fake.xReadArgsForCall)]
	fake.xReadArgsForCall = append(fake.xReadArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.XReadArgs
	}{arg1, arg2})
	stub := fake.XReadStub
	fakeReturns := fake.xReadReturns
	fake.recordInvocation("XRead", []interface{}{arg1, arg2})
	fake.xReadMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XReadCallCount() int {
	fake.xReadMutex.RLock()
	defer fake.xReadMutex.RUnlock()
	return len(fake.xReadArgsForCall)
}

func (fake *FakeCmdable) XReadCalls(stub func(context.Context, *redisa.XReadArgs) *redisa.XStreamSliceCmd) {
	fake.xReadMutex.Lock()
	defer fake.xReadMutex.Unlock()
	fake.XReadStub = stub
}

func (fake *FakeCmdable) XReadArgsForCall(i int) (context.Context, *redisa.XReadArgs) {
	fake.xReadMutex.RLock()
	defer fake.xReadMutex.RUnlock()
	argsForCall := fake.xReadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) XReadReturns(result1 *redisa.XStreamSliceCmd) {
	fake.xReadMutex.Lock()
	defer fake.xReadMutex.Unlock()
	fake.XReadStub = nil
	fake.xReadReturns = struct {
		result1 *redisa.XStreamSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XReadReturnsOnCall(i int, result1 *redisa.XStreamSliceCmd) {
	fake.xReadMutex.Lock()
	defer fake.xReadMutex.Unlock()
	fake.XReadStub = nil
	if fake.xReadReturnsOnCall == nil {
		fake.xReadReturnsOnCall = make(map[int]struct {
			result1 *redisa.XStreamSliceCmd
		})
	}
	fake.xReadReturnsOnCall[i] = struct {
		result1 *redisa.XStreamSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XReadGroup(arg1 context.Context, arg2 *redisa.XReadGroupArgs) *redisa.XStreamSliceCmd {
	fake.xReadGroupMutex.Lock()
	ret, specificReturn := fake.xReadGroupReturnsOnCall[len(fake.xReadGroupArgsForCall)]
	fake.xReadGroupArgsForCall = append(fake.xReadGroupArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.XReadGroupArgs
	}{arg1, arg2})
	stub := fake.XReadGroupStub
	fakeReturns := fake.xReadGroupReturns
	fake.recordInvocation("XReadGroup", []interface{}{arg1, arg2})
	fake.xReadGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XReadGroupCallCount() int {
	fake.xReadGroupMutex.RLock()
	defer fake.xReadGroupMutex.RUnlock()
	return len(fake.xReadGroupArgsForCall)
}

func (fake *FakeCmdable) XReadGroupCalls(stub func(context.Context, *redisa.XReadGroupArgs) *redisa.XStreamSliceCmd) {
	fake.xReadGroupMutex.Lock()
	defer fake.xReadGroupMutex.Unlock()
	fake.XReadGroupStub = stub
}

func (fake *FakeCmdable) XReadGroupArgsForCall(i int) (context.Context, *redisa.XReadGroupArgs) {
	fake.xReadGroupMutex.RLock()
	defer fake.xReadGroupMutex.RUnlock()
	argsForCall := fake.xReadGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) XReadGroupReturns(result1 *redisa.XStreamSliceCmd) {
	fake.xReadGroupMutex.Lock()
	defer fake.xReadGroupMutex.Unlock()
	fake.XReadGroupStub = nil
	fake.xReadGroupReturns = struct {
		result1 *redisa.XStreamSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XReadGroupReturnsOnCall(i int, result1 *redisa.XStreamSliceCmd) {
	fake.xReadGroupMutex.Lock()
	defer fake.xReadGroupMutex.Unlock()
	fake.XReadGroupStub = nil
	if fake.xReadGroupReturnsOnCall == nil {
		fake.xReadGroupReturnsOnCall = make(map[int]struct {
			result1 *redisa.XStreamSliceCmd
		})
	}
	fake.xReadGroupReturnsOnCall[i] = struct {
		result1 *redisa.XStreamSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XReadStreams(arg1 context.Context, arg2 ...string) *redisa.XStreamSliceCmd {
	fake.xReadStreamsMutex.Lock()
	ret, specificReturn := fake.xReadStreamsReturnsOnCall[len(fake.xReadStreamsArgsForCall)]
	fake.xReadStreamsArgsForCall = append(fake.xReadStreamsArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.XReadStreamsStub
	fakeReturns := fake.xReadStreamsReturns
	fake.recordInvocation("XReadStreams", []interface{}{arg1, arg2})
	fake.xReadStreamsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XReadStreamsCallCount() int {
	fake.xReadStreamsMutex.RLock()
	defer fake.xReadStreamsMutex.RUnlock()
	return len(fake.xReadStreamsArgsForCall)
}

func (fake *FakeCmdable) XReadStreamsCalls(stub func(context.Context, ...string) *redisa.XStreamSliceCmd) {
	fake.xReadStreamsMutex.Lock()
	defer fake.xReadStreamsMutex.Unlock()
	fake.XReadStreamsStub = stub
}

func (fake *FakeCmdable) XReadStreamsArgsForCall(i int) (context.Context, []string) {
	fake.xReadStreamsMutex.RLock()
	defer fake.xReadStreamsMutex.RUnlock()
	argsForCall := fake.xReadStreamsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) XReadStreamsReturns(result1 *redisa.XStreamSliceCmd) {
	fake.xReadStreamsMutex.Lock()
	defer fake.xReadStreamsMutex.Unlock()
	fake.XReadStreamsStub = nil
	fake.xReadStreamsReturns = struct {
		result1 *redisa.XStreamSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XReadStreamsReturnsOnCall(i int, result1 *redisa.XStreamSliceCmd) {
	fake.xReadStreamsMutex.Lock()
	defer fake.xReadStreamsMutex.Unlock()
	fake.XReadStreamsStub = nil
	if fake.xReadStreamsReturnsOnCall == nil {
		fake.xReadStreamsReturnsOnCall = make(map[int]struct {
			result1 *redisa.XStreamSliceCmd
		})
	}
	fake.xReadStreamsReturnsOnCall[i] = struct {
		result1 *redisa.XStreamSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XRevRange(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.XMessageSliceCmd {
	fake.xRevRangeMutex.Lock()
	ret, specificReturn := fake.xRevRangeReturnsOnCall[len(fake.xRevRangeArgsForCall)]
	fake.xRevRangeArgsForCall = append(fake.xRevRangeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.XRevRangeStub
	fakeReturns := fake.xRevRangeReturns
	fake.recordInvocation("XRevRange", []interface{}{arg1, arg2, arg3, arg4})
	fake.xRevRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XRevRangeCallCount() int {
	fake.xRevRangeMutex.RLock()
	defer fake.xRevRangeMutex.RUnlock()
	return len(fake.xRevRangeArgsForCall)
}

func (fake *FakeCmdable) XRevRangeCalls(stub func(context.Context, string, string, string) *redisa.XMessageSliceCmd) {
	fake.xRevRangeMutex.Lock()
	defer fake.xRevRangeMutex.Unlock()
	fake.XRevRangeStub = stub
}

func (fake *FakeCmdable) XRevRangeArgsForCall(i int) (context.Context, string, string, string) {
	fake.xRevRangeMutex.RLock()
	defer fake.xRevRangeMutex.RUnlock()
	argsForCall := fake.xRevRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) XRevRangeReturns(result1 *redisa.XMessageSliceCmd) {
	fake.xRevRangeMutex.Lock()
	defer fake.xRevRangeMutex.Unlock()
	fake.XRevRangeStub = nil
	fake.xRevRangeReturns = struct {
		result1 *redisa.XMessageSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XRevRangeReturnsOnCall(i int, result1 *redisa.XMessageSliceCmd) {
	fake.xRevRangeMutex.Lock()
	defer fake.xRevRangeMutex.Unlock()
	fake.XRevRangeStub = nil
	if fake.xRevRangeReturnsOnCall == nil {
		fake.xRevRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.XMessageSliceCmd
		})
	}
	fake.xRevRangeReturnsOnCall[i] = struct {
		result1 *redisa.XMessageSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XRevRangeN(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 int64) *redisa.XMessageSliceCmd {
	fake.xRevRangeNMutex.Lock()
	ret, specificReturn := fake.xRevRangeNReturnsOnCall[len(fake.xRevRangeNArgsForCall)]
	fake.xRevRangeNArgsForCall = append(fake.xRevRangeNArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 int64
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.XRevRangeNStub
	fakeReturns := fake.xRevRangeNReturns
	fake.recordInvocation("XRevRangeN", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.xRevRangeNMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XRevRangeNCallCount() int {
	fake.xRevRangeNMutex.RLock()
	defer fake.xRevRangeNMutex.RUnlock()
	return len(fake.xRevRangeNArgsForCall)
}

func (fake *FakeCmdable) XRevRangeNCalls(stub func(context.Context, string, string, string, int64) *redisa.XMessageSliceCmd) {
	fake.xRevRangeNMutex.Lock()
	defer fake.xRevRangeNMutex.Unlock()
	fake.XRevRangeNStub = stub
}

func (fake *FakeCmdable) XRevRangeNArgsForCall(i int) (context.Context, string, string, string, int64) {
	fake.xRevRangeNMutex.RLock()
	defer fake.xRevRangeNMutex.RUnlock()
	argsForCall := fake.xRevRangeNArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) XRevRangeNReturns(result1 *redisa.XMessageSliceCmd) {
	fake.xRevRangeNMutex.Lock()
	defer fake.xRevRangeNMutex.Unlock()
	fake.XRevRangeNStub = nil
	fake.xRevRangeNReturns = struct {
		result1 *redisa.XMessageSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XRevRangeNReturnsOnCall(i int, result1 *redisa.XMessageSliceCmd) {
	fake.xRevRangeNMutex.Lock()
	defer fake.xRevRangeNMutex.Unlock()
	fake.XRevRangeNStub = nil
	if fake.xRevRangeNReturnsOnCall == nil {
		fake.xRevRangeNReturnsOnCall = make(map[int]struct {
			result1 *redisa.XMessageSliceCmd
		})
	}
	fake.xRevRangeNReturnsOnCall[i] = struct {
		result1 *redisa.XMessageSliceCmd
	}{result1}
}

func (fake *FakeCmdable) XTrimMaxLen(arg1 context.Context, arg2 string, arg3 int64) *redisa.IntCmd {
	fake.xTrimMaxLenMutex.Lock()
	ret, specificReturn := fake.xTrimMaxLenReturnsOnCall[len(fake.xTrimMaxLenArgsForCall)]
	fake.xTrimMaxLenArgsForCall = append(fake.xTrimMaxLenArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
	}{arg1, arg2, arg3})
	stub := fake.XTrimMaxLenStub
	fakeReturns := fake.xTrimMaxLenReturns
	fake.recordInvocation("XTrimMaxLen", []interface{}{arg1, arg2, arg3})
	fake.xTrimMaxLenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XTrimMaxLenCallCount() int {
	fake.xTrimMaxLenMutex.RLock()
	defer fake.xTrimMaxLenMutex.RUnlock()
	return len(fake.xTrimMaxLenArgsForCall)
}

func (fake *FakeCmdable) XTrimMaxLenCalls(stub func(context.Context, string, int64) *redisa.IntCmd) {
	fake.xTrimMaxLenMutex.Lock()
	defer fake.xTrimMaxLenMutex.Unlock()
	fake.XTrimMaxLenStub = stub
}

func (fake *FakeCmdable) XTrimMaxLenArgsForCall(i int) (context.Context, string, int64) {
	fake.xTrimMaxLenMutex.RLock()
	defer fake.xTrimMaxLenMutex.RUnlock()
	argsForCall := fake.xTrimMaxLenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) XTrimMaxLenReturns(result1 *redisa.IntCmd) {
	fake.xTrimMaxLenMutex.Lock()
	defer fake.xTrimMaxLenMutex.Unlock()
	fake.XTrimMaxLenStub = nil
	fake.xTrimMaxLenReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XTrimMaxLenReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.xTrimMaxLenMutex.Lock()
	defer fake.xTrimMaxLenMutex.Unlock()
	fake.XTrimMaxLenStub = nil
	if fake.xTrimMaxLenReturnsOnCall == nil {
		fake.xTrimMaxLenReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.xTrimMaxLenReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XTrimMaxLenApprox(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.IntCmd {
	fake.xTrimMaxLenApproxMutex.Lock()
	ret, specificReturn := fake.xTrimMaxLenApproxReturnsOnCall[len(fake.xTrimMaxLenApproxArgsForCall)]
	fake.xTrimMaxLenApproxArgsForCall = append(fake.xTrimMaxLenApproxArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.XTrimMaxLenApproxStub
	fakeReturns := fake.xTrimMaxLenApproxReturns
	fake.recordInvocation("XTrimMaxLenApprox", []interface{}{arg1, arg2, arg3, arg4})
	fake.xTrimMaxLenApproxMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XTrimMaxLenApproxCallCount() int {
	fake.xTrimMaxLenApproxMutex.RLock()
	defer fake.xTrimMaxLenApproxMutex.RUnlock()
	return len(fake.xTrimMaxLenApproxArgsForCall)
}

func (fake *FakeCmdable) XTrimMaxLenApproxCalls(stub func(context.Context, string, int64, int64) *redisa.IntCmd) {
	fake.xTrimMaxLenApproxMutex.Lock()
	defer fake.xTrimMaxLenApproxMutex.Unlock()
	fake.XTrimMaxLenApproxStub = stub
}

func (fake *FakeCmdable) XTrimMaxLenApproxArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.xTrimMaxLenApproxMutex.RLock()
	defer fake.xTrimMaxLenApproxMutex.RUnlock()
	argsForCall := fake.xTrimMaxLenApproxArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) XTrimMaxLenApproxReturns(result1 *redisa.IntCmd) {
	fake.xTrimMaxLenApproxMutex.Lock()
	defer fake.xTrimMaxLenApproxMutex.Unlock()
	fake.XTrimMaxLenApproxStub = nil
	fake.xTrimMaxLenApproxReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XTrimMaxLenApproxReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.xTrimMaxLenApproxMutex.Lock()
	defer fake.xTrimMaxLenApproxMutex.Unlock()
	fake.XTrimMaxLenApproxStub = nil
	if fake.xTrimMaxLenApproxReturnsOnCall == nil {
		fake.xTrimMaxLenApproxReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.xTrimMaxLenApproxReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XTrimMinID(arg1 context.Context, arg2 string, arg3 string) *redisa.IntCmd {
	fake.xTrimMinIDMutex.Lock()
	ret, specificReturn := fake.xTrimMinIDReturnsOnCall[len(fake.xTrimMinIDArgsForCall)]
	fake.xTrimMinIDArgsForCall = append(fake.xTrimMinIDArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.XTrimMinIDStub
	fakeReturns := fake.xTrimMinIDReturns
	fake.recordInvocation("XTrimMinID", []interface{}{arg1, arg2, arg3})
	fake.xTrimMinIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XTrimMinIDCallCount() int {
	fake.xTrimMinIDMutex.RLock()
	defer fake.xTrimMinIDMutex.RUnlock()
	return len(fake.xTrimMinIDArgsForCall)
}

func (fake *FakeCmdable) XTrimMinIDCalls(stub func(context.Context, string, string) *redisa.IntCmd) {
	fake.xTrimMinIDMutex.Lock()
	defer fake.xTrimMinIDMutex.Unlock()
	fake.XTrimMinIDStub = stub
}

func (fake *FakeCmdable) XTrimMinIDArgsForCall(i int) (context.Context, string, string) {
	fake.xTrimMinIDMutex.RLock()
	defer fake.xTrimMinIDMutex.RUnlock()
	argsForCall := fake.xTrimMinIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) XTrimMinIDReturns(result1 *redisa.IntCmd) {
	fake.xTrimMinIDMutex.Lock()
	defer fake.xTrimMinIDMutex.Unlock()
	fake.XTrimMinIDStub = nil
	fake.xTrimMinIDReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XTrimMinIDReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.xTrimMinIDMutex.Lock()
	defer fake.xTrimMinIDMutex.Unlock()
	fake.XTrimMinIDStub = nil
	if fake.xTrimMinIDReturnsOnCall == nil {
		fake.xTrimMinIDReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.xTrimMinIDReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XTrimMinIDApprox(arg1 context.Context, arg2 string, arg3 string, arg4 int64) *redisa.IntCmd {
	fake.xTrimMinIDApproxMutex.Lock()
	ret, specificReturn := fake.xTrimMinIDApproxReturnsOnCall[len(fake.xTrimMinIDApproxArgsForCall)]
	fake.xTrimMinIDApproxArgsForCall = append(fake.xTrimMinIDApproxArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.XTrimMinIDApproxStub
	fakeReturns := fake.xTrimMinIDApproxReturns
	fake.recordInvocation("XTrimMinIDApprox", []interface{}{arg1, arg2, arg3, arg4})
	fake.xTrimMinIDApproxMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) XTrimMinIDApproxCallCount() int {
	fake.xTrimMinIDApproxMutex.RLock()
	defer fake.xTrimMinIDApproxMutex.RUnlock()
	return len(fake.xTrimMinIDApproxArgsForCall)
}

func (fake *FakeCmdable) XTrimMinIDApproxCalls(stub func(context.Context, string, string, int64) *redisa.IntCmd) {
	fake.xTrimMinIDApproxMutex.Lock()
	defer fake.xTrimMinIDApproxMutex.Unlock()
	fake.XTrimMinIDApproxStub = stub
}

func (fake *FakeCmdable) XTrimMinIDApproxArgsForCall(i int) (context.Context, string, string, int64) {
	fake.xTrimMinIDApproxMutex.RLock()
	defer fake.xTrimMinIDApproxMutex.RUnlock()
	argsForCall := fake.xTrimMinIDApproxArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) XTrimMinIDApproxReturns(result1 *redisa.IntCmd) {
	fake.xTrimMinIDApproxMutex.Lock()
	defer fake.xTrimMinIDApproxMutex.Unlock()
	fake.XTrimMinIDApproxStub = nil
	fake.xTrimMinIDApproxReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) XTrimMinIDApproxReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.xTrimMinIDApproxMutex.Lock()
	defer fake.xTrimMinIDApproxMutex.Unlock()
	fake.XTrimMinIDApproxStub = nil
	if fake.xTrimMinIDApproxReturnsOnCall == nil {
		fake.xTrimMinIDApproxReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.xTrimMinIDApproxReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZAdd(arg1 context.Context, arg2 string, arg3 ...redisa.Z) *redisa.IntCmd {
	fake.zAddMutex.Lock()
	ret, specificReturn := fake.zAddReturnsOnCall[len(fake.zAddArgsForCall)]
	fake.zAddArgsForCall = append(fake.zAddArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []redisa.Z
	}{arg1, arg2, arg3})
	stub := fake.ZAddStub
	fakeReturns := fake.zAddReturns
	fake.recordInvocation("ZAdd", []interface{}{arg1, arg2, arg3})
	fake.zAddMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZAddCallCount() int {
	fake.zAddMutex.RLock()
	defer fake.zAddMutex.RUnlock()
	return len(fake.zAddArgsForCall)
}

func (fake *FakeCmdable) ZAddCalls(stub func(context.Context, string, ...redisa.Z) *redisa.IntCmd) {
	fake.zAddMutex.Lock()
	defer fake.zAddMutex.Unlock()
	fake.ZAddStub = stub
}

func (fake *FakeCmdable) ZAddArgsForCall(i int) (context.Context, string, []redisa.Z) {
	fake.zAddMutex.RLock()
	defer fake.zAddMutex.RUnlock()
	argsForCall := fake.zAddArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZAddReturns(result1 *redisa.IntCmd) {
	fake.zAddMutex.Lock()
	defer fake.zAddMutex.Unlock()
	fake.ZAddStub = nil
	fake.zAddReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zAddMutex.Lock()
	defer fake.zAddMutex.Unlock()
	fake.ZAddStub = nil
	if fake.zAddReturnsOnCall == nil {
		fake.zAddReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zAddReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddArgs(arg1 context.Context, arg2 string, arg3 redisa.ZAddArgs) *redisa.IntCmd {
	fake.zAddArgsMutex.Lock()
	ret, specificReturn := fake.zAddArgsReturnsOnCall[len(fake.zAddArgsArgsForCall)]
	fake.zAddArgsArgsForCall = append(fake.zAddArgsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 redisa.ZAddArgs
	}{arg1, arg2, arg3})
	stub := fake.ZAddArgsStub
	fakeReturns := fake.zAddArgsReturns
	fake.recordInvocation("ZAddArgs", []interface{}{arg1, arg2, arg3})
	fake.zAddArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZAddArgsCallCount() int {
	fake.zAddArgsMutex.RLock()
	defer fake.zAddArgsMutex.RUnlock()
	return len(fake.zAddArgsArgsForCall)
}

func (fake *FakeCmdable) ZAddArgsCalls(stub func(context.Context, string, redisa.ZAddArgs) *redisa.IntCmd) {
	fake.zAddArgsMutex.Lock()
	defer fake.zAddArgsMutex.Unlock()
	fake.ZAddArgsStub = stub
}

func (fake *FakeCmdable) ZAddArgsArgsForCall(i int) (context.Context, string, redisa.ZAddArgs) {
	fake.zAddArgsMutex.RLock()
	defer fake.zAddArgsMutex.RUnlock()
	argsForCall := fake.zAddArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZAddArgsReturns(result1 *redisa.IntCmd) {
	fake.zAddArgsMutex.Lock()
	defer fake.zAddArgsMutex.Unlock()
	fake.ZAddArgsStub = nil
	fake.zAddArgsReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddArgsReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zAddArgsMutex.Lock()
	defer fake.zAddArgsMutex.Unlock()
	fake.ZAddArgsStub = nil
	if fake.zAddArgsReturnsOnCall == nil {
		fake.zAddArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zAddArgsReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddArgsIncr(arg1 context.Context, arg2 string, arg3 redisa.ZAddArgs) *redisa.FloatCmd {
	fake.zAddArgsIncrMutex.Lock()
	ret, specificReturn := fake.zAddArgsIncrReturnsOnCall[len(fake.zAddArgsIncrArgsForCall)]
	fake.zAddArgsIncrArgsForCall = append(fake.zAddArgsIncrArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 redisa.ZAddArgs
	}{arg1, arg2, arg3})
	stub := fake.ZAddArgsIncrStub
	fakeReturns := fake.zAddArgsIncrReturns
	fake.recordInvocation("ZAddArgsIncr", []interface{}{arg1, arg2, arg3})
	fake.zAddArgsIncrMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZAddArgsIncrCallCount() int {
	fake.zAddArgsIncrMutex.RLock()
	defer fake.zAddArgsIncrMutex.RUnlock()
	return len(fake.zAddArgsIncrArgsForCall)
}

func (fake *FakeCmdable) ZAddArgsIncrCalls(stub func(context.Context, string, redisa.ZAddArgs) *redisa.FloatCmd) {
	fake.zAddArgsIncrMutex.Lock()
	defer fake.zAddArgsIncrMutex.Unlock()
	fake.ZAddArgsIncrStub = stub
}

func (fake *FakeCmdable) ZAddArgsIncrArgsForCall(i int) (context.Context, string, redisa.ZAddArgs) {
	fake.zAddArgsIncrMutex.RLock()
	defer fake.zAddArgsIncrMutex.RUnlock()
	argsForCall := fake.zAddArgsIncrArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZAddArgsIncrReturns(result1 *redisa.FloatCmd) {
	fake.zAddArgsIncrMutex.Lock()
	defer fake.zAddArgsIncrMutex.Unlock()
	fake.ZAddArgsIncrStub = nil
	fake.zAddArgsIncrReturns = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddArgsIncrReturnsOnCall(i int, result1 *redisa.FloatCmd) {
	fake.zAddArgsIncrMutex.Lock()
	defer fake.zAddArgsIncrMutex.Unlock()
	fake.ZAddArgsIncrStub = nil
	if fake.zAddArgsIncrReturnsOnCall == nil {
		fake.zAddArgsIncrReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatCmd
		})
	}
	fake.zAddArgsIncrReturnsOnCall[i] = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddGT(arg1 context.Context, arg2 string, arg3 ...redisa.Z) *redisa.IntCmd {
	fake.zAddGTMutex.Lock()
	ret, specificReturn := fake.zAddGTReturnsOnCall[len(fake.zAddGTArgsForCall)]
	fake.zAddGTArgsForCall = append(fake.zAddGTArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []redisa.Z
	}{arg1, arg2, arg3})
	stub := fake.ZAddGTStub
	fakeReturns := fake.zAddGTReturns
	fake.recordInvocation("ZAddGT", []interface{}{arg1, arg2, arg3})
	fake.zAddGTMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZAddGTCallCount() int {
	fake.zAddGTMutex.RLock()
	defer fake.zAddGTMutex.RUnlock()
	return len(fake.zAddGTArgsForCall)
}

func (fake *FakeCmdable) ZAddGTCalls(stub func(context.Context, string, ...redisa.Z) *redisa.IntCmd) {
	fake.zAddGTMutex.Lock()
	defer fake.zAddGTMutex.Unlock()
	fake.ZAddGTStub = stub
}

func (fake *FakeCmdable) ZAddGTArgsForCall(i int) (context.Context, string, []redisa.Z) {
	fake.zAddGTMutex.RLock()
	defer fake.zAddGTMutex.RUnlock()
	argsForCall := fake.zAddGTArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZAddGTReturns(result1 *redisa.IntCmd) {
	fake.zAddGTMutex.Lock()
	defer fake.zAddGTMutex.Unlock()
	fake.ZAddGTStub = nil
	fake.zAddGTReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddGTReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zAddGTMutex.Lock()
	defer fake.zAddGTMutex.Unlock()
	fake.ZAddGTStub = nil
	if fake.zAddGTReturnsOnCall == nil {
		fake.zAddGTReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zAddGTReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddLT(arg1 context.Context, arg2 string, arg3 ...redisa.Z) *redisa.IntCmd {
	fake.zAddLTMutex.Lock()
	ret, specificReturn := fake.zAddLTReturnsOnCall[len(fake.zAddLTArgsForCall)]
	fake.zAddLTArgsForCall = append(fake.zAddLTArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []redisa.Z
	}{arg1, arg2, arg3})
	stub := fake.ZAddLTStub
	fakeReturns := fake.zAddLTReturns
	fake.recordInvocation("ZAddLT", []interface{}{arg1, arg2, arg3})
	fake.zAddLTMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZAddLTCallCount() int {
	fake.zAddLTMutex.RLock()
	defer fake.zAddLTMutex.RUnlock()
	return len(fake.zAddLTArgsForCall)
}

func (fake *FakeCmdable) ZAddLTCalls(stub func(context.Context, string, ...redisa.Z) *redisa.IntCmd) {
	fake.zAddLTMutex.Lock()
	defer fake.zAddLTMutex.Unlock()
	fake.ZAddLTStub = stub
}

func (fake *FakeCmdable) ZAddLTArgsForCall(i int) (context.Context, string, []redisa.Z) {
	fake.zAddLTMutex.RLock()
	defer fake.zAddLTMutex.RUnlock()
	argsForCall := fake.zAddLTArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZAddLTReturns(result1 *redisa.IntCmd) {
	fake.zAddLTMutex.Lock()
	defer fake.zAddLTMutex.Unlock()
	fake.ZAddLTStub = nil
	fake.zAddLTReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddLTReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zAddLTMutex.Lock()
	defer fake.zAddLTMutex.Unlock()
	fake.ZAddLTStub = nil
	if fake.zAddLTReturnsOnCall == nil {
		fake.zAddLTReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zAddLTReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddNX(arg1 context.Context, arg2 string, arg3 ...redisa.Z) *redisa.IntCmd {
	fake.zAddNXMutex.Lock()
	ret, specificReturn := fake.zAddNXReturnsOnCall[len(fake.zAddNXArgsForCall)]
	fake.zAddNXArgsForCall = append(fake.zAddNXArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []redisa.Z
	}{arg1, arg2, arg3})
	stub := fake.ZAddNXStub
	fakeReturns := fake.zAddNXReturns
	fake.recordInvocation("ZAddNX", []interface{}{arg1, arg2, arg3})
	fake.zAddNXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZAddNXCallCount() int {
	fake.zAddNXMutex.RLock()
	defer fake.zAddNXMutex.RUnlock()
	return len(fake.zAddNXArgsForCall)
}

func (fake *FakeCmdable) ZAddNXCalls(stub func(context.Context, string, ...redisa.Z) *redisa.IntCmd) {
	fake.zAddNXMutex.Lock()
	defer fake.zAddNXMutex.Unlock()
	fake.ZAddNXStub = stub
}

func (fake *FakeCmdable) ZAddNXArgsForCall(i int) (context.Context, string, []redisa.Z) {
	fake.zAddNXMutex.RLock()
	defer fake.zAddNXMutex.RUnlock()
	argsForCall := fake.zAddNXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZAddNXReturns(result1 *redisa.IntCmd) {
	fake.zAddNXMutex.Lock()
	defer fake.zAddNXMutex.Unlock()
	fake.ZAddNXStub = nil
	fake.zAddNXReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddNXReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zAddNXMutex.Lock()
	defer fake.zAddNXMutex.Unlock()
	fake.ZAddNXStub = nil
	if fake.zAddNXReturnsOnCall == nil {
		fake.zAddNXReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zAddNXReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddXX(arg1 context.Context, arg2 string, arg3 ...redisa.Z) *redisa.IntCmd {
	fake.zAddXXMutex.Lock()
	ret, specificReturn := fake.zAddXXReturnsOnCall[len(fake.zAddXXArgsForCall)]
	fake.zAddXXArgsForCall = append(fake.zAddXXArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []redisa.Z
	}{arg1, arg2, arg3})
	stub := fake.ZAddXXStub
	fakeReturns := fake.zAddXXReturns
	fake.recordInvocation("ZAddXX", []interface{}{arg1, arg2, arg3})
	fake.zAddXXMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZAddXXCallCount() int {
	fake.zAddXXMutex.RLock()
	defer fake.zAddXXMutex.RUnlock()
	return len(fake.zAddXXArgsForCall)
}

func (fake *FakeCmdable) ZAddXXCalls(stub func(context.Context, string, ...redisa.Z) *redisa.IntCmd) {
	fake.zAddXXMutex.Lock()
	defer fake.zAddXXMutex.Unlock()
	fake.ZAddXXStub = stub
}

func (fake *FakeCmdable) ZAddXXArgsForCall(i int) (context.Context, string, []redisa.Z) {
	fake.zAddXXMutex.RLock()
	defer fake.zAddXXMutex.RUnlock()
	argsForCall := fake.zAddXXArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZAddXXReturns(result1 *redisa.IntCmd) {
	fake.zAddXXMutex.Lock()
	defer fake.zAddXXMutex.Unlock()
	fake.ZAddXXStub = nil
	fake.zAddXXReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZAddXXReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zAddXXMutex.Lock()
	defer fake.zAddXXMutex.Unlock()
	fake.ZAddXXStub = nil
	if fake.zAddXXReturnsOnCall == nil {
		fake.zAddXXReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zAddXXReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZCard(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.zCardMutex.Lock()
	ret, specificReturn := fake.zCardReturnsOnCall[len(fake.zCardArgsForCall)]
	fake.zCardArgsForCall = append(fake.zCardArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ZCardStub
	fakeReturns := fake.zCardReturns
	fake.recordInvocation("ZCard", []interface{}{arg1, arg2})
	fake.zCardMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZCardCallCount() int {
	fake.zCardMutex.RLock()
	defer fake.zCardMutex.RUnlock()
	return len(fake.zCardArgsForCall)
}

func (fake *FakeCmdable) ZCardCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.zCardMutex.Lock()
	defer fake.zCardMutex.Unlock()
	fake.ZCardStub = stub
}

func (fake *FakeCmdable) ZCardArgsForCall(i int) (context.Context, string) {
	fake.zCardMutex.RLock()
	defer fake.zCardMutex.RUnlock()
	argsForCall := fake.zCardArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ZCardReturns(result1 *redisa.IntCmd) {
	fake.zCardMutex.Lock()
	defer fake.zCardMutex.Unlock()
	fake.ZCardStub = nil
	fake.zCardReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZCardReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zCardMutex.Lock()
	defer fake.zCardMutex.Unlock()
	fake.ZCardStub = nil
	if fake.zCardReturnsOnCall == nil {
		fake.zCardReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zCardReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZCount(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.IntCmd {
	fake.zCountMutex.Lock()
	ret, specificReturn := fake.zCountReturnsOnCall[len(fake.zCountArgsForCall)]
	fake.zCountArgsForCall = append(fake.zCountArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ZCountStub
	fakeReturns := fake.zCountReturns
	fake.recordInvocation("ZCount", []interface{}{arg1, arg2, arg3, arg4})
	fake.zCountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZCountCallCount() int {
	fake.zCountMutex.RLock()
	defer fake.zCountMutex.RUnlock()
	return len(fake.zCountArgsForCall)
}

func (fake *FakeCmdable) ZCountCalls(stub func(context.Context, string, string, string) *redisa.IntCmd) {
	fake.zCountMutex.Lock()
	defer fake.zCountMutex.Unlock()
	fake.ZCountStub = stub
}

func (fake *FakeCmdable) ZCountArgsForCall(i int) (context.Context, string, string, string) {
	fake.zCountMutex.RLock()
	defer fake.zCountMutex.RUnlock()
	argsForCall := fake.zCountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) ZCountReturns(result1 *redisa.IntCmd) {
	fake.zCountMutex.Lock()
	defer fake.zCountMutex.Unlock()
	fake.ZCountStub = nil
	fake.zCountReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZCountReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zCountMutex.Lock()
	defer fake.zCountMutex.Unlock()
	fake.ZCountStub = nil
	if fake.zCountReturnsOnCall == nil {
		fake.zCountReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zCountReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZDiff(arg1 context.Context, arg2 ...string) *redisa.StringSliceCmd {
	fake.zDiffMutex.Lock()
	ret, specificReturn := fake.zDiffReturnsOnCall[len(fake.zDiffArgsForCall)]
	fake.zDiffArgsForCall = append(fake.zDiffArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.ZDiffStub
	fakeReturns := fake.zDiffReturns
	fake.recordInvocation("ZDiff", []interface{}{arg1, arg2})
	fake.zDiffMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZDiffCallCount() int {
	fake.zDiffMutex.RLock()
	defer fake.zDiffMutex.RUnlock()
	return len(fake.zDiffArgsForCall)
}

func (fake *FakeCmdable) ZDiffCalls(stub func(context.Context, ...string) *redisa.StringSliceCmd) {
	fake.zDiffMutex.Lock()
	defer fake.zDiffMutex.Unlock()
	fake.ZDiffStub = stub
}

func (fake *FakeCmdable) ZDiffArgsForCall(i int) (context.Context, []string) {
	fake.zDiffMutex.RLock()
	defer fake.zDiffMutex.RUnlock()
	argsForCall := fake.zDiffArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ZDiffReturns(result1 *redisa.StringSliceCmd) {
	fake.zDiffMutex.Lock()
	defer fake.zDiffMutex.Unlock()
	fake.ZDiffStub = nil
	fake.zDiffReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZDiffReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.zDiffMutex.Lock()
	defer fake.zDiffMutex.Unlock()
	fake.ZDiffStub = nil
	if fake.zDiffReturnsOnCall == nil {
		fake.zDiffReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.zDiffReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZDiffStore(arg1 context.Context, arg2 string, arg3 ...string) *redisa.IntCmd {
	fake.zDiffStoreMutex.Lock()
	ret, specificReturn := fake.zDiffStoreReturnsOnCall[len(fake.zDiffStoreArgsForCall)]
	fake.zDiffStoreArgsForCall = append(fake.zDiffStoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.ZDiffStoreStub
	fakeReturns := fake.zDiffStoreReturns
	fake.recordInvocation("ZDiffStore", []interface{}{arg1, arg2, arg3})
	fake.zDiffStoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZDiffStoreCallCount() int {
	fake.zDiffStoreMutex.RLock()
	defer fake.zDiffStoreMutex.RUnlock()
	return len(fake.zDiffStoreArgsForCall)
}

func (fake *FakeCmdable) ZDiffStoreCalls(stub func(context.Context, string, ...string) *redisa.IntCmd) {
	fake.zDiffStoreMutex.Lock()
	defer fake.zDiffStoreMutex.Unlock()
	fake.ZDiffStoreStub = stub
}

func (fake *FakeCmdable) ZDiffStoreArgsForCall(i int) (context.Context, string, []string) {
	fake.zDiffStoreMutex.RLock()
	defer fake.zDiffStoreMutex.RUnlock()
	argsForCall := fake.zDiffStoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZDiffStoreReturns(result1 *redisa.IntCmd) {
	fake.zDiffStoreMutex.Lock()
	defer fake.zDiffStoreMutex.Unlock()
	fake.ZDiffStoreStub = nil
	fake.zDiffStoreReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZDiffStoreReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zDiffStoreMutex.Lock()
	defer fake.zDiffStoreMutex.Unlock()
	fake.ZDiffStoreStub = nil
	if fake.zDiffStoreReturnsOnCall == nil {
		fake.zDiffStoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zDiffStoreReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZDiffWithScores(arg1 context.Context, arg2 ...string) *redisa.ZSliceCmd {
	fake.zDiffWithScoresMutex.Lock()
	ret, specificReturn := fake.zDiffWithScoresReturnsOnCall[len(fake.zDiffWithScoresArgsForCall)]
	fake.zDiffWithScoresArgsForCall = append(fake.zDiffWithScoresArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.ZDiffWithScoresStub
	fakeReturns := fake.zDiffWithScoresReturns
	fake.recordInvocation("ZDiffWithScores", []interface{}{arg1, arg2})
	fake.zDiffWithScoresMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZDiffWithScoresCallCount() int {
	fake.zDiffWithScoresMutex.RLock()
	defer fake.zDiffWithScoresMutex.RUnlock()
	return len(fake.zDiffWithScoresArgsForCall)
}

func (fake *FakeCmdable) ZDiffWithScoresCalls(stub func(context.Context, ...string) *redisa.ZSliceCmd) {
	fake.zDiffWithScoresMutex.Lock()
	defer fake.zDiffWithScoresMutex.Unlock()
	fake.ZDiffWithScoresStub = stub
}

func (fake *FakeCmdable) ZDiffWithScoresArgsForCall(i int) (context.Context, []string) {
	fake.zDiffWithScoresMutex.RLock()
	defer fake.zDiffWithScoresMutex.RUnlock()
	argsForCall := fake.zDiffWithScoresArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ZDiffWithScoresReturns(result1 *redisa.ZSliceCmd) {
	fake.zDiffWithScoresMutex.Lock()
	defer fake.zDiffWithScoresMutex.Unlock()
	fake.ZDiffWithScoresStub = nil
	fake.zDiffWithScoresReturns = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZDiffWithScoresReturnsOnCall(i int, result1 *redisa.ZSliceCmd) {
	fake.zDiffWithScoresMutex.Lock()
	defer fake.zDiffWithScoresMutex.Unlock()
	fake.ZDiffWithScoresStub = nil
	if fake.zDiffWithScoresReturnsOnCall == nil {
		fake.zDiffWithScoresReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceCmd
		})
	}
	fake.zDiffWithScoresReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZIncrBy(arg1 context.Context, arg2 string, arg3 float64, arg4 string) *redisa.FloatCmd {
	fake.zIncrByMutex.Lock()
	ret, specificReturn := fake.zIncrByReturnsOnCall[len(fake.zIncrByArgsForCall)]
	fake.zIncrByArgsForCall = append(fake.zIncrByArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 float64
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ZIncrByStub
	fakeReturns := fake.zIncrByReturns
	fake.recordInvocation("ZIncrBy", []interface{}{arg1, arg2, arg3, arg4})
	fake.zIncrByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZIncrByCallCount() int {
	fake.zIncrByMutex.RLock()
	defer fake.zIncrByMutex.RUnlock()
	return len(fake.zIncrByArgsForCall)
}

func (fake *FakeCmdable) ZIncrByCalls(stub func(context.Context, string, float64, string) *redisa.FloatCmd) {
	fake.zIncrByMutex.Lock()
	defer fake.zIncrByMutex.Unlock()
	fake.ZIncrByStub = stub
}

func (fake *FakeCmdable) ZIncrByArgsForCall(i int) (context.Context, string, float64, string) {
	fake.zIncrByMutex.RLock()
	defer fake.zIncrByMutex.RUnlock()
	argsForCall := fake.zIncrByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) ZIncrByReturns(result1 *redisa.FloatCmd) {
	fake.zIncrByMutex.Lock()
	defer fake.zIncrByMutex.Unlock()
	fake.ZIncrByStub = nil
	fake.zIncrByReturns = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) ZIncrByReturnsOnCall(i int, result1 *redisa.FloatCmd) {
	fake.zIncrByMutex.Lock()
	defer fake.zIncrByMutex.Unlock()
	fake.ZIncrByStub = nil
	if fake.zIncrByReturnsOnCall == nil {
		fake.zIncrByReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatCmd
		})
	}
	fake.zIncrByReturnsOnCall[i] = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) ZInter(arg1 context.Context, arg2 *redisa.ZStore) *redisa.StringSliceCmd {
	fake.zInterMutex.Lock()
	ret, specificReturn := fake.zInterReturnsOnCall[len(fake.zInterArgsForCall)]
	fake.zInterArgsForCall = append(fake.zInterArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.ZStore
	}{arg1, arg2})
	stub := fake.ZInterStub
	fakeReturns := fake.zInterReturns
	fake.recordInvocation("ZInter", []interface{}{arg1, arg2})
	fake.zInterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZInterCallCount() int {
	fake.zInterMutex.RLock()
	defer fake.zInterMutex.RUnlock()
	return len(fake.zInterArgsForCall)
}

func (fake *FakeCmdable) ZInterCalls(stub func(context.Context, *redisa.ZStore) *redisa.StringSliceCmd) {
	fake.zInterMutex.Lock()
	defer fake.zInterMutex.Unlock()
	fake.ZInterStub = stub
}

func (fake *FakeCmdable) ZInterArgsForCall(i int) (context.Context, *redisa.ZStore) {
	fake.zInterMutex.RLock()
	defer fake.zInterMutex.RUnlock()
	argsForCall := fake.zInterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ZInterReturns(result1 *redisa.StringSliceCmd) {
	fake.zInterMutex.Lock()
	defer fake.zInterMutex.Unlock()
	fake.ZInterStub = nil
	fake.zInterReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZInterReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.zInterMutex.Lock()
	defer fake.zInterMutex.Unlock()
	fake.ZInterStub = nil
	if fake.zInterReturnsOnCall == nil {
		fake.zInterReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.zInterReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZInterCard(arg1 context.Context, arg2 int64, arg3 ...string) *redisa.IntCmd {
	fake.zInterCardMutex.Lock()
	ret, specificReturn := fake.zInterCardReturnsOnCall[len(fake.zInterCardArgsForCall)]
	fake.zInterCardArgsForCall = append(fake.zInterCardArgsForCall, struct {
		arg1 context.Context
		arg2 int64
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.ZInterCardStub
	fakeReturns := fake.zInterCardReturns
	fake.recordInvocation("ZInterCard", []interface{}{arg1, arg2, arg3})
	fake.zInterCardMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZInterCardCallCount() int {
	fake.zInterCardMutex.RLock()
	defer fake.zInterCardMutex.RUnlock()
	return len(fake.zInterCardArgsForCall)
}

func (fake *FakeCmdable) ZInterCardCalls(stub func(context.Context, int64, ...string) *redisa.IntCmd) {
	fake.zInterCardMutex.Lock()
	defer fake.zInterCardMutex.Unlock()
	fake.ZInterCardStub = stub
}

func (fake *FakeCmdable) ZInterCardArgsForCall(i int) (context.Context, int64, []string) {
	fake.zInterCardMutex.RLock()
	defer fake.zInterCardMutex.RUnlock()
	argsForCall := fake.zInterCardArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZInterCardReturns(result1 *redisa.IntCmd) {
	fake.zInterCardMutex.Lock()
	defer fake.zInterCardMutex.Unlock()
	fake.ZInterCardStub = nil
	fake.zInterCardReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZInterCardReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zInterCardMutex.Lock()
	defer fake.zInterCardMutex.Unlock()
	fake.ZInterCardStub = nil
	if fake.zInterCardReturnsOnCall == nil {
		fake.zInterCardReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zInterCardReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZInterStore(arg1 context.Context, arg2 string, arg3 *redisa.ZStore) *redisa.IntCmd {
	fake.zInterStoreMutex.Lock()
	ret, specificReturn := fake.zInterStoreReturnsOnCall[len(fake.zInterStoreArgsForCall)]
	fake.zInterStoreArgsForCall = append(fake.zInterStoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZStore
	}{arg1, arg2, arg3})
	stub := fake.ZInterStoreStub
	fakeReturns := fake.zInterStoreReturns
	fake.recordInvocation("ZInterStore", []interface{}{arg1, arg2, arg3})
	fake.zInterStoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZInterStoreCallCount() int {
	fake.zInterStoreMutex.RLock()
	defer fake.zInterStoreMutex.RUnlock()
	return len(fake.zInterStoreArgsForCall)
}

func (fake *FakeCmdable) ZInterStoreCalls(stub func(context.Context, string, *redisa.ZStore) *redisa.IntCmd) {
	fake.zInterStoreMutex.Lock()
	defer fake.zInterStoreMutex.Unlock()
	fake.ZInterStoreStub = stub
}

func (fake *FakeCmdable) ZInterStoreArgsForCall(i int) (context.Context, string, *redisa.ZStore) {
	fake.zInterStoreMutex.RLock()
	defer fake.zInterStoreMutex.RUnlock()
	argsForCall := fake.zInterStoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZInterStoreReturns(result1 *redisa.IntCmd) {
	fake.zInterStoreMutex.Lock()
	defer fake.zInterStoreMutex.Unlock()
	fake.ZInterStoreStub = nil
	fake.zInterStoreReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZInterStoreReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zInterStoreMutex.Lock()
	defer fake.zInterStoreMutex.Unlock()
	fake.ZInterStoreStub = nil
	if fake.zInterStoreReturnsOnCall == nil {
		fake.zInterStoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zInterStoreReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZInterWithScores(arg1 context.Context, arg2 *redisa.ZStore) *redisa.ZSliceCmd {
	fake.zInterWithScoresMutex.Lock()
	ret, specificReturn := fake.zInterWithScoresReturnsOnCall[len(fake.zInterWithScoresArgsForCall)]
	fake.zInterWithScoresArgsForCall = append(fake.zInterWithScoresArgsForCall, struct {
		arg1 context.Context
		arg2 *redisa.ZStore
	}{arg1, arg2})
	stub := fake.ZInterWithScoresStub
	fakeReturns := fake.zInterWithScoresReturns
	fake.recordInvocation("ZInterWithScores", []interface{}{arg1, arg2})
	fake.zInterWithScoresMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZInterWithScoresCallCount() int {
	fake.zInterWithScoresMutex.RLock()
	defer fake.zInterWithScoresMutex.RUnlock()
	return len(fake.zInterWithScoresArgsForCall)
}

func (fake *FakeCmdable) ZInterWithScoresCalls(stub func(context.Context, *redisa.ZStore) *redisa.ZSliceCmd) {
	fake.zInterWithScoresMutex.Lock()
	defer fake.zInterWithScoresMutex.Unlock()
	fake.ZInterWithScoresStub = stub
}

func (fake *FakeCmdable) ZInterWithScoresArgsForCall(i int) (context.Context, *redisa.ZStore) {
	fake.zInterWithScoresMutex.RLock()
	defer fake.zInterWithScoresMutex.RUnlock()
	argsForCall := fake.zInterWithScoresArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ZInterWithScoresReturns(result1 *redisa.ZSliceCmd) {
	fake.zInterWithScoresMutex.Lock()
	defer fake.zInterWithScoresMutex.Unlock()
	fake.ZInterWithScoresStub = nil
	fake.zInterWithScoresReturns = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZInterWithScoresReturnsOnCall(i int, result1 *redisa.ZSliceCmd) {
	fake.zInterWithScoresMutex.Lock()
	defer fake.zInterWithScoresMutex.Unlock()
	fake.ZInterWithScoresStub = nil
	if fake.zInterWithScoresReturnsOnCall == nil {
		fake.zInterWithScoresReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceCmd
		})
	}
	fake.zInterWithScoresReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZLexCount(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.IntCmd {
	fake.zLexCountMutex.Lock()
	ret, specificReturn := fake.zLexCountReturnsOnCall[len(fake.zLexCountArgsForCall)]
	fake.zLexCountArgsForCall = append(fake.zLexCountArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ZLexCountStub
	fakeReturns := fake.zLexCountReturns
	fake.recordInvocation("ZLexCount", []interface{}{arg1, arg2, arg3, arg4})
	fake.zLexCountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZLexCountCallCount() int {
	fake.zLexCountMutex.RLock()
	defer fake.zLexCountMutex.RUnlock()
	return len(fake.zLexCountArgsForCall)
}

func (fake *FakeCmdable) ZLexCountCalls(stub func(context.Context, string, string, string) *redisa.IntCmd) {
	fake.zLexCountMutex.Lock()
	defer fake.zLexCountMutex.Unlock()
	fake.ZLexCountStub = stub
}

func (fake *FakeCmdable) ZLexCountArgsForCall(i int) (context.Context, string, string, string) {
	fake.zLexCountMutex.RLock()
	defer fake.zLexCountMutex.RUnlock()
	argsForCall := fake.zLexCountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) ZLexCountReturns(result1 *redisa.IntCmd) {
	fake.zLexCountMutex.Lock()
	defer fake.zLexCountMutex.Unlock()
	fake.ZLexCountStub = nil
	fake.zLexCountReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZLexCountReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zLexCountMutex.Lock()
	defer fake.zLexCountMutex.Unlock()
	fake.ZLexCountStub = nil
	if fake.zLexCountReturnsOnCall == nil {
		fake.zLexCountReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zLexCountReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZMPop(arg1 context.Context, arg2 string, arg3 int64, arg4 ...string) *redisa.ZSliceWithKeyCmd {
	fake.zMPopMutex.Lock()
	ret, specificReturn := fake.zMPopReturnsOnCall[len(fake.zMPopArgsForCall)]
	fake.zMPopArgsForCall = append(fake.zMPopArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ZMPopStub
	fakeReturns := fake.zMPopReturns
	fake.recordInvocation("ZMPop", []interface{}{arg1, arg2, arg3, arg4})
	fake.zMPopMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZMPopCallCount() int {
	fake.zMPopMutex.RLock()
	defer fake.zMPopMutex.RUnlock()
	return len(fake.zMPopArgsForCall)
}

func (fake *FakeCmdable) ZMPopCalls(stub func(context.Context, string, int64, ...string) *redisa.ZSliceWithKeyCmd) {
	fake.zMPopMutex.Lock()
	defer fake.zMPopMutex.Unlock()
	fake.ZMPopStub = stub
}

func (fake *FakeCmdable) ZMPopArgsForCall(i int) (context.Context, string, int64, []string) {
	fake.zMPopMutex.RLock()
	defer fake.zMPopMutex.RUnlock()
	argsForCall := fake.zMPopArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) ZMPopReturns(result1 *redisa.ZSliceWithKeyCmd) {
	fake.zMPopMutex.Lock()
	defer fake.zMPopMutex.Unlock()
	fake.ZMPopStub = nil
	fake.zMPopReturns = struct {
		result1 *redisa.ZSliceWithKeyCmd
	}{result1}
}

func (fake *FakeCmdable) ZMPopReturnsOnCall(i int, result1 *redisa.ZSliceWithKeyCmd) {
	fake.zMPopMutex.Lock()
	defer fake.zMPopMutex.Unlock()
	fake.ZMPopStub = nil
	if fake.zMPopReturnsOnCall == nil {
		fake.zMPopReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceWithKeyCmd
		})
	}
	fake.zMPopReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceWithKeyCmd
	}{result1}
}

func (fake *FakeCmdable) ZMScore(arg1 context.Context, arg2 string, arg3 ...string) *redisa.FloatSliceCmd {
	fake.zMScoreMutex.Lock()
	ret, specificReturn := fake.zMScoreReturnsOnCall[len(fake.zMScoreArgsForCall)]
	fake.zMScoreArgsForCall = append(fake.zMScoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3})
	stub := fake.ZMScoreStub
	fakeReturns := fake.zMScoreReturns
	fake.recordInvocation("ZMScore", []interface{}{arg1, arg2, arg3})
	fake.zMScoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZMScoreCallCount() int {
	fake.zMScoreMutex.RLock()
	defer fake.zMScoreMutex.RUnlock()
	return len(fake.zMScoreArgsForCall)
}

func (fake *FakeCmdable) ZMScoreCalls(stub func(context.Context, string, ...string) *redisa.FloatSliceCmd) {
	fake.zMScoreMutex.Lock()
	defer fake.zMScoreMutex.Unlock()
	fake.ZMScoreStub = stub
}

func (fake *FakeCmdable) ZMScoreArgsForCall(i int) (context.Context, string, []string) {
	fake.zMScoreMutex.RLock()
	defer fake.zMScoreMutex.RUnlock()
	argsForCall := fake.zMScoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZMScoreReturns(result1 *redisa.FloatSliceCmd) {
	fake.zMScoreMutex.Lock()
	defer fake.zMScoreMutex.Unlock()
	fake.ZMScoreStub = nil
	fake.zMScoreReturns = struct {
		result1 *redisa.FloatSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZMScoreReturnsOnCall(i int, result1 *redisa.FloatSliceCmd) {
	fake.zMScoreMutex.Lock()
	defer fake.zMScoreMutex.Unlock()
	fake.ZMScoreStub = nil
	if fake.zMScoreReturnsOnCall == nil {
		fake.zMScoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatSliceCmd
		})
	}
	fake.zMScoreReturnsOnCall[i] = struct {
		result1 *redisa.FloatSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZPopMax(arg1 context.Context, arg2 string, arg3 ...int64) *redisa.ZSliceCmd {
	fake.zPopMaxMutex.Lock()
	ret, specificReturn := fake.zPopMaxReturnsOnCall[len(fake.zPopMaxArgsForCall)]
	fake.zPopMaxArgsForCall = append(fake.zPopMaxArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []int64
	}{arg1, arg2, arg3})
	stub := fake.ZPopMaxStub
	fakeReturns := fake.zPopMaxReturns
	fake.recordInvocation("ZPopMax", []interface{}{arg1, arg2, arg3})
	fake.zPopMaxMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZPopMaxCallCount() int {
	fake.zPopMaxMutex.RLock()
	defer fake.zPopMaxMutex.RUnlock()
	return len(fake.zPopMaxArgsForCall)
}

func (fake *FakeCmdable) ZPopMaxCalls(stub func(context.Context, string, ...int64) *redisa.ZSliceCmd) {
	fake.zPopMaxMutex.Lock()
	defer fake.zPopMaxMutex.Unlock()
	fake.ZPopMaxStub = stub
}

func (fake *FakeCmdable) ZPopMaxArgsForCall(i int) (context.Context, string, []int64) {
	fake.zPopMaxMutex.RLock()
	defer fake.zPopMaxMutex.RUnlock()
	argsForCall := fake.zPopMaxArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZPopMaxReturns(result1 *redisa.ZSliceCmd) {
	fake.zPopMaxMutex.Lock()
	defer fake.zPopMaxMutex.Unlock()
	fake.ZPopMaxStub = nil
	fake.zPopMaxReturns = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZPopMaxReturnsOnCall(i int, result1 *redisa.ZSliceCmd) {
	fake.zPopMaxMutex.Lock()
	defer fake.zPopMaxMutex.Unlock()
	fake.ZPopMaxStub = nil
	if fake.zPopMaxReturnsOnCall == nil {
		fake.zPopMaxReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceCmd
		})
	}
	fake.zPopMaxReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZPopMin(arg1 context.Context, arg2 string, arg3 ...int64) *redisa.ZSliceCmd {
	fake.zPopMinMutex.Lock()
	ret, specificReturn := fake.zPopMinReturnsOnCall[len(fake.zPopMinArgsForCall)]
	fake.zPopMinArgsForCall = append(fake.zPopMinArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []int64
	}{arg1, arg2, arg3})
	stub := fake.ZPopMinStub
	fakeReturns := fake.zPopMinReturns
	fake.recordInvocation("ZPopMin", []interface{}{arg1, arg2, arg3})
	fake.zPopMinMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZPopMinCallCount() int {
	fake.zPopMinMutex.RLock()
	defer fake.zPopMinMutex.RUnlock()
	return len(fake.zPopMinArgsForCall)
}

func (fake *FakeCmdable) ZPopMinCalls(stub func(context.Context, string, ...int64) *redisa.ZSliceCmd) {
	fake.zPopMinMutex.Lock()
	defer fake.zPopMinMutex.Unlock()
	fake.ZPopMinStub = stub
}

func (fake *FakeCmdable) ZPopMinArgsForCall(i int) (context.Context, string, []int64) {
	fake.zPopMinMutex.RLock()
	defer fake.zPopMinMutex.RUnlock()
	argsForCall := fake.zPopMinArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZPopMinReturns(result1 *redisa.ZSliceCmd) {
	fake.zPopMinMutex.Lock()
	defer fake.zPopMinMutex.Unlock()
	fake.ZPopMinStub = nil
	fake.zPopMinReturns = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZPopMinReturnsOnCall(i int, result1 *redisa.ZSliceCmd) {
	fake.zPopMinMutex.Lock()
	defer fake.zPopMinMutex.Unlock()
	fake.ZPopMinStub = nil
	if fake.zPopMinReturnsOnCall == nil {
		fake.zPopMinReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceCmd
		})
	}
	fake.zPopMinReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRandMember(arg1 context.Context, arg2 string, arg3 int) *redisa.StringSliceCmd {
	fake.zRandMemberMutex.Lock()
	ret, specificReturn := fake.zRandMemberReturnsOnCall[len(fake.zRandMemberArgsForCall)]
	fake.zRandMemberArgsForCall = append(fake.zRandMemberArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.ZRandMemberStub
	fakeReturns := fake.zRandMemberReturns
	fake.recordInvocation("ZRandMember", []interface{}{arg1, arg2, arg3})
	fake.zRandMemberMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRandMemberCallCount() int {
	fake.zRandMemberMutex.RLock()
	defer fake.zRandMemberMutex.RUnlock()
	return len(fake.zRandMemberArgsForCall)
}

func (fake *FakeCmdable) ZRandMemberCalls(stub func(context.Context, string, int) *redisa.StringSliceCmd) {
	fake.zRandMemberMutex.Lock()
	defer fake.zRandMemberMutex.Unlock()
	fake.ZRandMemberStub = stub
}

func (fake *FakeCmdable) ZRandMemberArgsForCall(i int) (context.Context, string, int) {
	fake.zRandMemberMutex.RLock()
	defer fake.zRandMemberMutex.RUnlock()
	argsForCall := fake.zRandMemberArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRandMemberReturns(result1 *redisa.StringSliceCmd) {
	fake.zRandMemberMutex.Lock()
	defer fake.zRandMemberMutex.Unlock()
	fake.ZRandMemberStub = nil
	fake.zRandMemberReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRandMemberReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.zRandMemberMutex.Lock()
	defer fake.zRandMemberMutex.Unlock()
	fake.ZRandMemberStub = nil
	if fake.zRandMemberReturnsOnCall == nil {
		fake.zRandMemberReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.zRandMemberReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRandMemberWithScores(arg1 context.Context, arg2 string, arg3 int) *redisa.ZSliceCmd {
	fake.zRandMemberWithScoresMutex.Lock()
	ret, specificReturn := fake.zRandMemberWithScoresReturnsOnCall[len(fake.zRandMemberWithScoresArgsForCall)]
	fake.zRandMemberWithScoresArgsForCall = append(fake.zRandMemberWithScoresArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.ZRandMemberWithScoresStub
	fakeReturns := fake.zRandMemberWithScoresReturns
	fake.recordInvocation("ZRandMemberWithScores", []interface{}{arg1, arg2, arg3})
	fake.zRandMemberWithScoresMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRandMemberWithScoresCallCount() int {
	fake.zRandMemberWithScoresMutex.RLock()
	defer fake.zRandMemberWithScoresMutex.RUnlock()
	return len(fake.zRandMemberWithScoresArgsForCall)
}

func (fake *FakeCmdable) ZRandMemberWithScoresCalls(stub func(context.Context, string, int) *redisa.ZSliceCmd) {
	fake.zRandMemberWithScoresMutex.Lock()
	defer fake.zRandMemberWithScoresMutex.Unlock()
	fake.ZRandMemberWithScoresStub = stub
}

func (fake *FakeCmdable) ZRandMemberWithScoresArgsForCall(i int) (context.Context, string, int) {
	fake.zRandMemberWithScoresMutex.RLock()
	defer fake.zRandMemberWithScoresMutex.RUnlock()
	argsForCall := fake.zRandMemberWithScoresArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRandMemberWithScoresReturns(result1 *redisa.ZSliceCmd) {
	fake.zRandMemberWithScoresMutex.Lock()
	defer fake.zRandMemberWithScoresMutex.Unlock()
	fake.ZRandMemberWithScoresStub = nil
	fake.zRandMemberWithScoresReturns = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRandMemberWithScoresReturnsOnCall(i int, result1 *redisa.ZSliceCmd) {
	fake.zRandMemberWithScoresMutex.Lock()
	defer fake.zRandMemberWithScoresMutex.Unlock()
	fake.ZRandMemberWithScoresStub = nil
	if fake.zRandMemberWithScoresReturnsOnCall == nil {
		fake.zRandMemberWithScoresReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceCmd
		})
	}
	fake.zRandMemberWithScoresReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRange(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.StringSliceCmd {
	fake.zRangeMutex.Lock()
	ret, specificReturn := fake.zRangeReturnsOnCall[len(fake.zRangeArgsForCall)]
	fake.zRangeArgsForCall = append(fake.zRangeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.ZRangeStub
	fakeReturns := fake.zRangeReturns
	fake.recordInvocation("ZRange", []interface{}{arg1, arg2, arg3, arg4})
	fake.zRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRangeCallCount() int {
	fake.zRangeMutex.RLock()
	defer fake.zRangeMutex.RUnlock()
	return len(fake.zRangeArgsForCall)
}

func (fake *FakeCmdable) ZRangeCalls(stub func(context.Context, string, int64, int64) *redisa.StringSliceCmd) {
	fake.zRangeMutex.Lock()
	defer fake.zRangeMutex.Unlock()
	fake.ZRangeStub = stub
}

func (fake *FakeCmdable) ZRangeArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.zRangeMutex.RLock()
	defer fake.zRangeMutex.RUnlock()
	argsForCall := fake.zRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) ZRangeReturns(result1 *redisa.StringSliceCmd) {
	fake.zRangeMutex.Lock()
	defer fake.zRangeMutex.Unlock()
	fake.ZRangeStub = nil
	fake.zRangeReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.zRangeMutex.Lock()
	defer fake.zRangeMutex.Unlock()
	fake.ZRangeStub = nil
	if fake.zRangeReturnsOnCall == nil {
		fake.zRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.zRangeReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeArgs(arg1 context.Context, arg2 redisa.ZRangeArgs) *redisa.StringSliceCmd {
	fake.zRangeArgsMutex.Lock()
	ret, specificReturn := fake.zRangeArgsReturnsOnCall[len(fake.zRangeArgsArgsForCall)]
	fake.zRangeArgsArgsForCall = append(fake.zRangeArgsArgsForCall, struct {
		arg1 context.Context
		arg2 redisa.ZRangeArgs
	}{arg1, arg2})
	stub := fake.ZRangeArgsStub
	fakeReturns := fake.zRangeArgsReturns
	fake.recordInvocation("ZRangeArgs", []interface{}{arg1, arg2})
	fake.zRangeArgsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRangeArgsCallCount() int {
	fake.zRangeArgsMutex.RLock()
	defer fake.zRangeArgsMutex.RUnlock()
	return len(fake.zRangeArgsArgsForCall)
}

func (fake *FakeCmdable) ZRangeArgsCalls(stub func(context.Context, redisa.ZRangeArgs) *redisa.StringSliceCmd) {
	fake.zRangeArgsMutex.Lock()
	defer fake.zRangeArgsMutex.Unlock()
	fake.ZRangeArgsStub = stub
}

func (fake *FakeCmdable) ZRangeArgsArgsForCall(i int) (context.Context, redisa.ZRangeArgs) {
	fake.zRangeArgsMutex.RLock()
	defer fake.zRangeArgsMutex.RUnlock()
	argsForCall := fake.zRangeArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ZRangeArgsReturns(result1 *redisa.StringSliceCmd) {
	fake.zRangeArgsMutex.Lock()
	defer fake.zRangeArgsMutex.Unlock()
	fake.ZRangeArgsStub = nil
	fake.zRangeArgsReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeArgsReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.zRangeArgsMutex.Lock()
	defer fake.zRangeArgsMutex.Unlock()
	fake.ZRangeArgsStub = nil
	if fake.zRangeArgsReturnsOnCall == nil {
		fake.zRangeArgsReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.zRangeArgsReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeArgsWithScores(arg1 context.Context, arg2 redisa.ZRangeArgs) *redisa.ZSliceCmd {
	fake.zRangeArgsWithScoresMutex.Lock()
	ret, specificReturn := fake.zRangeArgsWithScoresReturnsOnCall[len(fake.zRangeArgsWithScoresArgsForCall)]
	fake.zRangeArgsWithScoresArgsForCall = append(fake.zRangeArgsWithScoresArgsForCall, struct {
		arg1 context.Context
		arg2 redisa.ZRangeArgs
	}{arg1, arg2})
	stub := fake.ZRangeArgsWithScoresStub
	fakeReturns := fake.zRangeArgsWithScoresReturns
	fake.recordInvocation("ZRangeArgsWithScores", []interface{}{arg1, arg2})
	fake.zRangeArgsWithScoresMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRangeArgsWithScoresCallCount() int {
	fake.zRangeArgsWithScoresMutex.RLock()
	defer fake.zRangeArgsWithScoresMutex.RUnlock()
	return len(fake.zRangeArgsWithScoresArgsForCall)
}

func (fake *FakeCmdable) ZRangeArgsWithScoresCalls(stub func(context.Context, redisa.ZRangeArgs) *redisa.ZSliceCmd) {
	fake.zRangeArgsWithScoresMutex.Lock()
	defer fake.zRangeArgsWithScoresMutex.Unlock()
	fake.ZRangeArgsWithScoresStub = stub
}

func (fake *FakeCmdable) ZRangeArgsWithScoresArgsForCall(i int) (context.Context, redisa.ZRangeArgs) {
	fake.zRangeArgsWithScoresMutex.RLock()
	defer fake.zRangeArgsWithScoresMutex.RUnlock()
	argsForCall := fake.zRangeArgsWithScoresArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ZRangeArgsWithScoresReturns(result1 *redisa.ZSliceCmd) {
	fake.zRangeArgsWithScoresMutex.Lock()
	defer fake.zRangeArgsWithScoresMutex.Unlock()
	fake.ZRangeArgsWithScoresStub = nil
	fake.zRangeArgsWithScoresReturns = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeArgsWithScoresReturnsOnCall(i int, result1 *redisa.ZSliceCmd) {
	fake.zRangeArgsWithScoresMutex.Lock()
	defer fake.zRangeArgsWithScoresMutex.Unlock()
	fake.ZRangeArgsWithScoresStub = nil
	if fake.zRangeArgsWithScoresReturnsOnCall == nil {
		fake.zRangeArgsWithScoresReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceCmd
		})
	}
	fake.zRangeArgsWithScoresReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeByLex(arg1 context.Context, arg2 string, arg3 *redisa.ZRangeBy) *redisa.StringSliceCmd {
	fake.zRangeByLexMutex.Lock()
	ret, specificReturn := fake.zRangeByLexReturnsOnCall[len(fake.zRangeByLexArgsForCall)]
	fake.zRangeByLexArgsForCall = append(fake.zRangeByLexArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZRangeBy
	}{arg1, arg2, arg3})
	stub := fake.ZRangeByLexStub
	fakeReturns := fake.zRangeByLexReturns
	fake.recordInvocation("ZRangeByLex", []interface{}{arg1, arg2, arg3})
	fake.zRangeByLexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRangeByLexCallCount() int {
	fake.zRangeByLexMutex.RLock()
	defer fake.zRangeByLexMutex.RUnlock()
	return len(fake.zRangeByLexArgsForCall)
}

func (fake *FakeCmdable) ZRangeByLexCalls(stub func(context.Context, string, *redisa.ZRangeBy) *redisa.StringSliceCmd) {
	fake.zRangeByLexMutex.Lock()
	defer fake.zRangeByLexMutex.Unlock()
	fake.ZRangeByLexStub = stub
}

func (fake *FakeCmdable) ZRangeByLexArgsForCall(i int) (context.Context, string, *redisa.ZRangeBy) {
	fake.zRangeByLexMutex.RLock()
	defer fake.zRangeByLexMutex.RUnlock()
	argsForCall := fake.zRangeByLexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRangeByLexReturns(result1 *redisa.StringSliceCmd) {
	fake.zRangeByLexMutex.Lock()
	defer fake.zRangeByLexMutex.Unlock()
	fake.ZRangeByLexStub = nil
	fake.zRangeByLexReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeByLexReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.zRangeByLexMutex.Lock()
	defer fake.zRangeByLexMutex.Unlock()
	fake.ZRangeByLexStub = nil
	if fake.zRangeByLexReturnsOnCall == nil {
		fake.zRangeByLexReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.zRangeByLexReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeByScore(arg1 context.Context, arg2 string, arg3 *redisa.ZRangeBy) *redisa.StringSliceCmd {
	fake.zRangeByScoreMutex.Lock()
	ret, specificReturn := fake.zRangeByScoreReturnsOnCall[len(fake.zRangeByScoreArgsForCall)]
	fake.zRangeByScoreArgsForCall = append(fake.zRangeByScoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZRangeBy
	}{arg1, arg2, arg3})
	stub := fake.ZRangeByScoreStub
	fakeReturns := fake.zRangeByScoreReturns
	fake.recordInvocation("ZRangeByScore", []interface{}{arg1, arg2, arg3})
	fake.zRangeByScoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRangeByScoreCallCount() int {
	fake.zRangeByScoreMutex.RLock()
	defer fake.zRangeByScoreMutex.RUnlock()
	return len(fake.zRangeByScoreArgsForCall)
}

func (fake *FakeCmdable) ZRangeByScoreCalls(stub func(context.Context, string, *redisa.ZRangeBy) *redisa.StringSliceCmd) {
	fake.zRangeByScoreMutex.Lock()
	defer fake.zRangeByScoreMutex.Unlock()
	fake.ZRangeByScoreStub = stub
}

func (fake *FakeCmdable) ZRangeByScoreArgsForCall(i int) (context.Context, string, *redisa.ZRangeBy) {
	fake.zRangeByScoreMutex.RLock()
	defer fake.zRangeByScoreMutex.RUnlock()
	argsForCall := fake.zRangeByScoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRangeByScoreReturns(result1 *redisa.StringSliceCmd) {
	fake.zRangeByScoreMutex.Lock()
	defer fake.zRangeByScoreMutex.Unlock()
	fake.ZRangeByScoreStub = nil
	fake.zRangeByScoreReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeByScoreReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.zRangeByScoreMutex.Lock()
	defer fake.zRangeByScoreMutex.Unlock()
	fake.ZRangeByScoreStub = nil
	if fake.zRangeByScoreReturnsOnCall == nil {
		fake.zRangeByScoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.zRangeByScoreReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeByScoreWithScores(arg1 context.Context, arg2 string, arg3 *redisa.ZRangeBy) *redisa.ZSliceCmd {
	fake.zRangeByScoreWithScoresMutex.Lock()
	ret, specificReturn := fake.zRangeByScoreWithScoresReturnsOnCall[len(fake.zRangeByScoreWithScoresArgsForCall)]
	fake.zRangeByScoreWithScoresArgsForCall = append(fake.zRangeByScoreWithScoresArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZRangeBy
	}{arg1, arg2, arg3})
	stub := fake.ZRangeByScoreWithScoresStub
	fakeReturns := fake.zRangeByScoreWithScoresReturns
	fake.recordInvocation("ZRangeByScoreWithScores", []interface{}{arg1, arg2, arg3})
	fake.zRangeByScoreWithScoresMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRangeByScoreWithScoresCallCount() int {
	fake.zRangeByScoreWithScoresMutex.RLock()
	defer fake.zRangeByScoreWithScoresMutex.RUnlock()
	return len(fake.zRangeByScoreWithScoresArgsForCall)
}

func (fake *FakeCmdable) ZRangeByScoreWithScoresCalls(stub func(context.Context, string, *redisa.ZRangeBy) *redisa.ZSliceCmd) {
	fake.zRangeByScoreWithScoresMutex.Lock()
	defer fake.zRangeByScoreWithScoresMutex.Unlock()
	fake.ZRangeByScoreWithScoresStub = stub
}

func (fake *FakeCmdable) ZRangeByScoreWithScoresArgsForCall(i int) (context.Context, string, *redisa.ZRangeBy) {
	fake.zRangeByScoreWithScoresMutex.RLock()
	defer fake.zRangeByScoreWithScoresMutex.RUnlock()
	argsForCall := fake.zRangeByScoreWithScoresArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRangeByScoreWithScoresReturns(result1 *redisa.ZSliceCmd) {
	fake.zRangeByScoreWithScoresMutex.Lock()
	defer fake.zRangeByScoreWithScoresMutex.Unlock()
	fake.ZRangeByScoreWithScoresStub = nil
	fake.zRangeByScoreWithScoresReturns = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeByScoreWithScoresReturnsOnCall(i int, result1 *redisa.ZSliceCmd) {
	fake.zRangeByScoreWithScoresMutex.Lock()
	defer fake.zRangeByScoreWithScoresMutex.Unlock()
	fake.ZRangeByScoreWithScoresStub = nil
	if fake.zRangeByScoreWithScoresReturnsOnCall == nil {
		fake.zRangeByScoreWithScoresReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceCmd
		})
	}
	fake.zRangeByScoreWithScoresReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeStore(arg1 context.Context, arg2 string, arg3 redisa.ZRangeArgs) *redisa.IntCmd {
	fake.zRangeStoreMutex.Lock()
	ret, specificReturn := fake.zRangeStoreReturnsOnCall[len(fake.zRangeStoreArgsForCall)]
	fake.zRangeStoreArgsForCall = append(fake.zRangeStoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 redisa.ZRangeArgs
	}{arg1, arg2, arg3})
	stub := fake.ZRangeStoreStub
	fakeReturns := fake.zRangeStoreReturns
	fake.recordInvocation("ZRangeStore", []interface{}{arg1, arg2, arg3})
	fake.zRangeStoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRangeStoreCallCount() int {
	fake.zRangeStoreMutex.RLock()
	defer fake.zRangeStoreMutex.RUnlock()
	return len(fake.zRangeStoreArgsForCall)
}

func (fake *FakeCmdable) ZRangeStoreCalls(stub func(context.Context, string, redisa.ZRangeArgs) *redisa.IntCmd) {
	fake.zRangeStoreMutex.Lock()
	defer fake.zRangeStoreMutex.Unlock()
	fake.ZRangeStoreStub = stub
}

func (fake *FakeCmdable) ZRangeStoreArgsForCall(i int) (context.Context, string, redisa.ZRangeArgs) {
	fake.zRangeStoreMutex.RLock()
	defer fake.zRangeStoreMutex.RUnlock()
	argsForCall := fake.zRangeStoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRangeStoreReturns(result1 *redisa.IntCmd) {
	fake.zRangeStoreMutex.Lock()
	defer fake.zRangeStoreMutex.Unlock()
	fake.ZRangeStoreStub = nil
	fake.zRangeStoreReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeStoreReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zRangeStoreMutex.Lock()
	defer fake.zRangeStoreMutex.Unlock()
	fake.ZRangeStoreStub = nil
	if fake.zRangeStoreReturnsOnCall == nil {
		fake.zRangeStoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zRangeStoreReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeWithScores(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.ZSliceCmd {
	fake.zRangeWithScoresMutex.Lock()
	ret, specificReturn := fake.zRangeWithScoresReturnsOnCall[len(fake.zRangeWithScoresArgsForCall)]
	fake.zRangeWithScoresArgsForCall = append(fake.zRangeWithScoresArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.ZRangeWithScoresStub
	fakeReturns := fake.zRangeWithScoresReturns
	fake.recordInvocation("ZRangeWithScores", []interface{}{arg1, arg2, arg3, arg4})
	fake.zRangeWithScoresMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRangeWithScoresCallCount() int {
	fake.zRangeWithScoresMutex.RLock()
	defer fake.zRangeWithScoresMutex.RUnlock()
	return len(fake.zRangeWithScoresArgsForCall)
}

func (fake *FakeCmdable) ZRangeWithScoresCalls(stub func(context.Context, string, int64, int64) *redisa.ZSliceCmd) {
	fake.zRangeWithScoresMutex.Lock()
	defer fake.zRangeWithScoresMutex.Unlock()
	fake.ZRangeWithScoresStub = stub
}

func (fake *FakeCmdable) ZRangeWithScoresArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.zRangeWithScoresMutex.RLock()
	defer fake.zRangeWithScoresMutex.RUnlock()
	argsForCall := fake.zRangeWithScoresArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) ZRangeWithScoresReturns(result1 *redisa.ZSliceCmd) {
	fake.zRangeWithScoresMutex.Lock()
	defer fake.zRangeWithScoresMutex.Unlock()
	fake.ZRangeWithScoresStub = nil
	fake.zRangeWithScoresReturns = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRangeWithScoresReturnsOnCall(i int, result1 *redisa.ZSliceCmd) {
	fake.zRangeWithScoresMutex.Lock()
	defer fake.zRangeWithScoresMutex.Unlock()
	fake.ZRangeWithScoresStub = nil
	if fake.zRangeWithScoresReturnsOnCall == nil {
		fake.zRangeWithScoresReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceCmd
		})
	}
	fake.zRangeWithScoresReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRank(arg1 context.Context, arg2 string, arg3 string) *redisa.IntCmd {
	fake.zRankMutex.Lock()
	ret, specificReturn := fake.zRankReturnsOnCall[len(fake.zRankArgsForCall)]
	fake.zRankArgsForCall = append(fake.zRankArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ZRankStub
	fakeReturns := fake.zRankReturns
	fake.recordInvocation("ZRank", []interface{}{arg1, arg2, arg3})
	fake.zRankMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRankCallCount() int {
	fake.zRankMutex.RLock()
	defer fake.zRankMutex.RUnlock()
	return len(fake.zRankArgsForCall)
}

func (fake *FakeCmdable) ZRankCalls(stub func(context.Context, string, string) *redisa.IntCmd) {
	fake.zRankMutex.Lock()
	defer fake.zRankMutex.Unlock()
	fake.ZRankStub = stub
}

func (fake *FakeCmdable) ZRankArgsForCall(i int) (context.Context, string, string) {
	fake.zRankMutex.RLock()
	defer fake.zRankMutex.RUnlock()
	argsForCall := fake.zRankArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRankReturns(result1 *redisa.IntCmd) {
	fake.zRankMutex.Lock()
	defer fake.zRankMutex.Unlock()
	fake.ZRankStub = nil
	fake.zRankReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRankReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zRankMutex.Lock()
	defer fake.zRankMutex.Unlock()
	fake.ZRankStub = nil
	if fake.zRankReturnsOnCall == nil {
		fake.zRankReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zRankReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRankWithScore(arg1 context.Context, arg2 string, arg3 string) *redisa.RankWithScoreCmd {
	fake.zRankWithScoreMutex.Lock()
	ret, specificReturn := fake.zRankWithScoreReturnsOnCall[len(fake.zRankWithScoreArgsForCall)]
	fake.zRankWithScoreArgsForCall = append(fake.zRankWithScoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ZRankWithScoreStub
	fakeReturns := fake.zRankWithScoreReturns
	fake.recordInvocation("ZRankWithScore", []interface{}{arg1, arg2, arg3})
	fake.zRankWithScoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRankWithScoreCallCount() int {
	fake.zRankWithScoreMutex.RLock()
	defer fake.zRankWithScoreMutex.RUnlock()
	return len(fake.zRankWithScoreArgsForCall)
}

func (fake *FakeCmdable) ZRankWithScoreCalls(stub func(context.Context, string, string) *redisa.RankWithScoreCmd) {
	fake.zRankWithScoreMutex.Lock()
	defer fake.zRankWithScoreMutex.Unlock()
	fake.ZRankWithScoreStub = stub
}

func (fake *FakeCmdable) ZRankWithScoreArgsForCall(i int) (context.Context, string, string) {
	fake.zRankWithScoreMutex.RLock()
	defer fake.zRankWithScoreMutex.RUnlock()
	argsForCall := fake.zRankWithScoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRankWithScoreReturns(result1 *redisa.RankWithScoreCmd) {
	fake.zRankWithScoreMutex.Lock()
	defer fake.zRankWithScoreMutex.Unlock()
	fake.ZRankWithScoreStub = nil
	fake.zRankWithScoreReturns = struct {
		result1 *redisa.RankWithScoreCmd
	}{result1}
}

func (fake *FakeCmdable) ZRankWithScoreReturnsOnCall(i int, result1 *redisa.RankWithScoreCmd) {
	fake.zRankWithScoreMutex.Lock()
	defer fake.zRankWithScoreMutex.Unlock()
	fake.ZRankWithScoreStub = nil
	if fake.zRankWithScoreReturnsOnCall == nil {
		fake.zRankWithScoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.RankWithScoreCmd
		})
	}
	fake.zRankWithScoreReturnsOnCall[i] = struct {
		result1 *redisa.RankWithScoreCmd
	}{result1}
}

func (fake *FakeCmdable) ZRem(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntCmd {
	fake.zRemMutex.Lock()
	ret, specificReturn := fake.zRemReturnsOnCall[len(fake.zRemArgsForCall)]
	fake.zRemArgsForCall = append(fake.zRemArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.ZRemStub
	fakeReturns := fake.zRemReturns
	fake.recordInvocation("ZRem", []interface{}{arg1, arg2, arg3})
	fake.zRemMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRemCallCount() int {
	fake.zRemMutex.RLock()
	defer fake.zRemMutex.RUnlock()
	return len(fake.zRemArgsForCall)
}

func (fake *FakeCmdable) ZRemCalls(stub func(context.Context, string, ...interface{}) *redisa.IntCmd) {
	fake.zRemMutex.Lock()
	defer fake.zRemMutex.Unlock()
	fake.ZRemStub = stub
}

func (fake *FakeCmdable) ZRemArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.zRemMutex.RLock()
	defer fake.zRemMutex.RUnlock()
	argsForCall := fake.zRemArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRemReturns(result1 *redisa.IntCmd) {
	fake.zRemMutex.Lock()
	defer fake.zRemMutex.Unlock()
	fake.ZRemStub = nil
	fake.zRemReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRemReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zRemMutex.Lock()
	defer fake.zRemMutex.Unlock()
	fake.ZRemStub = nil
	if fake.zRemReturnsOnCall == nil {
		fake.zRemReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zRemReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRemRangeByLex(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.IntCmd {
	fake.zRemRangeByLexMutex.Lock()
	ret, specificReturn := fake.zRemRangeByLexReturnsOnCall[len(fake.zRemRangeByLexArgsForCall)]
	fake.zRemRangeByLexArgsForCall = append(fake.zRemRangeByLexArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ZRemRangeByLexStub
	fakeReturns := fake.zRemRangeByLexReturns
	fake.recordInvocation("ZRemRangeByLex", []interface{}{arg1, arg2, arg3, arg4})
	fake.zRemRangeByLexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRemRangeByLexCallCount() int {
	fake.zRemRangeByLexMutex.RLock()
	defer fake.zRemRangeByLexMutex.RUnlock()
	return len(fake.zRemRangeByLexArgsForCall)
}

func (fake *FakeCmdable) ZRemRangeByLexCalls(stub func(context.Context, string, string, string) *redisa.IntCmd) {
	fake.zRemRangeByLexMutex.Lock()
	defer fake.zRemRangeByLexMutex.Unlock()
	fake.ZRemRangeByLexStub = stub
}

func (fake *FakeCmdable) ZRemRangeByLexArgsForCall(i int) (context.Context, string, string, string) {
	fake.zRemRangeByLexMutex.RLock()
	defer fake.zRemRangeByLexMutex.RUnlock()
	argsForCall := fake.zRemRangeByLexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) ZRemRangeByLexReturns(result1 *redisa.IntCmd) {
	fake.zRemRangeByLexMutex.Lock()
	defer fake.zRemRangeByLexMutex.Unlock()
	fake.ZRemRangeByLexStub = nil
	fake.zRemRangeByLexReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRemRangeByLexReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zRemRangeByLexMutex.Lock()
	defer fake.zRemRangeByLexMutex.Unlock()
	fake.ZRemRangeByLexStub = nil
	if fake.zRemRangeByLexReturnsOnCall == nil {
		fake.zRemRangeByLexReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zRemRangeByLexReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRemRangeByRank(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.IntCmd {
	fake.zRemRangeByRankMutex.Lock()
	ret, specificReturn := fake.zRemRangeByRankReturnsOnCall[len(fake.zRemRangeByRankArgsForCall)]
	fake.zRemRangeByRankArgsForCall = append(fake.zRemRangeByRankArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.ZRemRangeByRankStub
	fakeReturns := fake.zRemRangeByRankReturns
	fake.recordInvocation("ZRemRangeByRank", []interface{}{arg1, arg2, arg3, arg4})
	fake.zRemRangeByRankMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRemRangeByRankCallCount() int {
	fake.zRemRangeByRankMutex.RLock()
	defer fake.zRemRangeByRankMutex.RUnlock()
	return len(fake.zRemRangeByRankArgsForCall)
}

func (fake *FakeCmdable) ZRemRangeByRankCalls(stub func(context.Context, string, int64, int64) *redisa.IntCmd) {
	fake.zRemRangeByRankMutex.Lock()
	defer fake.zRemRangeByRankMutex.Unlock()
	fake.ZRemRangeByRankStub = stub
}

func (fake *FakeCmdable) ZRemRangeByRankArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.zRemRangeByRankMutex.RLock()
	defer fake.zRemRangeByRankMutex.RUnlock()
	argsForCall := fake.zRemRangeByRankArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) ZRemRangeByRankReturns(result1 *redisa.IntCmd) {
	fake.zRemRangeByRankMutex.Lock()
	defer fake.zRemRangeByRankMutex.Unlock()
	fake.ZRemRangeByRankStub = nil
	fake.zRemRangeByRankReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRemRangeByRankReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zRemRangeByRankMutex.Lock()
	defer fake.zRemRangeByRankMutex.Unlock()
	fake.ZRemRangeByRankStub = nil
	if fake.zRemRangeByRankReturnsOnCall == nil {
		fake.zRemRangeByRankReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zRemRangeByRankReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRemRangeByScore(arg1 context.Context, arg2 string, arg3 string, arg4 string) *redisa.IntCmd {
	fake.zRemRangeByScoreMutex.Lock()
	ret, specificReturn := fake.zRemRangeByScoreReturnsOnCall[len(fake.zRemRangeByScoreArgsForCall)]
	fake.zRemRangeByScoreArgsForCall = append(fake.zRemRangeByScoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ZRemRangeByScoreStub
	fakeReturns := fake.zRemRangeByScoreReturns
	fake.recordInvocation("ZRemRangeByScore", []interface{}{arg1, arg2, arg3, arg4})
	fake.zRemRangeByScoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRemRangeByScoreCallCount() int {
	fake.zRemRangeByScoreMutex.RLock()
	defer fake.zRemRangeByScoreMutex.RUnlock()
	return len(fake.zRemRangeByScoreArgsForCall)
}

func (fake *FakeCmdable) ZRemRangeByScoreCalls(stub func(context.Context, string, string, string) *redisa.IntCmd) {
	fake.zRemRangeByScoreMutex.Lock()
	defer fake.zRemRangeByScoreMutex.Unlock()
	fake.ZRemRangeByScoreStub = stub
}

func (fake *FakeCmdable) ZRemRangeByScoreArgsForCall(i int) (context.Context, string, string, string) {
	fake.zRemRangeByScoreMutex.RLock()
	defer fake.zRemRangeByScoreMutex.RUnlock()
	argsForCall := fake.zRemRangeByScoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) ZRemRangeByScoreReturns(result1 *redisa.IntCmd) {
	fake.zRemRangeByScoreMutex.Lock()
	defer fake.zRemRangeByScoreMutex.Unlock()
	fake.ZRemRangeByScoreStub = nil
	fake.zRemRangeByScoreReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRemRangeByScoreReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zRemRangeByScoreMutex.Lock()
	defer fake.zRemRangeByScoreMutex.Unlock()
	fake.ZRemRangeByScoreStub = nil
	if fake.zRemRangeByScoreReturnsOnCall == nil {
		fake.zRemRangeByScoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zRemRangeByScoreReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRange(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.StringSliceCmd {
	fake.zRevRangeMutex.Lock()
	ret, specificReturn := fake.zRevRangeReturnsOnCall[len(fake.zRevRangeArgsForCall)]
	fake.zRevRangeArgsForCall = append(fake.zRevRangeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.ZRevRangeStub
	fakeReturns := fake.zRevRangeReturns
	fake.recordInvocation("ZRevRange", []interface{}{arg1, arg2, arg3, arg4})
	fake.zRevRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRevRangeCallCount() int {
	fake.zRevRangeMutex.RLock()
	defer fake.zRevRangeMutex.RUnlock()
	return len(fake.zRevRangeArgsForCall)
}

func (fake *FakeCmdable) ZRevRangeCalls(stub func(context.Context, string, int64, int64) *redisa.StringSliceCmd) {
	fake.zRevRangeMutex.Lock()
	defer fake.zRevRangeMutex.Unlock()
	fake.ZRevRangeStub = stub
}

func (fake *FakeCmdable) ZRevRangeArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.zRevRangeMutex.RLock()
	defer fake.zRevRangeMutex.RUnlock()
	argsForCall := fake.zRevRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) ZRevRangeReturns(result1 *redisa.StringSliceCmd) {
	fake.zRevRangeMutex.Lock()
	defer fake.zRevRangeMutex.Unlock()
	fake.ZRevRangeStub = nil
	fake.zRevRangeReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRangeReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.zRevRangeMutex.Lock()
	defer fake.zRevRangeMutex.Unlock()
	fake.ZRevRangeStub = nil
	if fake.zRevRangeReturnsOnCall == nil {
		fake.zRevRangeReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.zRevRangeReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRangeByLex(arg1 context.Context, arg2 string, arg3 *redisa.ZRangeBy) *redisa.StringSliceCmd {
	fake.zRevRangeByLexMutex.Lock()
	ret, specificReturn := fake.zRevRangeByLexReturnsOnCall[len(fake.zRevRangeByLexArgsForCall)]
	fake.zRevRangeByLexArgsForCall = append(fake.zRevRangeByLexArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZRangeBy
	}{arg1, arg2, arg3})
	stub := fake.ZRevRangeByLexStub
	fakeReturns := fake.zRevRangeByLexReturns
	fake.recordInvocation("ZRevRangeByLex", []interface{}{arg1, arg2, arg3})
	fake.zRevRangeByLexMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRevRangeByLexCallCount() int {
	fake.zRevRangeByLexMutex.RLock()
	defer fake.zRevRangeByLexMutex.RUnlock()
	return len(fake.zRevRangeByLexArgsForCall)
}

func (fake *FakeCmdable) ZRevRangeByLexCalls(stub func(context.Context, string, *redisa.ZRangeBy) *redisa.StringSliceCmd) {
	fake.zRevRangeByLexMutex.Lock()
	defer fake.zRevRangeByLexMutex.Unlock()
	fake.ZRevRangeByLexStub = stub
}

func (fake *FakeCmdable) ZRevRangeByLexArgsForCall(i int) (context.Context, string, *redisa.ZRangeBy) {
	fake.zRevRangeByLexMutex.RLock()
	defer fake.zRevRangeByLexMutex.RUnlock()
	argsForCall := fake.zRevRangeByLexArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRevRangeByLexReturns(result1 *redisa.StringSliceCmd) {
	fake.zRevRangeByLexMutex.Lock()
	defer fake.zRevRangeByLexMutex.Unlock()
	fake.ZRevRangeByLexStub = nil
	fake.zRevRangeByLexReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRangeByLexReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.zRevRangeByLexMutex.Lock()
	defer fake.zRevRangeByLexMutex.Unlock()
	fake.ZRevRangeByLexStub = nil
	if fake.zRevRangeByLexReturnsOnCall == nil {
		fake.zRevRangeByLexReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.zRevRangeByLexReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRangeByScore(arg1 context.Context, arg2 string, arg3 *redisa.ZRangeBy) *redisa.StringSliceCmd {
	fake.zRevRangeByScoreMutex.Lock()
	ret, specificReturn := fake.zRevRangeByScoreReturnsOnCall[len(fake.zRevRangeByScoreArgsForCall)]
	fake.zRevRangeByScoreArgsForCall = append(fake.zRevRangeByScoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZRangeBy
	}{arg1, arg2, arg3})
	stub := fake.ZRevRangeByScoreStub
	fakeReturns := fake.zRevRangeByScoreReturns
	fake.recordInvocation("ZRevRangeByScore", []interface{}{arg1, arg2, arg3})
	fake.zRevRangeByScoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRevRangeByScoreCallCount() int {
	fake.zRevRangeByScoreMutex.RLock()
	defer fake.zRevRangeByScoreMutex.RUnlock()
	return len(fake.zRevRangeByScoreArgsForCall)
}

func (fake *FakeCmdable) ZRevRangeByScoreCalls(stub func(context.Context, string, *redisa.ZRangeBy) *redisa.StringSliceCmd) {
	fake.zRevRangeByScoreMutex.Lock()
	defer fake.zRevRangeByScoreMutex.Unlock()
	fake.ZRevRangeByScoreStub = stub
}

func (fake *FakeCmdable) ZRevRangeByScoreArgsForCall(i int) (context.Context, string, *redisa.ZRangeBy) {
	fake.zRevRangeByScoreMutex.RLock()
	defer fake.zRevRangeByScoreMutex.RUnlock()
	argsForCall := fake.zRevRangeByScoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRevRangeByScoreReturns(result1 *redisa.StringSliceCmd) {
	fake.zRevRangeByScoreMutex.Lock()
	defer fake.zRevRangeByScoreMutex.Unlock()
	fake.ZRevRangeByScoreStub = nil
	fake.zRevRangeByScoreReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRangeByScoreReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.zRevRangeByScoreMutex.Lock()
	defer fake.zRevRangeByScoreMutex.Unlock()
	fake.ZRevRangeByScoreStub = nil
	if fake.zRevRangeByScoreReturnsOnCall == nil {
		fake.zRevRangeByScoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.zRevRangeByScoreReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRangeByScoreWithScores(arg1 context.Context, arg2 string, arg3 *redisa.ZRangeBy) *redisa.ZSliceCmd {
	fake.zRevRangeByScoreWithScoresMutex.Lock()
	ret, specificReturn := fake.zRevRangeByScoreWithScoresReturnsOnCall[len(fake.zRevRangeByScoreWithScoresArgsForCall)]
	fake.zRevRangeByScoreWithScoresArgsForCall = append(fake.zRevRangeByScoreWithScoresArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZRangeBy
	}{arg1, arg2, arg3})
	stub := fake.ZRevRangeByScoreWithScoresStub
	fakeReturns := fake.zRevRangeByScoreWithScoresReturns
	fake.recordInvocation("ZRevRangeByScoreWithScores", []interface{}{arg1, arg2, arg3})
	fake.zRevRangeByScoreWithScoresMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRevRangeByScoreWithScoresCallCount() int {
	fake.zRevRangeByScoreWithScoresMutex.RLock()
	defer fake.zRevRangeByScoreWithScoresMutex.RUnlock()
	return len(fake.zRevRangeByScoreWithScoresArgsForCall)
}

func (fake *FakeCmdable) ZRevRangeByScoreWithScoresCalls(stub func(context.Context, string, *redisa.ZRangeBy) *redisa.ZSliceCmd) {
	fake.zRevRangeByScoreWithScoresMutex.Lock()
	defer fake.zRevRangeByScoreWithScoresMutex.Unlock()
	fake.ZRevRangeByScoreWithScoresStub = stub
}

func (fake *FakeCmdable) ZRevRangeByScoreWithScoresArgsForCall(i int) (context.Context, string, *redisa.ZRangeBy) {
	fake.zRevRangeByScoreWithScoresMutex.RLock()
	defer fake.zRevRangeByScoreWithScoresMutex.RUnlock()
	argsForCall := fake.zRevRangeByScoreWithScoresArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRevRangeByScoreWithScoresReturns(result1 *redisa.ZSliceCmd) {
	fake.zRevRangeByScoreWithScoresMutex.Lock()
	defer fake.zRevRangeByScoreWithScoresMutex.Unlock()
	fake.ZRevRangeByScoreWithScoresStub = nil
	fake.zRevRangeByScoreWithScoresReturns = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRangeByScoreWithScoresReturnsOnCall(i int, result1 *redisa.ZSliceCmd) {
	fake.zRevRangeByScoreWithScoresMutex.Lock()
	defer fake.zRevRangeByScoreWithScoresMutex.Unlock()
	fake.ZRevRangeByScoreWithScoresStub = nil
	if fake.zRevRangeByScoreWithScoresReturnsOnCall == nil {
		fake.zRevRangeByScoreWithScoresReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceCmd
		})
	}
	fake.zRevRangeByScoreWithScoresReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRangeWithScores(arg1 context.Context, arg2 string, arg3 int64, arg4 int64) *redisa.ZSliceCmd {
	fake.zRevRangeWithScoresMutex.Lock()
	ret, specificReturn := fake.zRevRangeWithScoresReturnsOnCall[len(fake.zRevRangeWithScoresArgsForCall)]
	fake.zRevRangeWithScoresArgsForCall = append(fake.zRevRangeWithScoresArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int64
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.ZRevRangeWithScoresStub
	fakeReturns := fake.zRevRangeWithScoresReturns
	fake.recordInvocation("ZRevRangeWithScores", []interface{}{arg1, arg2, arg3, arg4})
	fake.zRevRangeWithScoresMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRevRangeWithScoresCallCount() int {
	fake.zRevRangeWithScoresMutex.RLock()
	defer fake.zRevRangeWithScoresMutex.RUnlock()
	return len(fake.zRevRangeWithScoresArgsForCall)
}

func (fake *FakeCmdable) ZRevRangeWithScoresCalls(stub func(context.Context, string, int64, int64) *redisa.ZSliceCmd) {
	fake.zRevRangeWithScoresMutex.Lock()
	defer fake.zRevRangeWithScoresMutex.Unlock()
	fake.ZRevRangeWithScoresStub = stub
}

func (fake *FakeCmdable) ZRevRangeWithScoresArgsForCall(i int) (context.Context, string, int64, int64) {
	fake.zRevRangeWithScoresMutex.RLock()
	defer fake.zRevRangeWithScoresMutex.RUnlock()
	argsForCall := fake.zRevRangeWithScoresArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCmdable) ZRevRangeWithScoresReturns(result1 *redisa.ZSliceCmd) {
	fake.zRevRangeWithScoresMutex.Lock()
	defer fake.zRevRangeWithScoresMutex.Unlock()
	fake.ZRevRangeWithScoresStub = nil
	fake.zRevRangeWithScoresReturns = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRangeWithScoresReturnsOnCall(i int, result1 *redisa.ZSliceCmd) {
	fake.zRevRangeWithScoresMutex.Lock()
	defer fake.zRevRangeWithScoresMutex.Unlock()
	fake.ZRevRangeWithScoresStub = nil
	if fake.zRevRangeWithScoresReturnsOnCall == nil {
		fake.zRevRangeWithScoresReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceCmd
		})
	}
	fake.zRevRangeWithScoresReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRank(arg1 context.Context, arg2 string, arg3 string) *redisa.IntCmd {
	fake.zRevRankMutex.Lock()
	ret, specificReturn := fake.zRevRankReturnsOnCall[len(fake.zRevRankArgsForCall)]
	fake.zRevRankArgsForCall = append(fake.zRevRankArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ZRevRankStub
	fakeReturns := fake.zRevRankReturns
	fake.recordInvocation("ZRevRank", []interface{}{arg1, arg2, arg3})
	fake.zRevRankMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRevRankCallCount() int {
	fake.zRevRankMutex.RLock()
	defer fake.zRevRankMutex.RUnlock()
	return len(fake.zRevRankArgsForCall)
}

func (fake *FakeCmdable) ZRevRankCalls(stub func(context.Context, string, string) *redisa.IntCmd) {
	fake.zRevRankMutex.Lock()
	defer fake.zRevRankMutex.Unlock()
	fake.ZRevRankStub = stub
}

func (fake *FakeCmdable) ZRevRankArgsForCall(i int) (context.Context, string, string) {
	fake.zRevRankMutex.RLock()
	defer fake.zRevRankMutex.RUnlock()
	argsForCall := fake.zRevRankArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRevRankReturns(result1 *redisa.IntCmd) {
	fake.zRevRankMutex.Lock()
	defer fake.zRevRankMutex.Unlock()
	fake.ZRevRankStub = nil
	fake.zRevRankReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRankReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zRevRankMutex.Lock()
	defer fake.zRevRankMutex.Unlock()
	fake.ZRevRankStub = nil
	if fake.zRevRankReturnsOnCall == nil {
		fake.zRevRankReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zRevRankReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRankWithScore(arg1 context.Context, arg2 string, arg3 string) *redisa.RankWithScoreCmd {
	fake.zRevRankWithScoreMutex.Lock()
	ret, specificReturn := fake.zRevRankWithScoreReturnsOnCall[len(fake.zRevRankWithScoreArgsForCall)]
	fake.zRevRankWithScoreArgsForCall = append(fake.zRevRankWithScoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ZRevRankWithScoreStub
	fakeReturns := fake.zRevRankWithScoreReturns
	fake.recordInvocation("ZRevRankWithScore", []interface{}{arg1, arg2, arg3})
	fake.zRevRankWithScoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZRevRankWithScoreCallCount() int {
	fake.zRevRankWithScoreMutex.RLock()
	defer fake.zRevRankWithScoreMutex.RUnlock()
	return len(fake.zRevRankWithScoreArgsForCall)
}

func (fake *FakeCmdable) ZRevRankWithScoreCalls(stub func(context.Context, string, string) *redisa.RankWithScoreCmd) {
	fake.zRevRankWithScoreMutex.Lock()
	defer fake.zRevRankWithScoreMutex.Unlock()
	fake.ZRevRankWithScoreStub = stub
}

func (fake *FakeCmdable) ZRevRankWithScoreArgsForCall(i int) (context.Context, string, string) {
	fake.zRevRankWithScoreMutex.RLock()
	defer fake.zRevRankWithScoreMutex.RUnlock()
	argsForCall := fake.zRevRankWithScoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZRevRankWithScoreReturns(result1 *redisa.RankWithScoreCmd) {
	fake.zRevRankWithScoreMutex.Lock()
	defer fake.zRevRankWithScoreMutex.Unlock()
	fake.ZRevRankWithScoreStub = nil
	fake.zRevRankWithScoreReturns = struct {
		result1 *redisa.RankWithScoreCmd
	}{result1}
}

func (fake *FakeCmdable) ZRevRankWithScoreReturnsOnCall(i int, result1 *redisa.RankWithScoreCmd) {
	fake.zRevRankWithScoreMutex.Lock()
	defer fake.zRevRankWithScoreMutex.Unlock()
	fake.ZRevRankWithScoreStub = nil
	if fake.zRevRankWithScoreReturnsOnCall == nil {
		fake.zRevRankWithScoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.RankWithScoreCmd
		})
	}
	fake.zRevRankWithScoreReturnsOnCall[i] = struct {
		result1 *redisa.RankWithScoreCmd
	}{result1}
}

func (fake *FakeCmdable) ZScan(arg1 context.Context, arg2 string, arg3 uint64, arg4 string, arg5 int64) *redisa.ScanCmd {
	fake.zScanMutex.Lock()
	ret, specificReturn := fake.zScanReturnsOnCall[len(fake.zScanArgsForCall)]
	fake.zScanArgsForCall = append(fake.zScanArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 uint64
		arg4 string
		arg5 int64
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ZScanStub
	fakeReturns := fake.zScanReturns
	fake.recordInvocation("ZScan", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.zScanMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZScanCallCount() int {
	fake.zScanMutex.RLock()
	defer fake.zScanMutex.RUnlock()
	return len(fake.zScanArgsForCall)
}

func (fake *FakeCmdable) ZScanCalls(stub func(context.Context, string, uint64, string, int64) *redisa.ScanCmd) {
	fake.zScanMutex.Lock()
	defer fake.zScanMutex.Unlock()
	fake.ZScanStub = stub
}

func (fake *FakeCmdable) ZScanArgsForCall(i int) (context.Context, string, uint64, string, int64) {
	fake.zScanMutex.RLock()
	defer fake.zScanMutex.RUnlock()
	argsForCall := fake.zScanArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeCmdable) ZScanReturns(result1 *redisa.ScanCmd) {
	fake.zScanMutex.Lock()
	defer fake.zScanMutex.Unlock()
	fake.ZScanStub = nil
	fake.zScanReturns = struct {
		result1 *redisa.ScanCmd
	}{result1}
}

func (fake *FakeCmdable) ZScanReturnsOnCall(i int, result1 *redisa.ScanCmd) {
	fake.zScanMutex.Lock()
	defer fake.zScanMutex.Unlock()
	fake.ZScanStub = nil
	if fake.zScanReturnsOnCall == nil {
		fake.zScanReturnsOnCall = make(map[int]struct {
			result1 *redisa.ScanCmd
		})
	}
	fake.zScanReturnsOnCall[i] = struct {
		result1 *redisa.ScanCmd
	}{result1}
}

func (fake *FakeCmdable) ZScore(arg1 context.Context, arg2 string, arg3 string) *redisa.FloatCmd {
	fake.zScoreMutex.Lock()
	ret, specificReturn := fake.zScoreReturnsOnCall[len(fake.zScoreArgsForCall)]
	fake.zScoreArgsForCall = append(fake.zScoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ZScoreStub
	fakeReturns := fake.zScoreReturns
	fake.recordInvocation("ZScore", []interface{}{arg1, arg2, arg3})
	fake.zScoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZScoreCallCount() int {
	fake.zScoreMutex.RLock()
	defer fake.zScoreMutex.RUnlock()
	return len(fake.zScoreArgsForCall)
}

func (fake *FakeCmdable) ZScoreCalls(stub func(context.Context, string, string) *redisa.FloatCmd) {
	fake.zScoreMutex.Lock()
	defer fake.zScoreMutex.Unlock()
	fake.ZScoreStub = stub
}

func (fake *FakeCmdable) ZScoreArgsForCall(i int) (context.Context, string, string) {
	fake.zScoreMutex.RLock()
	defer fake.zScoreMutex.RUnlock()
	argsForCall := fake.zScoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZScoreReturns(result1 *redisa.FloatCmd) {
	fake.zScoreMutex.Lock()
	defer fake.zScoreMutex.Unlock()
	fake.ZScoreStub = nil
	fake.zScoreReturns = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) ZScoreReturnsOnCall(i int, result1 *redisa.FloatCmd) {
	fake.zScoreMutex.Lock()
	defer fake.zScoreMutex.Unlock()
	fake.ZScoreStub = nil
	if fake.zScoreReturnsOnCall == nil {
		fake.zScoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.FloatCmd
		})
	}
	fake.zScoreReturnsOnCall[i] = struct {
		result1 *redisa.FloatCmd
	}{result1}
}

func (fake *FakeCmdable) ZUnion(arg1 context.Context, arg2 redisa.ZStore) *redisa.StringSliceCmd {
	fake.zUnionMutex.Lock()
	ret, specificReturn := fake.zUnionReturnsOnCall[len(fake.zUnionArgsForCall)]
	fake.zUnionArgsForCall = append(fake.zUnionArgsForCall, struct {
		arg1 context.Context
		arg2 redisa.ZStore
	}{arg1, arg2})
	stub := fake.ZUnionStub
	fakeReturns := fake.zUnionReturns
	fake.recordInvocation("ZUnion", []interface{}{arg1, arg2})
	fake.zUnionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZUnionCallCount() int {
	fake.zUnionMutex.RLock()
	defer fake.zUnionMutex.RUnlock()
	return len(fake.zUnionArgsForCall)
}

func (fake *FakeCmdable) ZUnionCalls(stub func(context.Context, redisa.ZStore) *redisa.StringSliceCmd) {
	fake.zUnionMutex.Lock()
	defer fake.zUnionMutex.Unlock()
	fake.ZUnionStub = stub
}

func (fake *FakeCmdable) ZUnionArgsForCall(i int) (context.Context, redisa.ZStore) {
	fake.zUnionMutex.RLock()
	defer fake.zUnionMutex.RUnlock()
	argsForCall := fake.zUnionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ZUnionReturns(result1 *redisa.StringSliceCmd) {
	fake.zUnionMutex.Lock()
	defer fake.zUnionMutex.Unlock()
	fake.ZUnionStub = nil
	fake.zUnionReturns = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZUnionReturnsOnCall(i int, result1 *redisa.StringSliceCmd) {
	fake.zUnionMutex.Lock()
	defer fake.zUnionMutex.Unlock()
	fake.ZUnionStub = nil
	if fake.zUnionReturnsOnCall == nil {
		fake.zUnionReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringSliceCmd
		})
	}
	fake.zUnionReturnsOnCall[i] = struct {
		result1 *redisa.StringSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZUnionStore(arg1 context.Context, arg2 string, arg3 *redisa.ZStore) *redisa.IntCmd {
	fake.zUnionStoreMutex.Lock()
	ret, specificReturn := fake.zUnionStoreReturnsOnCall[len(fake.zUnionStoreArgsForCall)]
	fake.zUnionStoreArgsForCall = append(fake.zUnionStoreArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *redisa.ZStore
	}{arg1, arg2, arg3})
	stub := fake.ZUnionStoreStub
	fakeReturns := fake.zUnionStoreReturns
	fake.recordInvocation("ZUnionStore", []interface{}{arg1, arg2, arg3})
	fake.zUnionStoreMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZUnionStoreCallCount() int {
	fake.zUnionStoreMutex.RLock()
	defer fake.zUnionStoreMutex.RUnlock()
	return len(fake.zUnionStoreArgsForCall)
}

func (fake *FakeCmdable) ZUnionStoreCalls(stub func(context.Context, string, *redisa.ZStore) *redisa.IntCmd) {
	fake.zUnionStoreMutex.Lock()
	defer fake.zUnionStoreMutex.Unlock()
	fake.ZUnionStoreStub = stub
}

func (fake *FakeCmdable) ZUnionStoreArgsForCall(i int) (context.Context, string, *redisa.ZStore) {
	fake.zUnionStoreMutex.RLock()
	defer fake.zUnionStoreMutex.RUnlock()
	argsForCall := fake.zUnionStoreArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCmdable) ZUnionStoreReturns(result1 *redisa.IntCmd) {
	fake.zUnionStoreMutex.Lock()
	defer fake.zUnionStoreMutex.Unlock()
	fake.ZUnionStoreStub = nil
	fake.zUnionStoreReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZUnionStoreReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.zUnionStoreMutex.Lock()
	defer fake.zUnionStoreMutex.Unlock()
	fake.ZUnionStoreStub = nil
	if fake.zUnionStoreReturnsOnCall == nil {
		fake.zUnionStoreReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.zUnionStoreReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeCmdable) ZUnionWithScores(arg1 context.Context, arg2 redisa.ZStore) *redisa.ZSliceCmd {
	fake.zUnionWithScoresMutex.Lock()
	ret, specificReturn := fake.zUnionWithScoresReturnsOnCall[len(fake.zUnionWithScoresArgsForCall)]
	fake.zUnionWithScoresArgsForCall = append(fake.zUnionWithScoresArgsForCall, struct {
		arg1 context.Context
		arg2 redisa.ZStore
	}{arg1, arg2})
	stub := fake.ZUnionWithScoresStub
	fakeReturns := fake.zUnionWithScoresReturns
	fake.recordInvocation("ZUnionWithScores", []interface{}{arg1, arg2})
	fake.zUnionWithScoresMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdable) ZUnionWithScoresCallCount() int {
	fake.zUnionWithScoresMutex.RLock()
	defer fake.zUnionWithScoresMutex.RUnlock()
	return len(fake.zUnionWithScoresArgsForCall)
}

func (fake *FakeCmdable) ZUnionWithScoresCalls(stub func(context.Context, redisa.ZStore) *redisa.ZSliceCmd) {
	fake.zUnionWithScoresMutex.Lock()
	defer fake.zUnionWithScoresMutex.Unlock()
	fake.ZUnionWithScoresStub = stub
}

func (fake *FakeCmdable) ZUnionWithScoresArgsForCall(i int) (context.Context, redisa.ZStore) {
	fake.zUnionWithScoresMutex.RLock()
	defer fake.zUnionWithScoresMutex.RUnlock()
	argsForCall := fake.zUnionWithScoresArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdable) ZUnionWithScoresReturns(result1 *redisa.ZSliceCmd) {
	fake.zUnionWithScoresMutex.Lock()
	defer fake.zUnionWithScoresMutex.Unlock()
	fake.ZUnionWithScoresStub = nil
	fake.zUnionWithScoresReturns = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) ZUnionWithScoresReturnsOnCall(i int, result1 *redisa.ZSliceCmd) {
	fake.zUnionWithScoresMutex.Lock()
	defer fake.zUnionWithScoresMutex.Unlock()
	fake.ZUnionWithScoresStub = nil
	if fake.zUnionWithScoresReturnsOnCall == nil {
		fake.zUnionWithScoresReturnsOnCall = make(map[int]struct {
			result1 *redisa.ZSliceCmd
		})
	}
	fake.zUnionWithScoresReturnsOnCall[i] = struct {
		result1 *redisa.ZSliceCmd
	}{result1}
}

func (fake *FakeCmdable) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.aCLDryRunMutex.RLock()
	defer fake.aCLDryRunMutex.RUnlock()
	fake.aCLLogMutex.RLock()
	defer fake.aCLLogMutex.RUnlock()
	fake.aCLLogResetMutex.RLock()
	defer fake.aCLLogResetMutex.RUnlock()
	fake.appendMutex.RLock()
	defer fake.appendMutex.RUnlock()
	fake.bFAddMutex.RLock()
	defer fake.bFAddMutex.RUnlock()
	fake.bFCardMutex.RLock()
	defer fake.bFCardMutex.RUnlock()
	fake.bFExistsMutex.RLock()
	defer fake.bFExistsMutex.RUnlock()
	fake.bFInfoMutex.RLock()
	defer fake.bFInfoMutex.RUnlock()
	fake.bFInfoArgMutex.RLock()
	defer fake.bFInfoArgMutex.RUnlock()
	fake.bFInfoCapacityMutex.RLock()
	defer fake.bFInfoCapacityMutex.RUnlock()
	fake.bFInfoExpansionMutex.RLock()
	defer fake.bFInfoExpansionMutex.RUnlock()
	fake.bFInfoFiltersMutex.RLock()
	defer fake.bFInfoFiltersMutex.RUnlock()
	fake.bFInfoItemsMutex.RLock()
	defer fake.bFInfoItemsMutex.RUnlock()
	fake.bFInfoSizeMutex.RLock()
	defer fake.bFInfoSizeMutex.RUnlock()
	fake.bFInsertMutex.RLock()
	defer fake.bFInsertMutex.RUnlock()
	fake.bFLoadChunkMutex.RLock()
	defer fake.bFLoadChunkMutex.RUnlock()
	fake.bFMAddMutex.RLock()
	defer fake.bFMAddMutex.RUnlock()
	fake.bFMExistsMutex.RLock()
	defer fake.bFMExistsMutex.RUnlock()
	fake.bFReserveMutex.RLock()
	defer fake.bFReserveMutex.RUnlock()
	fake.bFReserveExpansionMutex.RLock()
	defer fake.bFReserveExpansionMutex.RUnlock()
	fake.bFReserveNonScalingMutex.RLock()
	defer fake.bFReserveNonScalingMutex.RUnlock()
	fake.bFReserveWithArgsMutex.RLock()
	defer fake.bFReserveWithArgsMutex.RUnlock()
	fake.bFScanDumpMutex.RLock()
	defer fake.bFScanDumpMutex.RUnlock()
	fake.bLMPopMutex.RLock()
	defer fake.bLMPopMutex.RUnlock()
	fake.bLMoveMutex.RLock()
	defer fake.bLMoveMutex.RUnlock()
	fake.bLPopMutex.RLock()
	defer fake.bLPopMutex.RUnlock()
	fake.bRPopMutex.RLock()
	defer fake.bRPopMutex.RUnlock()
	fake.bRPopLPushMutex.RLock()
	defer fake.bRPopLPushMutex.RUnlock()
	fake.bZMPopMutex.RLock()
	defer fake.bZMPopMutex.RUnlock()
	fake.bZPopMaxMutex.RLock()
	defer fake.bZPopMaxMutex.RUnlock()
	fake.bZPopMinMutex.RLock()
	defer fake.bZPopMinMutex.RUnlock()
	fake.bgRewriteAOFMutex.RLock()
	defer fake.bgRewriteAOFMutex.RUnlock()
	fake.bgSaveMutex.RLock()
	defer fake.bgSaveMutex.RUnlock()
	fake.bitCountMutex.RLock()
	defer fake.bitCountMutex.RUnlock()
	fake.bitFieldMutex.RLock()
	defer fake.bitFieldMutex.RUnlock()
	fake.bitFieldROMutex.RLock()
	defer fake.bitFieldROMutex.RUnlock()
	fake.bitOpAndMutex.RLock()
	defer fake.bitOpAndMutex.RUnlock()
	fake.bitOpNotMutex.RLock()
	defer fake.bitOpNotMutex.RUnlock()
	fake.bitOpOrMutex.RLock()
	defer fake.bitOpOrMutex.RUnlock()
	fake.bitOpXorMutex.RLock()
	defer fake.bitOpXorMutex.RUnlock()
	fake.bitPosMutex.RLock()
	defer fake.bitPosMutex.RUnlock()
	fake.bitPosSpanMutex.RLock()
	defer fake.bitPosSpanMutex.RUnlock()
	fake.cFAddMutex.RLock()
	defer fake.cFAddMutex.RUnlock()
	fake.cFAddNXMutex.RLock()
	defer fake.cFAddNXMutex.RUnlock()
	fake.cFCountMutex.RLock()
	defer fake.cFCountMutex.RUnlock()
	fake.cFDelMutex.RLock()
	defer fake.cFDelMutex.RUnlock()
	fake.cFExistsMutex.RLock()
	defer fake.cFExistsMutex.RUnlock()
	fake.cFInfoMutex.RLock()
	defer fake.cFInfoMutex.RUnlock()
	fake.cFInsertMutex.RLock()
	defer fake.cFInsertMutex.RUnlock()
	fake.cFInsertNXMutex.RLock()
	defer fake.cFInsertNXMutex.RUnlock()
	fake.cFLoadChunkMutex.RLock()
	defer fake.cFLoadChunkMutex.RUnlock()
	fake.cFMExistsMutex.RLock()
	defer fake.cFMExistsMutex.RUnlock()
	fake.cFReserveMutex.RLock()
	defer fake.cFReserveMutex.RUnlock()
	fake.cFReserveBucketSizeMutex.RLock()
	defer fake.cFReserveBucketSizeMutex.RUnlock()
	fake.cFReserveExpansionMutex.RLock()
	defer fake.cFReserveExpansionMutex.RUnlock()
	fake.cFReserveMaxIterationsMutex.RLock()
	defer fake.cFReserveMaxIterationsMutex.RUnlock()
	fake.cFReserveWithArgsMutex.RLock()
	defer fake.cFReserveWithArgsMutex.RUnlock()
	fake.cFScanDumpMutex.RLock()
	defer fake.cFScanDumpMutex.RUnlock()
	fake.cMSIncrByMutex.RLock()
	defer fake.cMSIncrByMutex.RUnlock()
	fake.cMSInfoMutex.RLock()
	defer fake.cMSInfoMutex.RUnlock()
	fake.cMSInitByDimMutex.RLock()
	defer fake.cMSInitByDimMutex.RUnlock()
	fake.cMSInitByProbMutex.RLock()
	defer fake.cMSInitByProbMutex.RUnlock()
	fake.cMSMergeMutex.RLock()
	defer fake.cMSMergeMutex.RUnlock()
	fake.cMSMergeWithWeightMutex.RLock()
	defer fake.cMSMergeWithWeightMutex.RUnlock()
	fake.cMSQueryMutex.RLock()
	defer fake.cMSQueryMutex.RUnlock()
	fake.clientGetNameMutex.RLock()
	defer fake.clientGetNameMutex.RUnlock()
	fake.clientIDMutex.RLock()
	defer fake.clientIDMutex.RUnlock()
	fake.clientInfoMutex.RLock()
	defer fake.clientInfoMutex.RUnlock()
	fake.clientKillMutex.RLock()
	defer fake.clientKillMutex.RUnlock()
	fake.clientKillByFilterMutex.RLock()
	defer fake.clientKillByFilterMutex.RUnlock()
	fake.clientListMutex.RLock()
	defer fake.clientListMutex.RUnlock()
	fake.clientPauseMutex.RLock()
	defer fake.clientPauseMutex.RUnlock()
	fake.clientUnblockMutex.RLock()
	defer fake.clientUnblockMutex.RUnlock()
	fake.clientUnblockWithErrorMutex.RLock()
	defer fake.clientUnblockWithErrorMutex.RUnlock()
	fake.clientUnpauseMutex.RLock()
	defer fake.clientUnpauseMutex.RUnlock()
	fake.clusterAddSlotsMutex.RLock()
	defer fake.clusterAddSlotsMutex.RUnlock()
	fake.clusterAddSlotsRangeMutex.RLock()
	defer fake.clusterAddSlotsRangeMutex.RUnlock()
	fake.clusterCountFailureReportsMutex.RLock()
	defer fake.clusterCountFailureReportsMutex.RUnlock()
	fake.clusterCountKeysInSlotMutex.RLock()
	defer fake.clusterCountKeysInSlotMutex.RUnlock()
	fake.clusterDelSlotsMutex.RLock()
	defer fake.clusterDelSlotsMutex.RUnlock()
	fake.clusterDelSlotsRangeMutex.RLock()
	defer fake.clusterDelSlotsRangeMutex.RUnlock()
	fake.clusterFailoverMutex.RLock()
	defer fake.clusterFailoverMutex.RUnlock()
	fake.clusterForgetMutex.RLock()
	defer fake.clusterForgetMutex.RUnlock()
	fake.clusterGetKeysInSlotMutex.RLock()
	defer fake.clusterGetKeysInSlotMutex.RUnlock()
	fake.clusterInfoMutex.RLock()
	defer fake.clusterInfoMutex.RUnlock()
	fake.clusterKeySlotMutex.RLock()
	defer fake.clusterKeySlotMutex.RUnlock()
	fake.clusterLinksMutex.RLock()
	defer fake.clusterLinksMutex.RUnlock()
	fake.clusterMeetMutex.RLock()
	defer fake.clusterMeetMutex.RUnlock()
	fake.clusterMyShardIDMutex.RLock()
	defer fake.clusterMyShardIDMutex.RUnlock()
	fake.clusterNodesMutex.RLock()
	defer fake.clusterNodesMutex.RUnlock()
	fake.clusterReplicateMutex.RLock()
	defer fake.clusterReplicateMutex.RUnlock()
	fake.clusterResetHardMutex.RLock()
	defer fake.clusterResetHardMutex.RUnlock()
	fake.clusterResetSoftMutex.RLock()
	defer fake.clusterResetSoftMutex.RUnlock()
	fake.clusterSaveConfigMutex.RLock()
	defer fake.clusterSaveConfigMutex.RUnlock()
	fake.clusterShardsMutex.RLock()
	defer fake.clusterShardsMutex.RUnlock()
	fake.clusterSlavesMutex.RLock()
	defer fake.clusterSlavesMutex.RUnlock()
	fake.clusterSlotsMutex.RLock()
	defer fake.clusterSlotsMutex.RUnlock()
	fake.commandMutex.RLock()
	defer fake.commandMutex.RUnlock()
	fake.commandGetKeysMutex.RLock()
	defer fake.commandGetKeysMutex.RUnlock()
	fake.commandGetKeysAndFlagsMutex.RLock()
	defer fake.commandGetKeysAndFlagsMutex.RUnlock()
	fake.commandListMutex.RLock()
	defer fake.commandListMutex.RUnlock()
	fake.configGetMutex.RLock()
	defer fake.configGetMutex.RUnlock()
	fake.configResetStatMutex.RLock()
	defer fake.configResetStatMutex.RUnlock()
	fake.configRewriteMutex.RLock()
	defer fake.configRewriteMutex.RUnlock()
	fake.configSetMutex.RLock()
	defer fake.configSetMutex.RUnlock()
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	fake.dBSizeMutex.RLock()
	defer fake.dBSizeMutex.RUnlock()
	fake.debugObjectMutex.RLock()
	defer fake.debugObjectMutex.RUnlock()
	fake.decrMutex.RLock()
	defer fake.decrMutex.RUnlock()
	fake.decrByMutex.RLock()
	defer fake.decrByMutex.RUnlock()
	fake.delMutex.RLock()
	defer fake.delMutex.RUnlock()
	fake.dumpMutex.RLock()
	defer fake.dumpMutex.RUnlock()
	fake.echoMutex.RLock()
	defer fake.echoMutex.RUnlock()
	fake.evalMutex.RLock()
	defer fake.evalMutex.RUnlock()
	fake.evalROMutex.RLock()
	defer fake.evalROMutex.RUnlock()
	fake.evalShaMutex.RLock()
	defer fake.evalShaMutex.RUnlock()
	fake.evalShaROMutex.RLock()
	defer fake.evalShaROMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	fake.expireMutex.RLock()
	defer fake.expireMutex.RUnlock()
	fake.expireAtMutex.RLock()
	defer fake.expireAtMutex.RUnlock()
	fake.expireGTMutex.RLock()
	defer fake.expireGTMutex.RUnlock()
	fake.expireLTMutex.RLock()
	defer fake.expireLTMutex.RUnlock()
	fake.expireNXMutex.RLock()
	defer fake.expireNXMutex.RUnlock()
	fake.expireTimeMutex.RLock()
	defer fake.expireTimeMutex.RUnlock()
	fake.expireXXMutex.RLock()
	defer fake.expireXXMutex.RUnlock()
	fake.fCallMutex.RLock()
	defer fake.fCallMutex.RUnlock()
	fake.fCallROMutex.RLock()
	defer fake.fCallROMutex.RUnlock()
	fake.fCallRoMutex.RLock()
	defer fake.fCallRoMutex.RUnlock()
	fake.fTAggregateMutex.RLock()
	defer fake.fTAggregateMutex.RUnlock()
	fake.fTAggregateWithArgsMutex.RLock()
	defer fake.fTAggregateWithArgsMutex.RUnlock()
	fake.fTAliasAddMutex.RLock()
	defer fake.fTAliasAddMutex.RUnlock()
	fake.fTAliasDelMutex.RLock()
	defer fake.fTAliasDelMutex.RUnlock()
	fake.fTAliasUpdateMutex.RLock()
	defer fake.fTAliasUpdateMutex.RUnlock()
	fake.fTAlterMutex.RLock()
	defer fake.fTAlterMutex.RUnlock()
	fake.fTConfigGetMutex.RLock()
	defer fake.fTConfigGetMutex.RUnlock()
	fake.fTConfigSetMutex.RLock()
	defer fake.fTConfigSetMutex.RUnlock()
	fake.fTCreateMutex.RLock()
	defer fake.fTCreateMutex.RUnlock()
	fake.fTCursorDelMutex.RLock()
	defer fake.fTCursorDelMutex.RUnlock()
	fake.fTCursorReadMutex.RLock()
	defer fake.fTCursorReadMutex.RUnlock()
	fake.fTDictAddMutex.RLock()
	defer fake.fTDictAddMutex.RUnlock()
	fake.fTDictDelMutex.RLock()
	defer fake.fTDictDelMutex.RUnlock()
	fake.fTDictDumpMutex.RLock()
	defer fake.fTDictDumpMutex.RUnlock()
	fake.fTDropIndexMutex.RLock()
	defer fake.fTDropIndexMutex.RUnlock()
	fake.fTDropIndexWithArgsMutex.RLock()
	defer fake.fTDropIndexWithArgsMutex.RUnlock()
	fake.fTExplainMutex.RLock()
	defer fake.fTExplainMutex.RUnlock()
	fake.fTExplainWithArgsMutex.RLock()
	defer fake.fTExplainWithArgsMutex.RUnlock()
	fake.fTInfoMutex.RLock()
	defer fake.fTInfoMutex.RUnlock()
	fake.fTSearchMutex.RLock()
	defer fake.fTSearchMutex.RUnlock()
	fake.fTSearchWithArgsMutex.RLock()
	defer fake.fTSearchWithArgsMutex.RUnlock()
	fake.fTSpellCheckMutex.RLock()
	defer fake.fTSpellCheckMutex.RUnlock()
	fake.fTSpellCheckWithArgsMutex.RLock()
	defer fake.fTSpellCheckWithArgsMutex.RUnlock()
	fake.fTSynDumpMutex.RLock()
	defer fake.fTSynDumpMutex.RUnlock()
	fake.fTSynUpdateMutex.RLock()
	defer fake.fTSynUpdateMutex.RUnlock()
	fake.fTSynUpdateWithArgsMutex.RLock()
	defer fake.fTSynUpdateWithArgsMutex.RUnlock()
	fake.fTTagValsMutex.RLock()
	defer fake.fTTagValsMutex.RUnlock()
	fake.fT_ListMutex.RLock()
	defer fake.fT_ListMutex.RUnlock()
	fake.flushAllMutex.RLock()
	defer fake.flushAllMutex.RUnlock()
	fake.flushAllAsyncMutex.RLock()
	defer fake.flushAllAsyncMutex.RUnlock()
	fake.flushDBMutex.RLock()
	defer fake.flushDBMutex.RUnlock()
	fake.flushDBAsyncMutex.RLock()
	defer fake.flushDBAsyncMutex.RUnlock()
	fake.functionDeleteMutex.RLock()
	defer fake.functionDeleteMutex.RUnlock()
	fake.functionDumpMutex.RLock()
	defer fake.functionDumpMutex.RUnlock()
	fake.functionFlushMutex.RLock()
	defer fake.functionFlushMutex.RUnlock()
	fake.functionFlushAsyncMutex.RLock()
	defer fake.functionFlushAsyncMutex.RUnlock()
	fake.functionKillMutex.RLock()
	defer fake.functionKillMutex.RUnlock()
	fake.functionListMutex.RLock()
	defer fake.functionListMutex.RUnlock()
	fake.functionLoadMutex.RLock()
	defer fake.functionLoadMutex.RUnlock()
	fake.functionLoadReplaceMutex.RLock()
	defer fake.functionLoadReplaceMutex.RUnlock()
	fake.functionRestoreMutex.RLock()
	defer fake.functionRestoreMutex.RUnlock()
	fake.functionStatsMutex.RLock()
	defer fake.functionStatsMutex.RUnlock()
	fake.geoAddMutex.RLock()
	defer fake.geoAddMutex.RUnlock()
	fake.geoDistMutex.RLock()
	defer fake.geoDistMutex.RUnlock()
	fake.geoHashMutex.RLock()
	defer fake.geoHashMutex.RUnlock()
	fake.geoPosMutex.RLock()
	defer fake.geoPosMutex.RUnlock()
	fake.geoRadiusMutex.RLock()
	defer fake.geoRadiusMutex.RUnlock()
	fake.geoRadiusByMemberMutex.RLock()
	defer fake.geoRadiusByMemberMutex.RUnlock()
	fake.geoRadiusByMemberStoreMutex.RLock()
	defer fake.geoRadiusByMemberStoreMutex.RUnlock()
	fake.geoRadiusStoreMutex.RLock()
	defer fake.geoRadiusStoreMutex.RUnlock()
	fake.geoSearchMutex.RLock()
	defer fake.geoSearchMutex.RUnlock()
	fake.geoSearchLocationMutex.RLock()
	defer fake.geoSearchLocationMutex.RUnlock()
	fake.geoSearchStoreMutex.RLock()
	defer fake.geoSearchStoreMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getBitMutex.RLock()
	defer fake.getBitMutex.RUnlock()
	fake.getDelMutex.RLock()
	defer fake.getDelMutex.RUnlock()
	fake.getExMutex.RLock()
	defer fake.getExMutex.RUnlock()
	fake.getRangeMutex.RLock()
	defer fake.getRangeMutex.RUnlock()
	fake.getSetMutex.RLock()
	defer fake.getSetMutex.RUnlock()
	fake.hDelMutex.RLock()
	defer fake.hDelMutex.RUnlock()
	fake.hExistsMutex.RLock()
	defer fake.hExistsMutex.RUnlock()
	fake.hExpireMutex.RLock()
	defer fake.hExpireMutex.RUnlock()
	fake.hExpireAtMutex.RLock()
	defer fake.hExpireAtMutex.RUnlock()
	fake.hExpireAtWithArgsMutex.RLock()
	defer fake.hExpireAtWithArgsMutex.RUnlock()
	fake.hExpireTimeMutex.RLock()
	defer fake.hExpireTimeMutex.RUnlock()
	fake.hExpireWithArgsMutex.RLock()
	defer fake.hExpireWithArgsMutex.RUnlock()
	fake.hGetMutex.RLock()
	defer fake.hGetMutex.RUnlock()
	fake.hGetAllMutex.RLock()
	defer fake.hGetAllMutex.RUnlock()
	fake.hIncrByMutex.RLock()
	defer fake.hIncrByMutex.RUnlock()
	fake.hIncrByFloatMutex.RLock()
	defer fake.hIncrByFloatMutex.RUnlock()
	fake.hKeysMutex.RLock()
	defer fake.hKeysMutex.RUnlock()
	fake.hLenMutex.RLock()
	defer fake.hLenMutex.RUnlock()
	fake.hMGetMutex.RLock()
	defer fake.hMGetMutex.RUnlock()
	fake.hMSetMutex.RLock()
	defer fake.hMSetMutex.RUnlock()
	fake.hPExpireMutex.RLock()
	defer fake.hPExpireMutex.RUnlock()
	fake.hPExpireAtMutex.RLock()
	defer fake.hPExpireAtMutex.RUnlock()
	fake.hPExpireAtWithArgsMutex.RLock()
	defer fake.hPExpireAtWithArgsMutex.RUnlock()
	fake.hPExpireTimeMutex.RLock()
	defer fake.hPExpireTimeMutex.RUnlock()
	fake.hPExpireWithArgsMutex.RLock()
	defer fake.hPExpireWithArgsMutex.RUnlock()
	fake.hPTTLMutex.RLock()
	defer fake.hPTTLMutex.RUnlock()
	fake.hPersistMutex.RLock()
	defer fake.hPersistMutex.RUnlock()
	fake.hRandFieldMutex.RLock()
	defer fake.hRandFieldMutex.RUnlock()
	fake.hRandFieldWithValuesMutex.RLock()
	defer fake.hRandFieldWithValuesMutex.RUnlock()
	fake.hScanMutex.RLock()
	defer fake.hScanMutex.RUnlock()
	fake.hScanNoValuesMutex.RLock()
	defer fake.hScanNoValuesMutex.RUnlock()
	fake.hSetMutex.RLock()
	defer fake.hSetMutex.RUnlock()
	fake.hSetNXMutex.RLock()
	defer fake.hSetNXMutex.RUnlock()
	fake.hTTLMutex.RLock()
	defer fake.hTTLMutex.RUnlock()
	fake.hValsMutex.RLock()
	defer fake.hValsMutex.RUnlock()
	fake.incrMutex.RLock()
	defer fake.incrMutex.RUnlock()
	fake.incrByMutex.RLock()
	defer fake.incrByMutex.RUnlock()
	fake.incrByFloatMutex.RLock()
	defer fake.incrByFloatMutex.RUnlock()
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	fake.jSONArrAppendMutex.RLock()
	defer fake.jSONArrAppendMutex.RUnlock()
	fake.jSONArrIndexMutex.RLock()
	defer fake.jSONArrIndexMutex.RUnlock()
	fake.jSONArrIndexWithArgsMutex.RLock()
	defer fake.jSONArrIndexWithArgsMutex.RUnlock()
	fake.jSONArrInsertMutex.RLock()
	defer fake.jSONArrInsertMutex.RUnlock()
	fake.jSONArrLenMutex.RLock()
	defer fake.jSONArrLenMutex.RUnlock()
	fake.jSONArrPopMutex.RLock()
	defer fake.jSONArrPopMutex.RUnlock()
	fake.jSONArrTrimMutex.RLock()
	defer fake.jSONArrTrimMutex.RUnlock()
	fake.jSONArrTrimWithArgsMutex.RLock()
	defer fake.jSONArrTrimWithArgsMutex.RUnlock()
	fake.jSONClearMutex.RLock()
	defer fake.jSONClearMutex.RUnlock()
	fake.jSONDebugMemoryMutex.RLock()
	defer fake.jSONDebugMemoryMutex.RUnlock()
	fake.jSONDelMutex.RLock()
	defer fake.jSONDelMutex.RUnlock()
	fake.jSONForgetMutex.RLock()
	defer fake.jSONForgetMutex.RUnlock()
	fake.jSONGetMutex.RLock()
	defer fake.jSONGetMutex.RUnlock()
	fake.jSONGetWithArgsMutex.RLock()
	defer fake.jSONGetWithArgsMutex.RUnlock()
	fake.jSONMGetMutex.RLock()
	defer fake.jSONMGetMutex.RUnlock()
	fake.jSONMSetMutex.RLock()
	defer fake.jSONMSetMutex.RUnlock()
	fake.jSONMSetArgsMutex.RLock()
	defer fake.jSONMSetArgsMutex.RUnlock()
	fake.jSONMergeMutex.RLock()
	defer fake.jSONMergeMutex.RUnlock()
	fake.jSONNumIncrByMutex.RLock()
	defer fake.jSONNumIncrByMutex.RUnlock()
	fake.jSONObjKeysMutex.RLock()
	defer fake.jSONObjKeysMutex.RUnlock()
	fake.jSONObjLenMutex.RLock()
	defer fake.jSONObjLenMutex.RUnlock()
	fake.jSONSetMutex.RLock()
	defer fake.jSONSetMutex.RUnlock()
	fake.jSONSetModeMutex.RLock()
	defer fake.jSONSetModeMutex.RUnlock()
	fake.jSONStrAppendMutex.RLock()
	defer fake.jSONStrAppendMutex.RUnlock()
	fake.jSONStrLenMutex.RLock()
	defer fake.jSONStrLenMutex.RUnlock()
	fake.jSONToggleMutex.RLock()
	defer fake.jSONToggleMutex.RUnlock()
	fake.jSONTypeMutex.RLock()
	defer fake.jSONTypeMutex.RUnlock()
	fake.keysMutex.RLock()
	defer fake.keysMutex.RUnlock()
	fake.lCSMutex.RLock()
	defer fake.lCSMutex.RUnlock()
	fake.lIndexMutex.RLock()
	defer fake.lIndexMutex.RUnlock()
	fake.lInsertMutex.RLock()
	defer fake.lInsertMutex.RUnlock()
	fake.lInsertAfterMutex.RLock()
	defer fake.lInsertAfterMutex.RUnlock()
	fake.lInsertBeforeMutex.RLock()
	defer fake.lInsertBeforeMutex.RUnlock()
	fake.lLenMutex.RLock()
	defer fake.lLenMutex.RUnlock()
	fake.lMPopMutex.RLock()
	defer fake.lMPopMutex.RUnlock()
	fake.lMoveMutex.RLock()
	defer fake.lMoveMutex.RUnlock()
	fake.lPopMutex.RLock()
	defer fake.lPopMutex.RUnlock()
	fake.lPopCountMutex.RLock()
	defer fake.lPopCountMutex.RUnlock()
	fake.lPosMutex.RLock()
	defer fake.lPosMutex.RUnlock()
	fake.lPosCountMutex.RLock()
	defer fake.lPosCountMutex.RUnlock()
	fake.lPushMutex.RLock()
	defer fake.lPushMutex.RUnlock()
	fake.lPushXMutex.RLock()
	defer fake.lPushXMutex.RUnlock()
	fake.lRangeMutex.RLock()
	defer fake.lRangeMutex.RUnlock()
	fake.lRemMutex.RLock()
	defer fake.lRemMutex.RUnlock()
	fake.lSetMutex.RLock()
	defer fake.lSetMutex.RUnlock()
	fake.lTrimMutex.RLock()
	defer fake.lTrimMutex.RUnlock()
	fake.lastSaveMutex.RLock()
	defer fake.lastSaveMutex.RUnlock()
	fake.mGetMutex.RLock()
	defer fake.mGetMutex.RUnlock()
	fake.mSetMutex.RLock()
	defer fake.mSetMutex.RUnlock()
	fake.mSetNXMutex.RLock()
	defer fake.mSetNXMutex.RUnlock()
	fake.memoryUsageMutex.RLock()
	defer fake.memoryUsageMutex.RUnlock()
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	fake.moduleLoadexMutex.RLock()
	defer fake.moduleLoadexMutex.RUnlock()
	fake.moveMutex.RLock()
	defer fake.moveMutex.RUnlock()
	fake.objectEncodingMutex.RLock()
	defer fake.objectEncodingMutex.RUnlock()
	fake.objectFreqMutex.RLock()
	defer fake.objectFreqMutex.RUnlock()
	fake.objectIdleTimeMutex.RLock()
	defer fake.objectIdleTimeMutex.RUnlock()
	fake.objectRefCountMutex.RLock()
	defer fake.objectRefCountMutex.RUnlock()
	fake.pExpireMutex.RLock()
	defer fake.pExpireMutex.RUnlock()
	fake.pExpireAtMutex.RLock()
	defer fake.pExpireAtMutex.RUnlock()
	fake.pExpireTimeMutex.RLock()
	defer fake.pExpireTimeMutex.RUnlock()
	fake.pFAddMutex.RLock()
	defer fake.pFAddMutex.RUnlock()
	fake.pFCountMutex.RLock()
	defer fake.pFCountMutex.RUnlock()
	fake.pFMergeMutex.RLock()
	defer fake.pFMergeMutex.RUnlock()
	fake.pTTLMutex.RLock()
	defer fake.pTTLMutex.RUnlock()
	fake.persistMutex.RLock()
	defer fake.persistMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	fake.pipelineMutex.RLock()
	defer fake.pipelineMutex.RUnlock()
	fake.pipelinedMutex.RLock()
	defer fake.pipelinedMutex.RUnlock()
	fake.pubSubChannelsMutex.RLock()
	defer fake.pubSubChannelsMutex.RUnlock()
	fake.pubSubNumPatMutex.RLock()
	defer fake.pubSubNumPatMutex.RUnlock()
	fake.pubSubNumSubMutex.RLock()
	defer fake.pubSubNumSubMutex.RUnlock()
	fake.pubSubShardChannelsMutex.RLock()
	defer fake.pubSubShardChannelsMutex.RUnlock()
	fake.pubSubShardNumSubMutex.RLock()
	defer fake.pubSubShardNumSubMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	fake.quitMutex.RLock()
	defer fake.quitMutex.RUnlock()
	fake.rPopMutex.RLock()
	defer fake.rPopMutex.RUnlock()
	fake.rPopCountMutex.RLock()
	defer fake.rPopCountMutex.RUnlock()
	fake.rPopLPushMutex.RLock()
	defer fake.rPopLPushMutex.RUnlock()
	fake.rPushMutex.RLock()
	defer fake.rPushMutex.RUnlock()
	fake.rPushXMutex.RLock()
	defer fake.rPushXMutex.RUnlock()
	fake.randomKeyMutex.RLock()
	defer fake.randomKeyMutex.RUnlock()
	fake.readOnlyMutex.RLock()
	defer fake.readOnlyMutex.RUnlock()
	fake.readWriteMutex.RLock()
	defer fake.readWriteMutex.RUnlock()
	fake.renameMutex.RLock()
	defer fake.renameMutex.RUnlock()
	fake.renameNXMutex.RLock()
	defer fake.renameNXMutex.RUnlock()
	fake.restoreMutex.RLock()
	defer fake.restoreMutex.RUnlock()
	fake.restoreReplaceMutex.RLock()
	defer fake.restoreReplaceMutex.RUnlock()
	fake.sAddMutex.RLock()
	defer fake.sAddMutex.RUnlock()
	fake.sCardMutex.RLock()
	defer fake.sCardMutex.RUnlock()
	fake.sDiffMutex.RLock()
	defer fake.sDiffMutex.RUnlock()
	fake.sDiffStoreMutex.RLock()
	defer fake.sDiffStoreMutex.RUnlock()
	fake.sInterMutex.RLock()
	defer fake.sInterMutex.RUnlock()
	fake.sInterCardMutex.RLock()
	defer fake.sInterCardMutex.RUnlock()
	fake.sInterStoreMutex.RLock()
	defer fake.sInterStoreMutex.RUnlock()
	fake.sIsMemberMutex.RLock()
	defer fake.sIsMemberMutex.RUnlock()
	fake.sMIsMemberMutex.RLock()
	defer fake.sMIsMemberMutex.RUnlock()
	fake.sMembersMutex.RLock()
	defer fake.sMembersMutex.RUnlock()
	fake.sMembersMapMutex.RLock()
	defer fake.sMembersMapMutex.RUnlock()
	fake.sMoveMutex.RLock()
	defer fake.sMoveMutex.RUnlock()
	fake.sPopMutex.RLock()
	defer fake.sPopMutex.RUnlock()
	fake.sPopNMutex.RLock()
	defer fake.sPopNMutex.RUnlock()
	fake.sPublishMutex.RLock()
	defer fake.sPublishMutex.RUnlock()
	fake.sRandMemberMutex.RLock()
	defer fake.sRandMemberMutex.RUnlock()
	fake.sRandMemberNMutex.RLock()
	defer fake.sRandMemberNMutex.RUnlock()
	fake.sRemMutex.RLock()
	defer fake.sRemMutex.RUnlock()
	fake.sScanMutex.RLock()
	defer fake.sScanMutex.RUnlock()
	fake.sUnionMutex.RLock()
	defer fake.sUnionMutex.RUnlock()
	fake.sUnionStoreMutex.RLock()
	defer fake.sUnionStoreMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	fake.scanMutex.RLock()
	defer fake.scanMutex.RUnlock()
	fake.scanTypeMutex.RLock()
	defer fake.scanTypeMutex.RUnlock()
	fake.scriptExistsMutex.RLock()
	defer fake.scriptExistsMutex.RUnlock()
	fake.scriptFlushMutex.RLock()
	defer fake.scriptFlushMutex.RUnlock()
	fake.scriptKillMutex.RLock()
	defer fake.scriptKillMutex.RUnlock()
	fake.scriptLoadMutex.RLock()
	defer fake.scriptLoadMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	fake.setArgsMutex.RLock()
	defer fake.setArgsMutex.RUnlock()
	fake.setBitMutex.RLock()
	defer fake.setBitMutex.RUnlock()
	fake.setExMutex.RLock()
	defer fake.setExMutex.RUnlock()
	fake.setNXMutex.RLock()
	defer fake.setNXMutex.RUnlock()
	fake.setRangeMutex.RLock()
	defer fake.setRangeMutex.RUnlock()
	fake.setXXMutex.RLock()
	defer fake.setXXMutex.RUnlock()
	fake.shutdownMutex.RLock()
	defer fake.shutdownMutex.RUnlock()
	fake.shutdownNoSaveMutex.RLock()
	defer fake.shutdownNoSaveMutex.RUnlock()
	fake.shutdownSaveMutex.RLock()
	defer fake.shutdownSaveMutex.RUnlock()
	fake.slaveOfMutex.RLock()
	defer fake.slaveOfMutex.RUnlock()
	fake.slowLogGetMutex.RLock()
	defer fake.slowLogGetMutex.RUnlock()
	fake.sortMutex.RLock()
	defer fake.sortMutex.RUnlock()
	fake.sortInterfacesMutex.RLock()
	defer fake.sortInterfacesMutex.RUnlock()
	fake.sortROMutex.RLock()
	defer fake.sortROMutex.RUnlock()
	fake.sortStoreMutex.RLock()
	defer fake.sortStoreMutex.RUnlock()
	fake.strLenMutex.RLock()
	defer fake.strLenMutex.RUnlock()
	fake.tDigestAddMutex.RLock()
	defer fake.tDigestAddMutex.RUnlock()
	fake.tDigestByRankMutex.RLock()
	defer fake.tDigestByRankMutex.RUnlock()
	fake.tDigestByRevRankMutex.RLock()
	defer fake.tDigestByRevRankMutex.RUnlock()
	fake.tDigestCDFMutex.RLock()
	defer fake.tDigestCDFMutex.RUnlock()
	fake.tDigestCreateMutex.RLock()
	defer fake.tDigestCreateMutex.RUnlock()
	fake.tDigestCreateWithCompressionMutex.RLock()
	defer fake.tDigestCreateWithCompressionMutex.RUnlock()
	fake.tDigestInfoMutex.RLock()
	defer fake.tDigestInfoMutex.RUnlock()
	fake.tDigestMaxMutex.RLock()
	defer fake.tDigestMaxMutex.RUnlock()
	fake.tDigestMergeMutex.RLock()
	defer fake.tDigestMergeMutex.RUnlock()
	fake.tDigestMinMutex.RLock()
	defer fake.tDigestMinMutex.RUnlock()
	fake.tDigestQuantileMutex.RLock()
	defer fake.tDigestQuantileMutex.RUnlock()
	fake.tDigestRankMutex.RLock()
	defer fake.tDigestRankMutex.RUnlock()
	fake.tDigestResetMutex.RLock()
	defer fake.tDigestResetMutex.RUnlock()
	fake.tDigestRevRankMutex.RLock()
	defer fake.tDigestRevRankMutex.RUnlock()
	fake.tDigestTrimmedMeanMutex.RLock()
	defer fake.tDigestTrimmedMeanMutex.RUnlock()
	fake.tFCallMutex.RLock()
	defer fake.tFCallMutex.RUnlock()
	fake.tFCallASYNCMutex.RLock()
	defer fake.tFCallASYNCMutex.RUnlock()
	fake.tFCallASYNCArgsMutex.RLock()
	defer fake.tFCallASYNCArgsMutex.RUnlock()
	fake.tFCallArgsMutex.RLock()
	defer fake.tFCallArgsMutex.RUnlock()
	fake.tFunctionDeleteMutex.RLock()
	defer fake.tFunctionDeleteMutex.RUnlock()
	fake.tFunctionListMutex.RLock()
	defer fake.tFunctionListMutex.RUnlock()
	fake.tFunctionListArgsMutex.RLock()
	defer fake.tFunctionListArgsMutex.RUnlock()
	fake.tFunctionLoadMutex.RLock()
	defer fake.tFunctionLoadMutex.RUnlock()
	fake.tFunctionLoadArgsMutex.RLock()
	defer fake.tFunctionLoadArgsMutex.RUnlock()
	fake.tSAddMutex.RLock()
	defer fake.tSAddMutex.RUnlock()
	fake.tSAddWithArgsMutex.RLock()
	defer fake.tSAddWithArgsMutex.RUnlock()
	fake.tSAlterMutex.RLock()
	defer fake.tSAlterMutex.RUnlock()
	fake.tSCreateMutex.RLock()
	defer fake.tSCreateMutex.RUnlock()
	fake.tSCreateRuleMutex.RLock()
	defer fake.tSCreateRuleMutex.RUnlock()
	fake.tSCreateRuleWithArgsMutex.RLock()
	defer fake.tSCreateRuleWithArgsMutex.RUnlock()
	fake.tSCreateWithArgsMutex.RLock()
	defer fake.tSCreateWithArgsMutex.RUnlock()
	fake.tSDecrByMutex.RLock()
	defer fake.tSDecrByMutex.RUnlock()
	fake.tSDecrByWithArgsMutex.RLock()
	defer fake.tSDecrByWithArgsMutex.RUnlock()
	fake.tSDelMutex.RLock()
	defer fake.tSDelMutex.RUnlock()
	fake.tSDeleteRuleMutex.RLock()
	defer fake.tSDeleteRuleMutex.RUnlock()
	fake.tSGetMutex.RLock()
	defer fake.tSGetMutex.RUnlock()
	fake.tSGetWithArgsMutex.RLock()
	defer fake.tSGetWithArgsMutex.RUnlock()
	fake.tSIncrByMutex.RLock()
	defer fake.tSIncrByMutex.RUnlock()
	fake.tSIncrByWithArgsMutex.RLock()
	defer fake.tSIncrByWithArgsMutex.RUnlock()
	fake.tSInfoMutex.RLock()
	defer fake.tSInfoMutex.RUnlock()
	fake.tSInfoWithArgsMutex.RLock()
	defer fake.tSInfoWithArgsMutex.RUnlock()
	fake.tSMAddMutex.RLock()
	defer fake.tSMAddMutex.RUnlock()
	fake.tSMGetMutex.RLock()
	defer fake.tSMGetMutex.RUnlock()
	fake.tSMGetWithArgsMutex.RLock()
	defer fake.tSMGetWithArgsMutex.RUnlock()
	fake.tSMRangeMutex.RLock()
	defer fake.tSMRangeMutex.RUnlock()
	fake.tSMRangeWithArgsMutex.RLock()
	defer fake.tSMRangeWithArgsMutex.RUnlock()
	fake.tSMRevRangeMutex.RLock()
	defer fake.tSMRevRangeMutex.RUnlock()
	fake.tSMRevRangeWithArgsMutex.RLock()
	defer fake.tSMRevRangeWithArgsMutex.RUnlock()
	fake.tSQueryIndexMutex.RLock()
	defer fake.tSQueryIndexMutex.RUnlock()
	fake.tSRangeMutex.RLock()
	defer fake.tSRangeMutex.RUnlock()
	fake.tSRangeWithArgsMutex.RLock()
	defer fake.tSRangeWithArgsMutex.RUnlock()
	fake.tSRevRangeMutex.RLock()
	defer fake.tSRevRangeMutex.RUnlock()
	fake.tSRevRangeWithArgsMutex.RLock()
	defer fake.tSRevRangeWithArgsMutex.RUnlock()
	fake.tTLMutex.RLock()
	defer fake.tTLMutex.RUnlock()
	fake.timeMutex.RLock()
	defer fake.timeMutex.RUnlock()
	fake.topKAddMutex.RLock()
	defer fake.topKAddMutex.RUnlock()
	fake.topKCountMutex.RLock()
	defer fake.topKCountMutex.RUnlock()
	fake.topKIncrByMutex.RLock()
	defer fake.topKIncrByMutex.RUnlock()
	fake.topKInfoMutex.RLock()
	defer fake.topKInfoMutex.RUnlock()
	fake.topKListMutex.RLock()
	defer fake.topKListMutex.RUnlock()
	fake.topKListWithCountMutex.RLock()
	defer fake.topKListWithCountMutex.RUnlock()
	fake.topKQueryMutex.RLock()
	defer fake.topKQueryMutex.RUnlock()
	fake.topKReserveMutex.RLock()
	defer fake.topKReserveMutex.RUnlock()
	fake.topKReserveWithOptionsMutex.RLock()
	defer fake.topKReserveWithOptionsMutex.RUnlock()
	fake.touchMutex.RLock()
	defer fake.touchMutex.RUnlock()
	fake.txPipelineMutex.RLock()
	defer fake.txPipelineMutex.RUnlock()
	fake.txPipelinedMutex.RLock()
	defer fake.txPipelinedMutex.RUnlock()
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	fake.unlinkMutex.RLock()
	defer fake.unlinkMutex.RUnlock()
	fake.xAckMutex.RLock()
	defer fake.xAckMutex.RUnlock()
	fake.xAddMutex.RLock()
	defer fake.xAddMutex.RUnlock()
	fake.xAutoClaimMutex.RLock()
	defer fake.xAutoClaimMutex.RUnlock()
	fake.xAutoClaimJustIDMutex.RLock()
	defer fake.xAutoClaimJustIDMutex.RUnlock()
	fake.xClaimMutex.RLock()
	defer fake.xClaimMutex.RUnlock()
	fake.xClaimJustIDMutex.RLock()
	defer fake.xClaimJustIDMutex.RUnlock()
	fake.xDelMutex.RLock()
	defer fake.xDelMutex.RUnlock()
	fake.xGroupCreateMutex.RLock()
	defer fake.xGroupCreateMutex.RUnlock()
	fake.xGroupCreateConsumerMutex.RLock()
	defer fake.xGroupCreateConsumerMutex.RUnlock()
	fake.xGroupCreateMkStreamMutex.RLock()
	defer fake.xGroupCreateMkStreamMutex.RUnlock()
	fake.xGroupDelConsumerMutex.RLock()
	defer fake.xGroupDelConsumerMutex.RUnlock()
	fake.xGroupDestroyMutex.RLock()
	defer fake.xGroupDestroyMutex.RUnlock()
	fake.xGroupSetIDMutex.RLock()
	defer fake.xGroupSetIDMutex.RUnlock()
	fake.xInfoConsumersMutex.RLock()
	defer fake.xInfoConsumersMutex.RUnlock()
	fake.xInfoGroupsMutex.RLock()
	defer fake.xInfoGroupsMutex.RUnlock()
	fake.xInfoStreamMutex.RLock()
	defer fake.xInfoStreamMutex.RUnlock()
	fake.xInfoStreamFullMutex.RLock()
	defer fake.xInfoStreamFullMutex.RUnlock()
	fake.xLenMutex.RLock()
	defer fake.xLenMutex.RUnlock()
	fake.xPendingMutex.RLock()
	defer fake.xPendingMutex.RUnlock()
	fake.xPendingExtMutex.RLock()
	defer fake.xPendingExtMutex.RUnlock()
	fake.xRangeMutex.RLock()
	defer fake.xRangeMutex.RUnlock()
	fake.xRangeNMutex.RLock()
	defer fake.xRangeNMutex.RUnlock()
	fake.xReadMutex.RLock()
	defer fake.xReadMutex.RUnlock()
	fake.xReadGroupMutex.RLock()
	defer fake.xReadGroupMutex.RUnlock()
	fake.xReadStreamsMutex.RLock()
	defer fake.xReadStreamsMutex.RUnlock()
	fake.xRevRangeMutex.RLock()
	defer fake.xRevRangeMutex.RUnlock()
	fake.xRevRangeNMutex.RLock()
	defer fake.xRevRangeNMutex.RUnlock()
	fake.xTrimMaxLenMutex.RLock()
	defer fake.xTrimMaxLenMutex.RUnlock()
	fake.xTrimMaxLenApproxMutex.RLock()
	defer fake.xTrimMaxLenApproxMutex.RUnlock()
	fake.xTrimMinIDMutex.RLock()
	defer fake.xTrimMinIDMutex.RUnlock()
	fake.xTrimMinIDApproxMutex.RLock()
	defer fake.xTrimMinIDApproxMutex.RUnlock()
	fake.zAddMutex.RLock()
	defer fake.zAddMutex.RUnlock()
	fake.zAddArgsMutex.RLock()
	defer fake.zAddArgsMutex.RUnlock()
	fake.zAddArgsIncrMutex.RLock()
	defer fake.zAddArgsIncrMutex.RUnlock()
	fake.zAddGTMutex.RLock()
	defer fake.zAddGTMutex.RUnlock()
	fake.zAddLTMutex.RLock()
	defer fake.zAddLTMutex.RUnlock()
	fake.zAddNXMutex.RLock()
	defer fake.zAddNXMutex.RUnlock()
	fake.zAddXXMutex.RLock()
	defer fake.zAddXXMutex.RUnlock()
	fake.zCardMutex.RLock()
	defer fake.zCardMutex.RUnlock()
	fake.zCountMutex.RLock()
	defer fake.zCountMutex.RUnlock()
	fake.zDiffMutex.RLock()
	defer fake.zDiffMutex.RUnlock()
	fake.zDiffStoreMutex.RLock()
	defer fake.zDiffStoreMutex.RUnlock()
	fake.zDiffWithScoresMutex.RLock()
	defer fake.zDiffWithScoresMutex.RUnlock()
	fake.zIncrByMutex.RLock()
	defer fake.zIncrByMutex.RUnlock()
	fake.zInterMutex.RLock()
	defer fake.zInterMutex.RUnlock()
	fake.zInterCardMutex.RLock()
	defer fake.zInterCardMutex.RUnlock()
	fake.zInterStoreMutex.RLock()
	defer fake.zInterStoreMutex.RUnlock()
	fake.zInterWithScoresMutex.RLock()
	defer fake.zInterWithScoresMutex.RUnlock()
	fake.zLexCountMutex.RLock()
	defer fake.zLexCountMutex.RUnlock()
	fake.zMPopMutex.RLock()
	defer fake.zMPopMutex.RUnlock()
	fake.zMScoreMutex.RLock()
	defer fake.zMScoreMutex.RUnlock()
	fake.zPopMaxMutex.RLock()
	defer fake.zPopMaxMutex.RUnlock()
	fake.zPopMinMutex.RLock()
	defer fake.zPopMinMutex.RUnlock()
	fake.zRandMemberMutex.RLock()
	defer fake.zRandMemberMutex.RUnlock()
	fake.zRandMemberWithScoresMutex.RLock()
	defer fake.zRandMemberWithScoresMutex.RUnlock()
	fake.zRangeMutex.RLock()
	defer fake.zRangeMutex.RUnlock()
	fake.zRangeArgsMutex.RLock()
	defer fake.zRangeArgsMutex.RUnlock()
	fake.zRangeArgsWithScoresMutex.RLock()
	defer fake.zRangeArgsWithScoresMutex.RUnlock()
	fake.zRangeByLexMutex.RLock()
	defer fake.zRangeByLexMutex.RUnlock()
	fake.zRangeByScoreMutex.RLock()
	defer fake.zRangeByScoreMutex.RUnlock()
	fake.zRangeByScoreWithScoresMutex.RLock()
	defer fake.zRangeByScoreWithScoresMutex.RUnlock()
	fake.zRangeStoreMutex.RLock()
	defer fake.zRangeStoreMutex.RUnlock()
	fake.zRangeWithScoresMutex.RLock()
	defer fake.zRangeWithScoresMutex.RUnlock()
	fake.zRankMutex.RLock()
	defer fake.zRankMutex.RUnlock()
	fake.zRankWithScoreMutex.RLock()
	defer fake.zRankWithScoreMutex.RUnlock()
	fake.zRemMutex.RLock()
	defer fake.zRemMutex.RUnlock()
	fake.zRemRangeByLexMutex.RLock()
	defer fake.zRemRangeByLexMutex.RUnlock()
	fake.zRemRangeByRankMutex.RLock()
	defer fake.zRemRangeByRankMutex.RUnlock()
	fake.zRemRangeByScoreMutex.RLock()
	defer fake.zRemRangeByScoreMutex.RUnlock()
	fake.zRevRangeMutex.RLock()
	defer fake.zRevRangeMutex.RUnlock()
	fake.zRevRangeByLexMutex.RLock()
	defer fake.zRevRangeByLexMutex.RUnlock()
	fake.zRevRangeByScoreMutex.RLock()
	defer fake.zRevRangeByScoreMutex.RUnlock()
	fake.zRevRangeByScoreWithScoresMutex.RLock()
	defer fake.zRevRangeByScoreWithScoresMutex.RUnlock()
	fake.zRevRangeWithScoresMutex.RLock()
	defer fake.zRevRangeWithScoresMutex.RUnlock()
	fake.zRevRankMutex.RLock()
	defer fake.zRevRankMutex.RUnlock()
	fake.zRevRankWithScoreMutex.RLock()
	defer fake.zRevRankWithScoreMutex.RUnlock()
	fake.zScanMutex.RLock()
	defer fake.zScanMutex.RUnlock()
	fake.zScoreMutex.RLock()
	defer fake.zScoreMutex.RUnlock()
	fake.zUnionMutex.RLock()
	defer fake.zUnionMutex.RUnlock()
	fake.zUnionStoreMutex.RLock()
	defer fake.zUnionStoreMutex.RUnlock()
	fake.zUnionWithScoresMutex.RLock()
	defer fake.zUnionWithScoresMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCmdable) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ redis.Cmdable = new(FakeCmdable)
