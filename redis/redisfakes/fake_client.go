// Code generated by counterfeiter. DO NOT EDIT.
package redisfakes

import (
	"context"
	"sync"

	"github.com/dora-network/dora-service-utils/redis"
	redisa "github.com/redis/go-redis/v9"
)

type FakeClient struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	HGetStub        func(context.Context, string, string) *redisa.StringCmd
	hGetMutex       sync.RWMutex
	hGetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	hGetReturns struct {
		result1 *redisa.StringCmd
	}
	hGetReturnsOnCall map[int]struct {
		result1 *redisa.StringCmd
	}
	HSetStub        func(context.Context, string, ...interface{}) *redisa.IntCmd
	hSetMutex       sync.RWMutex
	hSetArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}
	hSetReturns struct {
		result1 *redisa.IntCmd
	}
	hSetReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	IncrStub        func(context.Context, string) *redisa.IntCmd
	incrMutex       sync.RWMutex
	incrArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	incrReturns struct {
		result1 *redisa.IntCmd
	}
	incrReturnsOnCall map[int]struct {
		result1 *redisa.IntCmd
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeClient) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeClient) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) HGet(arg1 context.Context, arg2 string, arg3 string) *redisa.StringCmd {
	fake.hGetMutex.Lock()
	ret, specificReturn := fake.hGetReturnsOnCall[len(fake.hGetArgsForCall)]
	fake.hGetArgsForCall = append(fake.hGetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.HGetStub
	fakeReturns := fake.hGetReturns
	fake.recordInvocation("HGet", []interface{}{arg1, arg2, arg3})
	fake.hGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) HGetCallCount() int {
	fake.hGetMutex.RLock()
	defer fake.hGetMutex.RUnlock()
	return len(fake.hGetArgsForCall)
}

func (fake *FakeClient) HGetCalls(stub func(context.Context, string, string) *redisa.StringCmd) {
	fake.hGetMutex.Lock()
	defer fake.hGetMutex.Unlock()
	fake.HGetStub = stub
}

func (fake *FakeClient) HGetArgsForCall(i int) (context.Context, string, string) {
	fake.hGetMutex.RLock()
	defer fake.hGetMutex.RUnlock()
	argsForCall := fake.hGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) HGetReturns(result1 *redisa.StringCmd) {
	fake.hGetMutex.Lock()
	defer fake.hGetMutex.Unlock()
	fake.HGetStub = nil
	fake.hGetReturns = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeClient) HGetReturnsOnCall(i int, result1 *redisa.StringCmd) {
	fake.hGetMutex.Lock()
	defer fake.hGetMutex.Unlock()
	fake.HGetStub = nil
	if fake.hGetReturnsOnCall == nil {
		fake.hGetReturnsOnCall = make(map[int]struct {
			result1 *redisa.StringCmd
		})
	}
	fake.hGetReturnsOnCall[i] = struct {
		result1 *redisa.StringCmd
	}{result1}
}

func (fake *FakeClient) HSet(arg1 context.Context, arg2 string, arg3 ...interface{}) *redisa.IntCmd {
	fake.hSetMutex.Lock()
	ret, specificReturn := fake.hSetReturnsOnCall[len(fake.hSetArgsForCall)]
	fake.hSetArgsForCall = append(fake.hSetArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []interface{}
	}{arg1, arg2, arg3})
	stub := fake.HSetStub
	fakeReturns := fake.hSetReturns
	fake.recordInvocation("HSet", []interface{}{arg1, arg2, arg3})
	fake.hSetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) HSetCallCount() int {
	fake.hSetMutex.RLock()
	defer fake.hSetMutex.RUnlock()
	return len(fake.hSetArgsForCall)
}

func (fake *FakeClient) HSetCalls(stub func(context.Context, string, ...interface{}) *redisa.IntCmd) {
	fake.hSetMutex.Lock()
	defer fake.hSetMutex.Unlock()
	fake.HSetStub = stub
}

func (fake *FakeClient) HSetArgsForCall(i int) (context.Context, string, []interface{}) {
	fake.hSetMutex.RLock()
	defer fake.hSetMutex.RUnlock()
	argsForCall := fake.hSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) HSetReturns(result1 *redisa.IntCmd) {
	fake.hSetMutex.Lock()
	defer fake.hSetMutex.Unlock()
	fake.HSetStub = nil
	fake.hSetReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeClient) HSetReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.hSetMutex.Lock()
	defer fake.hSetMutex.Unlock()
	fake.HSetStub = nil
	if fake.hSetReturnsOnCall == nil {
		fake.hSetReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.hSetReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeClient) Incr(arg1 context.Context, arg2 string) *redisa.IntCmd {
	fake.incrMutex.Lock()
	ret, specificReturn := fake.incrReturnsOnCall[len(fake.incrArgsForCall)]
	fake.incrArgsForCall = append(fake.incrArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.IncrStub
	fakeReturns := fake.incrReturns
	fake.recordInvocation("Incr", []interface{}{arg1, arg2})
	fake.incrMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) IncrCallCount() int {
	fake.incrMutex.RLock()
	defer fake.incrMutex.RUnlock()
	return len(fake.incrArgsForCall)
}

func (fake *FakeClient) IncrCalls(stub func(context.Context, string) *redisa.IntCmd) {
	fake.incrMutex.Lock()
	defer fake.incrMutex.Unlock()
	fake.IncrStub = stub
}

func (fake *FakeClient) IncrArgsForCall(i int) (context.Context, string) {
	fake.incrMutex.RLock()
	defer fake.incrMutex.RUnlock()
	argsForCall := fake.incrArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) IncrReturns(result1 *redisa.IntCmd) {
	fake.incrMutex.Lock()
	defer fake.incrMutex.Unlock()
	fake.IncrStub = nil
	fake.incrReturns = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeClient) IncrReturnsOnCall(i int, result1 *redisa.IntCmd) {
	fake.incrMutex.Lock()
	defer fake.incrMutex.Unlock()
	fake.IncrStub = nil
	if fake.incrReturnsOnCall == nil {
		fake.incrReturnsOnCall = make(map[int]struct {
			result1 *redisa.IntCmd
		})
	}
	fake.incrReturnsOnCall[i] = struct {
		result1 *redisa.IntCmd
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.hGetMutex.RLock()
	defer fake.hGetMutex.RUnlock()
	fake.hSetMutex.RLock()
	defer fake.hSetMutex.RUnlock()
	fake.incrMutex.RLock()
	defer fake.incrMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ redis.Client = new(FakeClient)
