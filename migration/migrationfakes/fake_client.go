// Code generated by counterfeiter. DO NOT EDIT.
package migrationfakes

import (
	"context"
	"sync"
	"time"

	"cloud.google.com/go/spanner"
	database "cloud.google.com/go/spanner/admin/database/apiv1"
	"cloud.google.com/go/spanner/admin/database/apiv1/databasepb"
	"github.com/dora-network/dora-service-utils/migration"
	gax "github.com/googleapis/gax-go/v2"
)

type FakeClient struct {
	ReadWriteTransactionStub        func(context.Context, func(context.Context, *spanner.ReadWriteTransaction) error) (time.Time, error)
	readWriteTransactionMutex       sync.RWMutex
	readWriteTransactionArgsForCall []struct {
		arg1 context.Context
		arg2 func(context.Context, *spanner.ReadWriteTransaction) error
	}
	readWriteTransactionReturns struct {
		result1 time.Time
		result2 error
	}
	readWriteTransactionReturnsOnCall map[int]struct {
		result1 time.Time
		result2 error
	}
	SingleStub        func() *spanner.ReadOnlyTransaction
	singleMutex       sync.RWMutex
	singleArgsForCall []struct {
	}
	singleReturns struct {
		result1 *spanner.ReadOnlyTransaction
	}
	singleReturnsOnCall map[int]struct {
		result1 *spanner.ReadOnlyTransaction
	}
	UpdateDatabaseDdlStub        func(context.Context, *databasepb.UpdateDatabaseDdlRequest, ...gax.CallOption) (*database.UpdateDatabaseDdlOperation, error)
	updateDatabaseDdlMutex       sync.RWMutex
	updateDatabaseDdlArgsForCall []struct {
		arg1 context.Context
		arg2 *databasepb.UpdateDatabaseDdlRequest
		arg3 []gax.CallOption
	}
	updateDatabaseDdlReturns struct {
		result1 *database.UpdateDatabaseDdlOperation
		result2 error
	}
	updateDatabaseDdlReturnsOnCall map[int]struct {
		result1 *database.UpdateDatabaseDdlOperation
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) ReadWriteTransaction(arg1 context.Context, arg2 func(context.Context, *spanner.ReadWriteTransaction) error) (time.Time, error) {
	fake.readWriteTransactionMutex.Lock()
	ret, specificReturn := fake.readWriteTransactionReturnsOnCall[len(fake.readWriteTransactionArgsForCall)]
	fake.readWriteTransactionArgsForCall = append(fake.readWriteTransactionArgsForCall, struct {
		arg1 context.Context
		arg2 func(context.Context, *spanner.ReadWriteTransaction) error
	}{arg1, arg2})
	stub := fake.ReadWriteTransactionStub
	fakeReturns := fake.readWriteTransactionReturns
	fake.recordInvocation("ReadWriteTransaction", []interface{}{arg1, arg2})
	fake.readWriteTransactionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ReadWriteTransactionCallCount() int {
	fake.readWriteTransactionMutex.RLock()
	defer fake.readWriteTransactionMutex.RUnlock()
	return len(fake.readWriteTransactionArgsForCall)
}

func (fake *FakeClient) ReadWriteTransactionCalls(stub func(context.Context, func(context.Context, *spanner.ReadWriteTransaction) error) (time.Time, error)) {
	fake.readWriteTransactionMutex.Lock()
	defer fake.readWriteTransactionMutex.Unlock()
	fake.ReadWriteTransactionStub = stub
}

func (fake *FakeClient) ReadWriteTransactionArgsForCall(i int) (context.Context, func(context.Context, *spanner.ReadWriteTransaction) error) {
	fake.readWriteTransactionMutex.RLock()
	defer fake.readWriteTransactionMutex.RUnlock()
	argsForCall := fake.readWriteTransactionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) ReadWriteTransactionReturns(result1 time.Time, result2 error) {
	fake.readWriteTransactionMutex.Lock()
	defer fake.readWriteTransactionMutex.Unlock()
	fake.ReadWriteTransactionStub = nil
	fake.readWriteTransactionReturns = struct {
		result1 time.Time
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ReadWriteTransactionReturnsOnCall(i int, result1 time.Time, result2 error) {
	fake.readWriteTransactionMutex.Lock()
	defer fake.readWriteTransactionMutex.Unlock()
	fake.ReadWriteTransactionStub = nil
	if fake.readWriteTransactionReturnsOnCall == nil {
		fake.readWriteTransactionReturnsOnCall = make(map[int]struct {
			result1 time.Time
			result2 error
		})
	}
	fake.readWriteTransactionReturnsOnCall[i] = struct {
		result1 time.Time
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Single() *spanner.ReadOnlyTransaction {
	fake.singleMutex.Lock()
	ret, specificReturn := fake.singleReturnsOnCall[len(fake.singleArgsForCall)]
	fake.singleArgsForCall = append(fake.singleArgsForCall, struct {
	}{})
	stub := fake.SingleStub
	fakeReturns := fake.singleReturns
	fake.recordInvocation("Single", []interface{}{})
	fake.singleMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) SingleCallCount() int {
	fake.singleMutex.RLock()
	defer fake.singleMutex.RUnlock()
	return len(fake.singleArgsForCall)
}

func (fake *FakeClient) SingleCalls(stub func() *spanner.ReadOnlyTransaction) {
	fake.singleMutex.Lock()
	defer fake.singleMutex.Unlock()
	fake.SingleStub = stub
}

func (fake *FakeClient) SingleReturns(result1 *spanner.ReadOnlyTransaction) {
	fake.singleMutex.Lock()
	defer fake.singleMutex.Unlock()
	fake.SingleStub = nil
	fake.singleReturns = struct {
		result1 *spanner.ReadOnlyTransaction
	}{result1}
}

func (fake *FakeClient) SingleReturnsOnCall(i int, result1 *spanner.ReadOnlyTransaction) {
	fake.singleMutex.Lock()
	defer fake.singleMutex.Unlock()
	fake.SingleStub = nil
	if fake.singleReturnsOnCall == nil {
		fake.singleReturnsOnCall = make(map[int]struct {
			result1 *spanner.ReadOnlyTransaction
		})
	}
	fake.singleReturnsOnCall[i] = struct {
		result1 *spanner.ReadOnlyTransaction
	}{result1}
}

func (fake *FakeClient) UpdateDatabaseDdl(arg1 context.Context, arg2 *databasepb.UpdateDatabaseDdlRequest, arg3 ...gax.CallOption) (*database.UpdateDatabaseDdlOperation, error) {
	fake.updateDatabaseDdlMutex.Lock()
	ret, specificReturn := fake.updateDatabaseDdlReturnsOnCall[len(fake.updateDatabaseDdlArgsForCall)]
	fake.updateDatabaseDdlArgsForCall = append(fake.updateDatabaseDdlArgsForCall, struct {
		arg1 context.Context
		arg2 *databasepb.UpdateDatabaseDdlRequest
		arg3 []gax.CallOption
	}{arg1, arg2, arg3})
	stub := fake.UpdateDatabaseDdlStub
	fakeReturns := fake.updateDatabaseDdlReturns
	fake.recordInvocation("UpdateDatabaseDdl", []interface{}{arg1, arg2, arg3})
	fake.updateDatabaseDdlMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) UpdateDatabaseDdlCallCount() int {
	fake.updateDatabaseDdlMutex.RLock()
	defer fake.updateDatabaseDdlMutex.RUnlock()
	return len(fake.updateDatabaseDdlArgsForCall)
}

func (fake *FakeClient) UpdateDatabaseDdlCalls(stub func(context.Context, *databasepb.UpdateDatabaseDdlRequest, ...gax.CallOption) (*database.UpdateDatabaseDdlOperation, error)) {
	fake.updateDatabaseDdlMutex.Lock()
	defer fake.updateDatabaseDdlMutex.Unlock()
	fake.UpdateDatabaseDdlStub = stub
}

func (fake *FakeClient) UpdateDatabaseDdlArgsForCall(i int) (context.Context, *databasepb.UpdateDatabaseDdlRequest, []gax.CallOption) {
	fake.updateDatabaseDdlMutex.RLock()
	defer fake.updateDatabaseDdlMutex.RUnlock()
	argsForCall := fake.updateDatabaseDdlArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) UpdateDatabaseDdlReturns(result1 *database.UpdateDatabaseDdlOperation, result2 error) {
	fake.updateDatabaseDdlMutex.Lock()
	defer fake.updateDatabaseDdlMutex.Unlock()
	fake.UpdateDatabaseDdlStub = nil
	fake.updateDatabaseDdlReturns = struct {
		result1 *database.UpdateDatabaseDdlOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateDatabaseDdlReturnsOnCall(i int, result1 *database.UpdateDatabaseDdlOperation, result2 error) {
	fake.updateDatabaseDdlMutex.Lock()
	defer fake.updateDatabaseDdlMutex.Unlock()
	fake.UpdateDatabaseDdlStub = nil
	if fake.updateDatabaseDdlReturnsOnCall == nil {
		fake.updateDatabaseDdlReturnsOnCall = make(map[int]struct {
			result1 *database.UpdateDatabaseDdlOperation
			result2 error
		})
	}
	fake.updateDatabaseDdlReturnsOnCall[i] = struct {
		result1 *database.UpdateDatabaseDdlOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readWriteTransactionMutex.RLock()
	defer fake.readWriteTransactionMutex.RUnlock()
	fake.singleMutex.RLock()
	defer fake.singleMutex.RUnlock()
	fake.updateDatabaseDdlMutex.RLock()
	defer fake.updateDatabaseDdlMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migration.Client = new(FakeClient)
