// Code generated by counterfeiter. DO NOT EDIT.
package kafkafakes

import (
	"context"
	"sync"

	"github.com/dora-network/dora-service-utils/kafka"
	"github.com/twmb/franz-go/pkg/kgo"
)

type FakeClient struct {
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	CommitMarkedOffsetsStub        func(context.Context) error
	commitMarkedOffsetsMutex       sync.RWMutex
	commitMarkedOffsetsArgsForCall []struct {
		arg1 context.Context
	}
	commitMarkedOffsetsReturns struct {
		result1 error
	}
	commitMarkedOffsetsReturnsOnCall map[int]struct {
		result1 error
	}
	CommitRecordsStub        func(context.Context, ...*kgo.Record) error
	commitRecordsMutex       sync.RWMutex
	commitRecordsArgsForCall []struct {
		arg1 context.Context
		arg2 []*kgo.Record
	}
	commitRecordsReturns struct {
		result1 error
	}
	commitRecordsReturnsOnCall map[int]struct {
		result1 error
	}
	CommitUncommittedOffsetsStub        func(context.Context) error
	commitUncommittedOffsetsMutex       sync.RWMutex
	commitUncommittedOffsetsArgsForCall []struct {
		arg1 context.Context
	}
	commitUncommittedOffsetsReturns struct {
		result1 error
	}
	commitUncommittedOffsetsReturnsOnCall map[int]struct {
		result1 error
	}
	MarkCommitRecordsStub        func(...*kgo.Record)
	markCommitRecordsMutex       sync.RWMutex
	markCommitRecordsArgsForCall []struct {
		arg1 []*kgo.Record
	}
	PingStub        func(context.Context) error
	pingMutex       sync.RWMutex
	pingArgsForCall []struct {
		arg1 context.Context
	}
	pingReturns struct {
		result1 error
	}
	pingReturnsOnCall map[int]struct {
		result1 error
	}
	PollRecordsStub        func(context.Context, int) kgo.Fetches
	pollRecordsMutex       sync.RWMutex
	pollRecordsArgsForCall []struct {
		arg1 context.Context
		arg2 int
	}
	pollRecordsReturns struct {
		result1 kgo.Fetches
	}
	pollRecordsReturnsOnCall map[int]struct {
		result1 kgo.Fetches
	}
	ProduceStub        func(context.Context, *kgo.Record, func(*kgo.Record, error))
	produceMutex       sync.RWMutex
	produceArgsForCall []struct {
		arg1 context.Context
		arg2 *kgo.Record
		arg3 func(*kgo.Record, error)
	}
	ProduceSyncStub        func(context.Context, ...*kgo.Record) kgo.ProduceResults
	produceSyncMutex       sync.RWMutex
	produceSyncArgsForCall []struct {
		arg1 context.Context
		arg2 []*kgo.Record
	}
	produceSyncReturns struct {
		result1 kgo.ProduceResults
	}
	produceSyncReturnsOnCall map[int]struct {
		result1 kgo.ProduceResults
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeClient) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeClient) CloseCalls(stub func()) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeClient) CommitMarkedOffsets(arg1 context.Context) error {
	fake.commitMarkedOffsetsMutex.Lock()
	ret, specificReturn := fake.commitMarkedOffsetsReturnsOnCall[len(fake.commitMarkedOffsetsArgsForCall)]
	fake.commitMarkedOffsetsArgsForCall = append(fake.commitMarkedOffsetsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CommitMarkedOffsetsStub
	fakeReturns := fake.commitMarkedOffsetsReturns
	fake.recordInvocation("CommitMarkedOffsets", []interface{}{arg1})
	fake.commitMarkedOffsetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) CommitMarkedOffsetsCallCount() int {
	fake.commitMarkedOffsetsMutex.RLock()
	defer fake.commitMarkedOffsetsMutex.RUnlock()
	return len(fake.commitMarkedOffsetsArgsForCall)
}

func (fake *FakeClient) CommitMarkedOffsetsCalls(stub func(context.Context) error) {
	fake.commitMarkedOffsetsMutex.Lock()
	defer fake.commitMarkedOffsetsMutex.Unlock()
	fake.CommitMarkedOffsetsStub = stub
}

func (fake *FakeClient) CommitMarkedOffsetsArgsForCall(i int) context.Context {
	fake.commitMarkedOffsetsMutex.RLock()
	defer fake.commitMarkedOffsetsMutex.RUnlock()
	argsForCall := fake.commitMarkedOffsetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CommitMarkedOffsetsReturns(result1 error) {
	fake.commitMarkedOffsetsMutex.Lock()
	defer fake.commitMarkedOffsetsMutex.Unlock()
	fake.CommitMarkedOffsetsStub = nil
	fake.commitMarkedOffsetsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CommitMarkedOffsetsReturnsOnCall(i int, result1 error) {
	fake.commitMarkedOffsetsMutex.Lock()
	defer fake.commitMarkedOffsetsMutex.Unlock()
	fake.CommitMarkedOffsetsStub = nil
	if fake.commitMarkedOffsetsReturnsOnCall == nil {
		fake.commitMarkedOffsetsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.commitMarkedOffsetsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CommitRecords(arg1 context.Context, arg2 ...*kgo.Record) error {
	fake.commitRecordsMutex.Lock()
	ret, specificReturn := fake.commitRecordsReturnsOnCall[len(fake.commitRecordsArgsForCall)]
	fake.commitRecordsArgsForCall = append(fake.commitRecordsArgsForCall, struct {
		arg1 context.Context
		arg2 []*kgo.Record
	}{arg1, arg2})
	stub := fake.CommitRecordsStub
	fakeReturns := fake.commitRecordsReturns
	fake.recordInvocation("CommitRecords", []interface{}{arg1, arg2})
	fake.commitRecordsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) CommitRecordsCallCount() int {
	fake.commitRecordsMutex.RLock()
	defer fake.commitRecordsMutex.RUnlock()
	return len(fake.commitRecordsArgsForCall)
}

func (fake *FakeClient) CommitRecordsCalls(stub func(context.Context, ...*kgo.Record) error) {
	fake.commitRecordsMutex.Lock()
	defer fake.commitRecordsMutex.Unlock()
	fake.CommitRecordsStub = stub
}

func (fake *FakeClient) CommitRecordsArgsForCall(i int) (context.Context, []*kgo.Record) {
	fake.commitRecordsMutex.RLock()
	defer fake.commitRecordsMutex.RUnlock()
	argsForCall := fake.commitRecordsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) CommitRecordsReturns(result1 error) {
	fake.commitRecordsMutex.Lock()
	defer fake.commitRecordsMutex.Unlock()
	fake.CommitRecordsStub = nil
	fake.commitRecordsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CommitRecordsReturnsOnCall(i int, result1 error) {
	fake.commitRecordsMutex.Lock()
	defer fake.commitRecordsMutex.Unlock()
	fake.CommitRecordsStub = nil
	if fake.commitRecordsReturnsOnCall == nil {
		fake.commitRecordsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.commitRecordsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CommitUncommittedOffsets(arg1 context.Context) error {
	fake.commitUncommittedOffsetsMutex.Lock()
	ret, specificReturn := fake.commitUncommittedOffsetsReturnsOnCall[len(fake.commitUncommittedOffsetsArgsForCall)]
	fake.commitUncommittedOffsetsArgsForCall = append(fake.commitUncommittedOffsetsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CommitUncommittedOffsetsStub
	fakeReturns := fake.commitUncommittedOffsetsReturns
	fake.recordInvocation("CommitUncommittedOffsets", []interface{}{arg1})
	fake.commitUncommittedOffsetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) CommitUncommittedOffsetsCallCount() int {
	fake.commitUncommittedOffsetsMutex.RLock()
	defer fake.commitUncommittedOffsetsMutex.RUnlock()
	return len(fake.commitUncommittedOffsetsArgsForCall)
}

func (fake *FakeClient) CommitUncommittedOffsetsCalls(stub func(context.Context) error) {
	fake.commitUncommittedOffsetsMutex.Lock()
	defer fake.commitUncommittedOffsetsMutex.Unlock()
	fake.CommitUncommittedOffsetsStub = stub
}

func (fake *FakeClient) CommitUncommittedOffsetsArgsForCall(i int) context.Context {
	fake.commitUncommittedOffsetsMutex.RLock()
	defer fake.commitUncommittedOffsetsMutex.RUnlock()
	argsForCall := fake.commitUncommittedOffsetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CommitUncommittedOffsetsReturns(result1 error) {
	fake.commitUncommittedOffsetsMutex.Lock()
	defer fake.commitUncommittedOffsetsMutex.Unlock()
	fake.CommitUncommittedOffsetsStub = nil
	fake.commitUncommittedOffsetsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CommitUncommittedOffsetsReturnsOnCall(i int, result1 error) {
	fake.commitUncommittedOffsetsMutex.Lock()
	defer fake.commitUncommittedOffsetsMutex.Unlock()
	fake.CommitUncommittedOffsetsStub = nil
	if fake.commitUncommittedOffsetsReturnsOnCall == nil {
		fake.commitUncommittedOffsetsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.commitUncommittedOffsetsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) MarkCommitRecords(arg1 ...*kgo.Record) {
	fake.markCommitRecordsMutex.Lock()
	fake.markCommitRecordsArgsForCall = append(fake.markCommitRecordsArgsForCall, struct {
		arg1 []*kgo.Record
	}{arg1})
	stub := fake.MarkCommitRecordsStub
	fake.recordInvocation("MarkCommitRecords", []interface{}{arg1})
	fake.markCommitRecordsMutex.Unlock()
	if stub != nil {
		fake.MarkCommitRecordsStub(arg1...)
	}
}

func (fake *FakeClient) MarkCommitRecordsCallCount() int {
	fake.markCommitRecordsMutex.RLock()
	defer fake.markCommitRecordsMutex.RUnlock()
	return len(fake.markCommitRecordsArgsForCall)
}

func (fake *FakeClient) MarkCommitRecordsCalls(stub func(...*kgo.Record)) {
	fake.markCommitRecordsMutex.Lock()
	defer fake.markCommitRecordsMutex.Unlock()
	fake.MarkCommitRecordsStub = stub
}

func (fake *FakeClient) MarkCommitRecordsArgsForCall(i int) []*kgo.Record {
	fake.markCommitRecordsMutex.RLock()
	defer fake.markCommitRecordsMutex.RUnlock()
	argsForCall := fake.markCommitRecordsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) Ping(arg1 context.Context) error {
	fake.pingMutex.Lock()
	ret, specificReturn := fake.pingReturnsOnCall[len(fake.pingArgsForCall)]
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.PingStub
	fakeReturns := fake.pingReturns
	fake.recordInvocation("Ping", []interface{}{arg1})
	fake.pingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeClient) PingCalls(stub func(context.Context) error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = stub
}

func (fake *FakeClient) PingArgsForCall(i int) context.Context {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	argsForCall := fake.pingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) PingReturns(result1 error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) PingReturnsOnCall(i int, result1 error) {
	fake.pingMutex.Lock()
	defer fake.pingMutex.Unlock()
	fake.PingStub = nil
	if fake.pingReturnsOnCall == nil {
		fake.pingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) PollRecords(arg1 context.Context, arg2 int) kgo.Fetches {
	fake.pollRecordsMutex.Lock()
	ret, specificReturn := fake.pollRecordsReturnsOnCall[len(fake.pollRecordsArgsForCall)]
	fake.pollRecordsArgsForCall = append(fake.pollRecordsArgsForCall, struct {
		arg1 context.Context
		arg2 int
	}{arg1, arg2})
	stub := fake.PollRecordsStub
	fakeReturns := fake.pollRecordsReturns
	fake.recordInvocation("PollRecords", []interface{}{arg1, arg2})
	fake.pollRecordsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) PollRecordsCallCount() int {
	fake.pollRecordsMutex.RLock()
	defer fake.pollRecordsMutex.RUnlock()
	return len(fake.pollRecordsArgsForCall)
}

func (fake *FakeClient) PollRecordsCalls(stub func(context.Context, int) kgo.Fetches) {
	fake.pollRecordsMutex.Lock()
	defer fake.pollRecordsMutex.Unlock()
	fake.PollRecordsStub = stub
}

func (fake *FakeClient) PollRecordsArgsForCall(i int) (context.Context, int) {
	fake.pollRecordsMutex.RLock()
	defer fake.pollRecordsMutex.RUnlock()
	argsForCall := fake.pollRecordsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) PollRecordsReturns(result1 kgo.Fetches) {
	fake.pollRecordsMutex.Lock()
	defer fake.pollRecordsMutex.Unlock()
	fake.PollRecordsStub = nil
	fake.pollRecordsReturns = struct {
		result1 kgo.Fetches
	}{result1}
}

func (fake *FakeClient) PollRecordsReturnsOnCall(i int, result1 kgo.Fetches) {
	fake.pollRecordsMutex.Lock()
	defer fake.pollRecordsMutex.Unlock()
	fake.PollRecordsStub = nil
	if fake.pollRecordsReturnsOnCall == nil {
		fake.pollRecordsReturnsOnCall = make(map[int]struct {
			result1 kgo.Fetches
		})
	}
	fake.pollRecordsReturnsOnCall[i] = struct {
		result1 kgo.Fetches
	}{result1}
}

func (fake *FakeClient) Produce(arg1 context.Context, arg2 *kgo.Record, arg3 func(*kgo.Record, error)) {
	fake.produceMutex.Lock()
	fake.produceArgsForCall = append(fake.produceArgsForCall, struct {
		arg1 context.Context
		arg2 *kgo.Record
		arg3 func(*kgo.Record, error)
	}{arg1, arg2, arg3})
	stub := fake.ProduceStub
	fake.recordInvocation("Produce", []interface{}{arg1, arg2, arg3})
	fake.produceMutex.Unlock()
	if stub != nil {
		fake.ProduceStub(arg1, arg2, arg3)
	}
}

func (fake *FakeClient) ProduceCallCount() int {
	fake.produceMutex.RLock()
	defer fake.produceMutex.RUnlock()
	return len(fake.produceArgsForCall)
}

func (fake *FakeClient) ProduceCalls(stub func(context.Context, *kgo.Record, func(*kgo.Record, error))) {
	fake.produceMutex.Lock()
	defer fake.produceMutex.Unlock()
	fake.ProduceStub = stub
}

func (fake *FakeClient) ProduceArgsForCall(i int) (context.Context, *kgo.Record, func(*kgo.Record, error)) {
	fake.produceMutex.RLock()
	defer fake.produceMutex.RUnlock()
	argsForCall := fake.produceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) ProduceSync(arg1 context.Context, arg2 ...*kgo.Record) kgo.ProduceResults {
	fake.produceSyncMutex.Lock()
	ret, specificReturn := fake.produceSyncReturnsOnCall[len(fake.produceSyncArgsForCall)]
	fake.produceSyncArgsForCall = append(fake.produceSyncArgsForCall, struct {
		arg1 context.Context
		arg2 []*kgo.Record
	}{arg1, arg2})
	stub := fake.ProduceSyncStub
	fakeReturns := fake.produceSyncReturns
	fake.recordInvocation("ProduceSync", []interface{}{arg1, arg2})
	fake.produceSyncMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) ProduceSyncCallCount() int {
	fake.produceSyncMutex.RLock()
	defer fake.produceSyncMutex.RUnlock()
	return len(fake.produceSyncArgsForCall)
}

func (fake *FakeClient) ProduceSyncCalls(stub func(context.Context, ...*kgo.Record) kgo.ProduceResults) {
	fake.produceSyncMutex.Lock()
	defer fake.produceSyncMutex.Unlock()
	fake.ProduceSyncStub = stub
}

func (fake *FakeClient) ProduceSyncArgsForCall(i int) (context.Context, []*kgo.Record) {
	fake.produceSyncMutex.RLock()
	defer fake.produceSyncMutex.RUnlock()
	argsForCall := fake.produceSyncArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) ProduceSyncReturns(result1 kgo.ProduceResults) {
	fake.produceSyncMutex.Lock()
	defer fake.produceSyncMutex.Unlock()
	fake.ProduceSyncStub = nil
	fake.produceSyncReturns = struct {
		result1 kgo.ProduceResults
	}{result1}
}

func (fake *FakeClient) ProduceSyncReturnsOnCall(i int, result1 kgo.ProduceResults) {
	fake.produceSyncMutex.Lock()
	defer fake.produceSyncMutex.Unlock()
	fake.ProduceSyncStub = nil
	if fake.produceSyncReturnsOnCall == nil {
		fake.produceSyncReturnsOnCall = make(map[int]struct {
			result1 kgo.ProduceResults
		})
	}
	fake.produceSyncReturnsOnCall[i] = struct {
		result1 kgo.ProduceResults
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.commitMarkedOffsetsMutex.RLock()
	defer fake.commitMarkedOffsetsMutex.RUnlock()
	fake.commitRecordsMutex.RLock()
	defer fake.commitRecordsMutex.RUnlock()
	fake.commitUncommittedOffsetsMutex.RLock()
	defer fake.commitUncommittedOffsetsMutex.RUnlock()
	fake.markCommitRecordsMutex.RLock()
	defer fake.markCommitRecordsMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	fake.pollRecordsMutex.RLock()
	defer fake.pollRecordsMutex.RUnlock()
	fake.produceMutex.RLock()
	defer fake.produceMutex.RUnlock()
	fake.produceSyncMutex.RLock()
	defer fake.produceSyncMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kafka.Client = new(FakeClient)
